<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2025-08-24 Sun 18:54 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>CS 2600.02 - Systems Programming</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="David A. Gershman, CISSP" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="support_files/index.css"/><script type="text/javascript" src="support_files/index.js"></script>

<script type="text/javascript" src="support_files/org-info.js">
// @license magnet:?xt=urn:btih:1f739d935676111cfff4b4693e3816e664797050&amp;dn=gpl-3.0.txt GPL-v3-or-Later
// @license-end
</script>

<script type="text/javascript">
// @license magnet:?xt=urn:btih:1f739d935676111cfff4b4693e3816e664797050&amp;dn=gpl-3.0.txt GPL-v3-or-Later
<!--/*--><![CDATA[/*><!--*/
org_html_manager.set("TOC_DEPTH", "2");
org_html_manager.set("LINK_HOME", "");
org_html_manager.set("LINK_UP", "");
org_html_manager.set("LOCAL_TOC", "1");
org_html_manager.set("VIEW_BUTTONS", "0");
org_html_manager.set("MOUSE_HINT", "underline");
org_html_manager.set("FIXED_TOC", "0");
org_html_manager.set("TOC", "0");
org_html_manager.set("VIEW", "info");
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
// @license-end
</script>
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id="content">
<h1 class="title">CS 2600.02 - Systems Programming</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org6ad59e9"></a></li>
<li><a href="#org4447b04">Day 1 - Mon, August 25, 2025</a>
<ul>
<li><a href="#org43e8b3a">Day 1 Introduction</a></li>
<li><a href="#orgd15e682">CS 2600.03 Fall 2025 Syllabus &#xa0;&#xa0;&#xa0;<span class="tag"><span class="Syllabus">Syllabus</span></span></a></li>
<li><a href="#org87eb20a">Logistics</a></li>
<li><a href="#org327d428">Working Environment</a></li>
<li><a href="#org6946fbd">Cal Poly's Unix System</a></li>
<li><a href="#orgfae34bc">Day 1 Summary</a></li>
</ul>
</li>
<li><a href="#org488dc10">Day 2 - Wed, August 27, 2025</a>
<ul>
<li><a href="#orgfd0674d">Day 2 Introduction</a></li>
<li><a href="#org21a4b17">Introduction to Unix&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org8ac291c">Unix Interface&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2ecdc3a">Unix File System Architecture&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6cac283">Command Prompt Overview&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2a55f17">Basic Commands&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org48a8987">Day 2 Summary</a></li>
</ul>
</li>
<li><a href="#org725300e">Day 3 - Mon, September 1, 2025</a>
<ul>
<li><a href="#org344bee5">Day 3 Introduction</a></li>
<li><a href="#orge5a844b">Holiday&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Holiday">Holiday</span></span></a></li>
<li><a href="#org3a1b3dc">Day 3 Summary</a></li>
</ul>
</li>
<li><a href="#orga1bde0f">Day 4 - Wed, September 3, 2025</a>
<ul>
<li><a href="#org8241ee2">Day 4 Introduction</a></li>
<li><a href="#orgfd4d099">Terminal Multiplexer - <span class="cmd">tmux</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org15e2f56">Listing files - <span class="cmd">ls</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org69b44ee">File Globbing&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org32bfb69">Creating a File - <span class="cmd">touch</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6ab16ea">Viewing Files - <span class="cmd">cat</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf994574">Viewing files - <span class="cmd">less</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgc3b9c34">Day 4 Summary</a></li>
</ul>
</li>
<li><a href="#orgbfaf04c">Day 5 - Mon, September 8, 2025</a>
<ul>
<li><a href="#orgcf1545f">Day 5 Introduction</a></li>
<li><a href="#org2f4bddb">Viewing Unix Manual Pages&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org7932cac">Text Editor - <span class="cmd">vi</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org1bd5d8e">Text Editor - <span class="cmd">emacs</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf53df1f">Text Editor - <span class="cmd">nano</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org4b41e79">Day 5 Summary</a></li>
</ul>
</li>
<li><a href="#orgc74d436">Day 6 - Wed, September 10, 2025</a>
<ul>
<li><a href="#orgc08fbcc">Day 6 Introduction</a></li>
<li><a href="#org2d3194e">Make a Directory - <span class="cmd">mkdir</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org973bdd8">Directory Navigation - <span class="cmd">cd</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgfe4bc59"><span class="cmd">tree</span> - Viewing a File Hierarchy&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2ddf314">Copying files - <span class="cmd">cp</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6fa36a5">Moving files - <span class="cmd">mv</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org72c217c">Deleting files - <span class="cmd">rm</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgc0cb892">Copying Directories&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org79035b5">Moving a directory&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orge661cf1">Deleting a Directory&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org3cbd055">Day 6 Summary</a></li>
</ul>
</li>
<li><a href="#orgad328f0">Day 7 - Mon, September 15, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></a>
<ul>
<li><a href="#org5bb8c56">Day 7 Introduction</a></li>
<li><a href="#org8a055e4">Quiz #1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span></span></a></li>
<li><a href="#org7a29a2f">Day 7 Summary</a></li>
</ul>
</li>
<li><a href="#orgfcaf622">Day 8 - Wed, September 17, 2025</a>
<ul>
<li><a href="#org4e3c4ca">Day 8 Introduction</a></li>
<li><a href="#org4cbdca1">File Ownership&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org94ef668">File Permissions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org0573f6b">Change Permissions with <span class="cmd">chmod</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6260c97">Day 8 Summary</a></li>
</ul>
</li>
<li><a href="#orgc72767f">Day 9 - Mon, September 22, 2025</a>
<ul>
<li><a href="#org23135ae">Day 9 Introduction</a></li>
<li><a href="#org7f99e21">Print to the Screen - <span class="cmd">echo</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org8044c93">Environment Variables&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org264b99e">Environment Variables WE Can/Should Set and Maintain&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgb3ea737">Displaying the Date - <span class="cmd">date</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2217232">Scripts&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6427c6c">Day 9 Summary</a></li>
</ul>
</li>
<li><a href="#orgd6c41a7">Day 10 - Wed, September 24, 2025</a>
<ul>
<li><a href="#orgd86c844">Day 10 Introduction</a></li>
<li><a href="#orgb60f3a5">Variables in Scripts&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgec338e0">Command Substitution&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orge067d4d">Positional Parameters&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org5699b69">Get Input : <span class="cmd">read</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf0400ec">I/O Streams in Unix&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org743e35b">Redirection&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgc554254">Redirecting STDOUT&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org8c14a8c">Redirecting STDERR&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgaf8f2d3">Redirecting Both at the Same Time&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org1d39653">Redirecting STDERR to the same location as STDOUT&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org454bf9c">Redirection - Input Stream&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org00799b4">Day 10 Summary</a></li>
</ul>
</li>
<li><a href="#orgb3ec53f">Day 11 - Mon, September 29, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Midterm">Midterm</span></span></a>
<ul>
<li><a href="#org5a7b414">Day 11 Introduction</a></li>
<li><a href="#org13955b4">Midterm #1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span></span></a></li>
<li><a href="#org02510dc">Day 11 Summary</a></li>
</ul>
</li>
<li><a href="#org15be22f">Day 12 - Wed, October 1, 2025</a>
<ul>
<li><a href="#org0f593b0">Day 12 Introduction</a></li>
<li><a href="#orgf8aac04">Pipes - <span class="cmd">|</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org07ac0fc">Extract Field Data - <span class="cmd">cut</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org04672a7">Translate Characters - <span class="cmd">tr</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org11c95e6">Word Count - <span class="cmd">wc</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orga86b649">Top Lines of Code - <span class="cmd">head</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgc62e8ad">Bottom Lines of Code - <span class="cmd">tail</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9d3869c"><span class="cmd">head</span> vs <span class="cmd">tail</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgecb5b2d">Day 12 Summary</a></li>
</ul>
</li>
<li><a href="#org10c4a72">Day 13 - Mon, October 6, 2025</a>
<ul>
<li><a href="#org0b55399">Day 13 Introduction</a></li>
<li><a href="#org05782c3">Search for Content - <span class="cmd">grep</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org1910392">Case-(In)Sensitive Searches&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2731022">Print Anti-Matches&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org75d4232">Multiple Switches&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org4ba21c0">Number of Matches&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org4086bfe">Print Postceding Lines : <span class="cmd">-A</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgb76b6b2">Print Preceding Lines : <span class="cmd">-B</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org770378e">Example</a></li>
<li><a href="#org08a08f5">Patterns for <span class="cmd">grep</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org55344bf">Command Combination&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org207f6ef">Basic Math in Bash&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgd8e9596">Day 13 Summary</a></li>
</ul>
</li>
<li><a href="#orgcb1d52e">Day 14 - Wed, October 8, 2025</a>
<ul>
<li><a href="#orgcac696d">Day 14 Introduction</a></li>
<li><a href="#orgd59514d">Find Files or Directories - <span class="cmd">find</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org23196ff">Pause the Script - <span class="cmd">sleep</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org99b6be8">Conditional Branching - <span class="cmd">if</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6d13a8e"><span class="cmd">if</span> CONDITION Tests&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org0a8001d"><span class="cmd">for</span> Loop&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf859d0d"><span class="cmd">while</span> Loop&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org141ed89">Day 14 Summary</a></li>
</ul>
</li>
<li><a href="#org74a8ed5">Day 15 - Mon, October 13, 2025</a>
<ul>
<li><a href="#org757b9bc">Day 15 Introduction</a></li>
<li><a href="#org2b57176"><span class="cmd">sed</span> - Stream Editor&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org742e0cd"><span class="cmd">awk</span> - Pattern Scanning and Processing Language&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgb5c4c35">Processes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org847d96a">Viewing Current Processes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgbf82b32">Killing a Process&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgad6ff1a">Jobs and Job Control&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org5f5c58e">Day 15 Summary</a></li>
</ul>
</li>
<li><a href="#org329354c">Day 16 - Wed, October 15, 2025</a>
<ul>
<li><a href="#orgcfbd5a8">Day 16 Introduction</a></li>
<li><a href="#org735251c">C Compiler/Compiling&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org616f6b6">Hello World&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org355968f">C Comments&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org40d184b">Day 16 Summary</a></li>
</ul>
</li>
<li><a href="#org62cfe76">Day 17 - Mon, October 20, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></a>
<ul>
<li><a href="#org22a36ab">Day 17 Introduction</a></li>
<li><a href="#org2b00e65">Quiz #2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span></span></a></li>
<li><a href="#org49c4308">Day 17 Summary</a></li>
</ul>
</li>
<li><a href="#org73bb17f">Day 18 - Wed, October 22, 2025</a>
<ul>
<li><a href="#orgf49f5a1">Day 18 Introduction</a></li>
<li><a href="#org70c8f19">Printing Output to Screen - <span class="cmd">printf()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orge146591">Segmentation Faults&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2107b0f">Safety Belts Off!&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgddeb9a9">Data Types&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgc3c7d32"><span class="cmd">sizeof()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org4f26365">Day 18 Summary</a></li>
</ul>
</li>
<li><a href="#orgb4789e7">Day 19 - Mon, October 27, 2025</a>
<ul>
<li><a href="#org39e656d">Day 19 Introduction</a></li>
<li><a href="#org2652eb4">Variables&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org0be374e">Variable Scope&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9b31b77">Operators&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org82ce953">Branching - <span class="cmd">if</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9ba17f9">Loops - <span class="cmd">for</span>, <span class="cmd">while</span>, <span class="cmd">do-while</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org17a96b2">Arrays&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org036f3db">How Arrays Work&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgeb1863d">Array Initialization&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org3f52d44">Day 19 Summary</a></li>
</ul>
</li>
<li><a href="#org486d73f">Day 20 - Wed, October 29, 2025</a>
<ul>
<li><a href="#org5c58ff6">Day 20 Introduction</a></li>
<li><a href="#orgdcf0a76">Introduction to Strings&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf78b7ed">String Comparisons are Array Comparisons&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgb8ebb93">Introduction to Input&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgb02d319">Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org3bcaf8e">C Structures&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org42edf98">Prototypes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6415eac">Day 20 Summary</a></li>
</ul>
</li>
<li><a href="#orgea158d3">Day 21 - Mon, November 3, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Midterm">Midterm</span></span></a>
<ul>
<li><a href="#org3a81401">Day 21 Introduction</a></li>
<li><a href="#org3452d26">Midterm #2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span></span></a></li>
<li><a href="#org2151d5f">Day 21 Summary</a></li>
</ul>
</li>
<li><a href="#orgd2a2f84">Day 22 - Wed, November 5, 2025</a>
<ul>
<li><a href="#org8976155">Day 22 Introduction</a></li>
<li><a href="#orga37f8fd">Arrays with Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org084342d">Redirection&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org181358e">Array Input Revisited&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org71e9581">Header Files and C Files&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org2c78e9f"><span class="cmd">.h</span> and <span class="cmd">.c</span> Example&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orga7f92b4">Day 22 Summary</a></li>
</ul>
</li>
<li><a href="#org449e21e">Day 23 - Mon, November 10, 2025</a>
<ul>
<li><a href="#org5616e01">Day 23 Introduction</a></li>
<li><a href="#orge134023">Get a Character: <span class="cmd">getchar</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org75f6aeb">Reading a Line of Input&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org524e6bc">String Formatting&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9be98bb">String Conversions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf65bcd2">Example Program</a></li>
<li><a href="#org99e62cb">Day 23 Summary</a></li>
</ul>
</li>
<li><a href="#org14a19ba">Day 24 - Wed, November 12, 2025</a>
<ul>
<li><a href="#orgac4eca8">Day 24 Introduction</a></li>
<li><a href="#org65452ed">Opening a File&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9a5881d">Closing a File&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org6f270e1">Reading From a File&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf27af41">Writing to a File&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9adcbf5">Example</a></li>
<li><a href="#org4348800">Moving File Position: <span class="cmd">lseek</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgd2d6ffc">Deleting a File : <span class="cmd">unlink()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orgf5366b0">Change File Permissions: <span class="cmd">fchmod()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9532b5a">Day 24 Summary</a></li>
</ul>
</li>
<li><a href="#org3104254">Day 25 - Mon, November 17, 2025</a>
<ul>
<li><a href="#org0b3c159">Day 25 Introduction</a></li>
<li><a href="#org4223304">Pointers&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org5bdde30">Functions with Pointers&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org44ae012">Returning Pointers from Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9ae2035">Pointers to Strings&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#orge894c42">Pointers to <span class="cmd">struct</span>s&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></a></li>
<li><a href="#org9cf9ca7">Day 25 Summary</a></li>
</ul>
</li>
<li><a href="#org5223884">Day 26 - Wed, November 19, 2025</a>
<ul>
<li><a href="#org2422e34">Day 26 Introduction</a></li>
<li><a href="#org9599a01">Linked Lists - A Preview&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orgd9360cf">Linked List Example - Part 1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orgffef4f9">Linked List Example - Part 2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orgfbe5baa">Linked List Example - Part 3&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org3ceb8c9">Day 26 Summary</a></li>
</ul>
</li>
<li><a href="#org07f8f8f">Day 27 - Mon, November 24, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></a>
<ul>
<li><a href="#org78ef11a">Day 27 Introduction</a></li>
<li><a href="#orga393869">Quiz #3&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span></span></a></li>
<li><a href="#org39ca58c">Day 27 Summary</a></li>
</ul>
</li>
<li><a href="#org1390f48">Day 28 - Wed, November 26, 2025</a>
<ul>
<li><a href="#orgfd00e54">Day 28 Introduction</a></li>
<li><a href="#org3713446">Linked List Example - Part 4</a></li>
<li><a href="#org06be3f9">Linked List Example - Part 5</a></li>
<li><a href="#org3ca38f1">Day 28 Summary</a></li>
</ul>
</li>
<li><a href="#org3e1f384">Day 29 - Mon, December 1, 2025</a>
<ul>
<li><a href="#orgb2a6e2b">Day 29 Introduction</a></li>
<li><a href="#org392e32f">Computer Network Jargon&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org05f136b">IP Addresses&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org8573e01">Ports&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org767dbbc">Gateways&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org1283af0">Servers&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org8175bab">Clients&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org560221f">Protocols&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org2f569ad">Clear Text vs Encryption&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org6e2e37b">Firewalls&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orgac6177a">Network Address Translation&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orgd3bacbb">Day 29 Summary</a></li>
</ul>
</li>
<li><a href="#orgc345195">Day 30 - Wed, December 3, 2025</a>
<ul>
<li><a href="#org19d1aff">Day 30 Introduction</a></li>
<li><a href="#orgad855d4">C Sockets&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org14a59b7">C Provided Data Structures&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org215a1ad">C Provided Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org1ac1579">Demo Client Description&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org8bc5986">Support Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org03d1d6c">Important Function #1: char* build_request( char * hostname, char *resource )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#orga08287e">Important Function #2: int create_connection( char *hostname )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org4018320">Important Function #3: int save_request( int connection, char *resource, char *filename, char *hostname )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></a></li>
<li><a href="#org72586a9">Demo</a></li>
<li><a href="#org6bce21d">Day 30 Summary</a></li>
</ul>
</li>
<li><a href="#org64b68e5">Day 31 - Mon, December 8, 2025&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Final">Final</span></span></a>
<ul>
<li><a href="#org4b59422">Day 31 Introduction</a></li>
<li><a href="#org1d31da0">Day 31 Summary</a></li>
</ul>
</li>
<li><a href="#org84e09d3">Day 32 - Wed, December 10, 2025</a>
<ul>
<li><a href="#org6e78e87">Day 32 Introduction</a></li>
<li><a href="#orge146315">Day 32 Summary</a></li>
</ul>
</li>
<li><a href="#org814c19c">Practice Exercises</a>
<ul>
<li><a href="#org6e9b3e1">Requirements for Practice Exercises </a></li>
<li><a href="#orgfc7e0df">Practice Exercises for <span class="cmd">Basic Commands</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org8e48153">Practice Exercises for <span class="cmd">ls</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#orgca01d6b">Practice Exercises for <span class="cmd">touch</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org04ea6b4">Practice Exercises for <span class="cmd">cat</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org8e44f83">Practice Exercises for <span class="cmd">less</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org757f797">Practice Exercises for <span class="cmd">man</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org776a0b0">Practice Exercises for <span class="cmd">File Globbing</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org0ef5381">Practice Exercises for <span class="cmd">tmux</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org3003226">Practice Exercises for <span class="cmd">mkdir</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org86475c5">Practice Exercises for <span class="cmd">Editing a File</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org99539c0">Practice Exercises for <span class="cmd">wc</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org5b3e68b">Practice Exercises for <span class="cmd">grep</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org8b0fbe7">Practice Exercises for <span class="cmd">head/tail</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#orgee7b774">Challenge Exercise: <span class="cmd">Country City Count</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org63f2a85">Practice Exercises for <span class="cmd">stat</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org232e7c7">Practice Exercises for <span class="cmd">mktemp</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org9000539">Practice Exercises for <span class="cmd">bashif</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org278bca0">Practice Exercises for <span class="cmd">bashfor</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org8a35596">Practice Exercises for <span class="cmd">bashwhile</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org652ecdc">Practice Exercises for <span class="cmd">find</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#orgd6a8d86">Practice Exercises for <span class="cmd">sleep</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#org5d8e3d9">Practice Exercises for <span class="cmd">procs</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
<li><a href="#orga87dd06">Challenge Exercise: <span class="cmd">World City Report</span> &#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></a></li>
</ul>
</li>
<li><a href="#orgd5b63ea">Excluded Material</a>
<ul>
<li><a href="#orgca9bdc7">Startup Files&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org337740b">Aliases&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org5198c73">Bash Prompt&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgcd7a693"><span class="cmd">wget</span> - Web Get&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgc4ed69e">Secure Web Resources&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org028e31d">Not Just HTML&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgea536b3">Specify Output File - <span class="cmd">-O</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org7b77f53">Reverse Lines - <span class="cmd">rev</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgc06dbec"><span class="cmd">make</span> Command&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org51c64ec">Makefiles&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orge5fe1ee">Practical Example of a Makefile&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org9b6725f">Base Name - <span class="cmd">basename</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org9ed907e">Dir Name - <span class="cmd">dirname</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org683dc6a"><span class="cmd">basename</span>/<span class="cmd">dirname</span>: No STDIN&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org23d297a">File Statistics - <span class="cmd">stat</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgb7c403c">Alternative Process Tree Viewer: <span class="cmd">pstree</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#org5762b2f"><span class="cmd">mktemp</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgb370365">'ncat' Simple Tool to Transfer Data over Network&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgd165ef4">Wireshark Demo&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
<li><a href="#orgf3d57ae">Reading a Line from a Stream&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></a></li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-org6ad59e9" class="outline-2">
<h2 id="org6ad59e9"></h2>
<div class="outline-text-2" id="text-org6ad59e9">
<p>
Day Direct: <a href="#orgf6277c7">Aug 25</a>, <a href="#orga4cb29e">27</a> &#x2014; <a href="#orgf56aeeb">Sep 1</a>, <a href="#org02cd9b8">3</a>, <a href="#org132923d">8</a>, <a href="#orga38859d">10</a>, <a href="#org198e677">15</a>, <a href="#org1356823">17</a>, <a href="#org3c0c81a">22</a>, <a href="#org24a1080">24</a>, <a href="#org5a57986">29</a> &#x2014; <a href="#orgcad698e">Oct 1</a>, <a href="#org63c8399">6</a>, <a href="#org5bd0a9c">8</a>, <a href="#org05e67ac">13</a>, <a href="#org026f7ea">15</a>, <a href="#org605e593">20</a>, <a href="#org5084c12">22</a>, <a href="#org4bcb8e0">27</a>, <a href="#orge56cb57">29</a> &#x2014; <a href="#org16f0b37">Nov 3</a>, <a href="#orgf2bcf08">5</a>, <a href="#org459b0d0">10</a>, <a href="#org16bf61c">12</a>, <a href="#org5fa42e2">17</a>, <a href="#orged8a6ae">19</a>, <a href="#orgdc277be">24</a>, <a href="#orge3d6b5a">26</a> &#x2014; <a href="#orgc83d710">Dec 1</a>, <a href="#orgbc0679a">3</a>, <a href="#org4afd331">8</a>, <a href="#orga5b7e89">10</a>
</p>

<p>
<span style="color:#ff0000; background-color:#;"><b>Disclaimer</b></span>: This course plan is subject to change at the instructor's
discretion. It is suggested you monitor the <i>Last Updated</i> date
and time.
</p>


<div id="org3cf05c5" class="figure">
<p><img src="support_files/calendar.png" alt="calendar.png" />
</p>
</div>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-09-01 19:02:43"</font></td></tr></table>
</div>
</div>
<div id="outline-container-org4447b04" class="outline-2">
<h2 id="org4447b04">Day 1 - Mon, August 25, 2025<a id="orgf6277c7"></a></h2>
<div class="outline-text-2" id="text-org4447b04">
</div>
<div id="outline-container-org43e8b3a" class="outline-3">
<h3 id="org43e8b3a">Day 1 Introduction<a id="org0082916"></a></h3>
<div class="outline-text-3" id="text-org43e8b3a">
</div>
<div id="outline-container-orgb8e0ba9" class="outline-4">
<h4 id="orgb8e0ba9">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgb8e0ba9">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgd15e682" class="outline-3">
<h3 id="orgd15e682">CS 2600.03 Fall 2025 Syllabus <a id="org12875eb"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Syllabus">Syllabus</span></span></h3>
<div class="outline-text-3" id="text-orgd15e682">
</div>
<div id="outline-container-org877e351" class="outline-4">
<h4 id="org877e351">Instructor Information</h4>
<div class="outline-text-4" id="text-org877e351">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="none" class="mytable">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Office:</td>
<td class="org-left">Remote via Zoom</td>
</tr>

<tr>
<td class="org-left">Hours:</td>
<td class="org-left">TTh 8:30 - 9:30pm via Zoom: <a href="https://cpp.zoom.us/j/6408675309" target="_blank">640 867 5309</a> / C64&gt;ZXsp!</td>
</tr>

<tr>
<td class="org-left">Email:</td>
<td class="org-left">dagershman@cpp.edu</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org4e144c8" class="outline-4">
<h4 id="org4e144c8">Description:</h4>
<div class="outline-text-4" id="text-org4e144c8">
<p>
This course is designed to provide a substantial exposure to the C
programming language and the Unix programming environment for
students with some basic prior programming knowledge.  Basic
commands (for file management, communication, process control) and
some advanced utilities in UNIX. Students will also learn regular
expressions and will be able to write programs (scripting) in
various shells. Unix system level calls and concurrent and socket
programming concepts will be covered. 
</p>

<p>
Pre-requisite(s): CS1280 or CS1400 with grades of C or better, or
consent of instructor.
</p>

<p>
Class will be held on-line via Zoom.  See Canvas for Zoom links.
</p>
</div>
</div>

<div id="outline-container-orgf41436e" class="outline-4">
<h4 id="orgf41436e">Distribution (subject to change this weekend):</h4>
<div class="outline-text-4" id="text-orgf41436e">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="none" class="mytable">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Quizzes (3)</td>
<td class="org-left">: 12%</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Midterms (3)</td>
<td class="org-left">: 48%</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Final</td>
<td class="org-left">: 40%</td>
<td class="org-left">Exam is cumulative.</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org8c8b71e" class="outline-4">
<h4 id="org8c8b71e">Grading:</h4>
<div class="outline-text-4" id="text-org8c8b71e">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="none" class="mytable">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">90 - 100.00</td>
<td class="org-left">&#x2026;..</td>
<td class="org-left">A</td>
</tr>

<tr>
<td class="org-left">80 - 89.999</td>
<td class="org-left">&#x2026;..</td>
<td class="org-left">B</td>
</tr>

<tr>
<td class="org-left">70 - 79.999</td>
<td class="org-left">&#x2026;..</td>
<td class="org-left">C</td>
</tr>

<tr>
<td class="org-left">60 - 69.999</td>
<td class="org-left">&#x2026;..</td>
<td class="org-left">D</td>
</tr>

<tr>
<td class="org-left">- 59.999</td>
<td class="org-left">&#x2026;..</td>
<td class="org-left">F</td>
</tr>
</tbody>
</table>

<p>
( +/- are awarded based on Canvas' grading methodology. )
</p>
</div>
</div>

<div id="outline-container-org11ec603" class="outline-4">
<h4 id="org11ec603">Dates:</h4>
<div class="outline-text-4" id="text-org11ec603">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="none" class="mytable">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Holiday(s):</td>
<td class="org-left"><a href="https://www.cpp.edu/academicplanning/academic-calendar/documents/2024-25_academic_calendar-final.pdf">Tuesday, April 1, 2025 and Thursday, April 3, 2024 - Spring Break</a></td>
</tr>

<tr>
<td class="org-left">Final:</td>
<td class="org-left">Monday, Dec 8, 2025 @ 7:00pm - 8:50pm via Finals Schedule found <a href="https://www.cpp.edu/~studentsuccess/academic-calendar/finals-week.shtml">here</a></td>
</tr>
</tbody>
</table>

<p>
<b>For dates of quizzes and midterms, see first page's calendar.</b>
</p>
</div>
</div>

<div id="outline-container-org376503e" class="outline-4">
<h4 id="org376503e">Email</h4>
<div class="outline-text-4" id="text-org376503e">
<p>
All email sent to me shall use my CPP address.  Likewise, any email originated <b>by</b>
me to a student will be addressed to <i>their</i> CPP email
address (<i>bronconame</i>@cpp.edu).  However, it is
not uncommon for students to 
have "personal" email accounts.  So if you initiate an email to me
from your personal email address, I will usually just "reply" thus
responding to the personal address.  You 
are to ensure you monitor the appropriate email address for the
correspondence.  (Please <b><i>do not</i></b> use Canvas's Inbox as I <b><i>do
not</i></b> monitor/check it.) 
</p>
</div>
</div>

<div id="outline-container-org1340752" class="outline-4">
<h4 id="org1340752">Announcements</h4>
<div class="outline-text-4" id="text-org1340752">
<p>
Announcements will be made via <b>email</b> to the students' CPP
addresses.  While Canvas has an announcement tool, I do not use
it nor even make it available.  It is the responsibility of the student to
monitor their CPP email for this reason.
</p>
</div>
</div>

<div id="outline-container-org8a62652" class="outline-4">
<h4 id="org8a62652">Course Book and Notes</h4>
<div class="outline-text-4" id="text-org8a62652">
<p>
Material will be presented via notes provided online,
alternative sources, and/or lectures.  The student is responsible
for all provided information.
</p>

<p>
These online notes are developed by me, primarily for lecture use,
quiz/exam prep, etc.  It is expected for the student to have read
the day's lecture notes prior to the day of lecture.  However,
<b><i><span class="underline">they are not to be considered a replacement for a student's own
notetaking or additional reading/research.</span></i></b> 
</p>
</div>
</div>

<div id="outline-container-org93a65e7" class="outline-4">
<h4 id="org93a65e7">Lectures</h4>
<div class="outline-text-4" id="text-org93a65e7">
<p>
Lectures will be presented via Zoom usually synchronous.
However there may be exceptions when class lecture is cancelled
and/or replaced with a pre-recorded lecture.
During Zoom lectures you <i>do not</i> have to have your camera on, and
in fact, I discourage it to save bandwidth.  Likewise, my
camera will be turned off.
</p>

<p>
Zoom lectures will be recorded and the Zoom chat feature utilized.
Students are encouraged to ask questions either verbally or 
via the chat.  The recorded lectures and the entire chat
transcript, complete with answers to the questions asked in chat,
will be provided in the <i>Daily Summary</i> slide of that 
day's notes within a few days after the lecture.
</p>
</div>
</div>

<div id="outline-container-org78ff6f6" class="outline-4">
<h4 id="org78ff6f6">Exams <i>(including Quizzes)</i></h4>
<div class="outline-text-4" id="text-org78ff6f6">
<p>
Prior to all exams, you will be provided a list of potential
material for a particular exam (via <i>tags</i> within the
notes).  However, just because a topic is not explicitly listed as
potential material, it may still be included as part of a question
for a topic which <b>is</b> potential material (i.e. concepts build on
previous concepts).
</p>

<p>
Exams will be administered via Canvas.  You will have a
predetermined amount of time to complete the exam.  Each exam will
be presented one question at a time.  Once you advance to the next
question you will not be able to return to previous questions.  If
your network connection is lost, you <i>should be</i> able to re-enter
the exam to continue as long as there is still time left.  The
clock does not stop if you leave or lose network connectivity.
</p>

<p>
If you are unable to attend an exam, at least 2 days advanced
notice must be given (possibly with proof of reason) and
arrangements made with the instructor at least 1 day prior to said
exam. <i><b>Exception</b></i>: There will be <b>one</b> "make-up" quiz available
on the day of the final.  This make-up quiz will replace any
single quiz <i>you did not take</i>.  It will not replace a low score,
only one <i>missed</i> quiz.  The potential material for this make-up
quiz will be the same as the final.
</p>

<p>
<b><i>All exams (and quizzes) are closed book, closed notes, no Internet resources, and no collaboration with others unless other arrangments were made with the instructor.</i></b>
</p>
</div>
</div>

<div id="outline-container-org7e29c99" class="outline-4">
<h4 id="org7e29c99">Course Content</h4>
<div class="outline-text-4" id="text-org7e29c99">
<p>
Sadly, I've seen students get more and more plagaristic over the
years.  While I thought it was mainly in the computer disciplines
where students were more computer savvy, it has become pervasive
in higher education.  
</p>

<p>
I do not condone nor do I give consent for any of my
class content (notes, exams, examples, videos, etc.) to be
published or provided to any external destinations without prior
written authorization from me. 
</p>

<p>
I work very hard to generate notes which are clear, concise,
and constantly getting improved upon, often with input from
students.  I'm not interested in regurgitating what you can find
on Stack Overflow nor am I interested in conducting a video game where a player
gathers points by any means necessary just to level up.
</p>

<p>
I use Unix every day and have for years both personally and in
industry.  The money you paid to take this class has become less about
the information and more about learning from someone with the
experience on how to use it.
</p>

<p>
If you <i>want</i> to learn, I'll do what I can to help.
</p>
</div>
</div>

<div id="outline-container-orgceeba41" class="outline-4">
<h4 id="orgceeba41">Academic Integrity</h4>
<div class="outline-text-4" id="text-orgceeba41">
<p>
Students are reminded of the university policy with regard to
<a href="https://www.cpp.edu/studentconduct/academic-integrity/academic-integrity.shtml">Academic Integrity</a> and the <a href="https://www.cpp.edu/studentconduct/student-conduct-code.shtml">Student Conduct Code</a>. 
</p>

<p>
Each student is responsible for understanding each assignment,
program, or examination (APE), then completing and handing in
their own work. Any explicitly allowed group activities will be
clearly identified as such.
</p>

<p>
Any APE that is not the student's own work, violates the rules
for said APE, or violates any additional rules provided with the
APE will receive a score of 0 for their work, 0 for the APE,
and/or a failing grade in the course depending on the severity
and frequency of the offense(s). Additionally, instructors have a
responsibililty to report such offenses to the <a href="https://www.cpp.edu/studentconduct/">Office of Student
Conduct</a>.
</p>

<p>
In short, cheating makes your grade and CS degree pointless.
Enough students are doing it now to the point CPP's reputation is
being adversely affected.  Industry will look upon you (due to your
degree) accordingly.  Don't give them reason to doubt you!
</p>
</div>
</div>

<div id="outline-container-org23afa7b" class="outline-4">
<h4 id="org23afa7b">Disclaimer</h4>
<div class="outline-text-4" id="text-org23afa7b">
<p>
This syllabus may change at the discretion of the instructor
but students will be notified by email as soon as possible, if not
ahead of time. 
</p>
</div>
</div>
</div>
<div id="outline-container-org87eb20a" class="outline-3">
<h3 id="org87eb20a">Logistics</h3>
<div class="outline-text-3" id="text-org87eb20a">
</div>
<div id="outline-container-org707e75d" class="outline-4">
<h4 id="org707e75d">What to Call Me?</h4>
<div class="outline-text-4" id="text-org707e75d">
<p>
Professor, Mr, just my last name&#x2026;whatever
you're comfortable with and feel is respectful. (Please refrain
from "Dr." as I unfortunately do not have a PhD.) 
</p>
</div>
</div>

<div id="outline-container-orgd9a1869" class="outline-4">
<h4 id="orgd9a1869">Needing to Miss a Class</h4>
<div class="outline-text-4" id="text-orgd9a1869">
<p>
If it's a normal lecture day, do not feel the need to let me
know. If you do, I thank you but don't feel it necessary. However,
for days with Quizzes or Exams, please refer to the <a href="#org12875eb">Syllabus</a> for
guidance. 
</p>
</div>
</div>

<div id="outline-container-orgfc285fd" class="outline-4">
<h4 id="orgfc285fd">Course Notes and Other Information</h4>
<div class="outline-text-4" id="text-orgfc285fd">
<p>
Course notes and other course information is available on our main
Canvas page.  When the main page is updated, I will tell Canvas to
notify students.  However, you need to configure your Canvas
account to receive those notifications.  To do so, log into
Canvas and then:
</p>

<ol class="org-ol">
<li>Click <i>Account</i> on your Navigation Bar (on the left).</li>
<li>Click 'Notifications'</li>
<li>In the "Settings for" dropdown, select the appropriate course.</li>
<li>In the list below, find "Course Content" and change the icon on
the right to <i>Notify immediately</i>.</li>
</ol>

<p>
Be aware course notes are often updated so keep an eye on the
"Last Updated" date/time.  Since these notes are available online,
you'll always have access to the latest version.
</p>
</div>

<div id="outline-container-org6b944de" class="outline-5">
<h5 id="org6b944de">Notes Navigation</h5>
<div class="outline-text-5" id="text-org6b944de">
<p>
The notes utilize some Javascript for presentation-like
navigation.  Applicable Hot-Keys are:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">n</td>
<td class="org-left">Next slide</td>
</tr>

<tr>
<td class="org-left">p</td>
<td class="org-left">Previous Slide</td>
</tr>

<tr>
<td class="org-left">N</td>
<td class="org-left">Next Day (must be on "Day" slide)</td>
</tr>

<tr>
<td class="org-left">P</td>
<td class="org-left">Previous Day (must be on "Day" slide)</td>
</tr>

<tr>
<td class="org-left">i</td>
<td class="org-left">Table of Contents (index of slides)</td>
</tr>

<tr>
<td class="org-left">t</td>
<td class="org-left">Top of Notes</td>
</tr>

<tr>
<td class="org-left">e</td>
<td class="org-left">End of Notes</td>
</tr>

<tr>
<td class="org-left">b</td>
<td class="org-left">Go (b)ack to where you were</td>
</tr>

<tr>
<td class="org-left">C</td>
<td class="org-left">List of tags (see next section)</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org77eb942" class="outline-5">
<h5 id="org77eb942">Tags</h5>
<div class="outline-text-5" id="text-org77eb942">
<p>
Tags are a great way to see exactly what "slides" are relevant to
exams and such.
</p>

<p>
Using the capital 'C' hot-key, you'll get a list of tags shown
alphabeticaly.  Click on one and it will open a list of slides
all marked with that tag. 
</p>

<p>
For example, after hitting 'C', you'll see a tag called "Q1".
Click on it and you'll see all the potential material covered for
Quiz #1.
</p>

<p>
Click on "Midterm" and you'll see all slides (2) for when our
Midterms will be.
</p>

<p>
The following are the list of tags I'm intending to use: 
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Tag</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Cancelled</td>
<td class="org-left">Classes which were cancelled</td>
</tr>

<tr>
<td class="org-left">F</td>
<td class="org-left">Potential material for the final exam</td>
</tr>

<tr>
<td class="org-left">Final</td>
<td class="org-left">Day(s) of the final exam</td>
</tr>

<tr>
<td class="org-left">Holiday</td>
<td class="org-left">Holiday(s) with no class (if applicable)</td>
</tr>

<tr>
<td class="org-left">M1</td>
<td class="org-left">Potential material for Midterm #1</td>
</tr>

<tr>
<td class="org-left">M2</td>
<td class="org-left">Potential material for Midterm #2</td>
</tr>

<tr>
<td class="org-left">Midterm</td>
<td class="org-left">Day(s) of the Midterms</td>
</tr>

<tr>
<td class="org-left">Q<i>n</i></td>
<td class="org-left">Potential material for Quiz #<i>n</i></td>
</tr>

<tr>
<td class="org-left">Quiz</td>
<td class="org-left">Day(s) of the Quizzes</td>
</tr>

<tr>
<td class="org-left">SpringBreak</td>
<td class="org-left">Days of Spring Break (if applicable)</td>
</tr>
</tbody>
</table>

<p>
Additional tags may be created as we go.
</p>

<p>
NOTE: These tags are also listed on the individual slides they
pertain to.  For example, the slide discussing <span class="cmd">ls</span> has
the tags "Q1 M1 M2 F" (as applicable for the term):
</p>

<p>
<img src="support_files/sample_tags.png" width="" height="" align=middle style="width:15%;border:solid black 2px;margin-left:50px;">
</p>

<p>
meaning the <span class="cmd">ls</span> command is potential
material for Quiz #1, Midterm #1, Midterm #2, and the Final.
</p>
</div>
</div>
</div>

<div id="outline-container-org44ed4de" class="outline-4">
<h4 id="org44ed4de">Zoom Meeting IDs and Passcodes</h4>
<div class="outline-text-4" id="text-org44ed4de">
<p>
Every class meeting should have the same Zoom meeting ID but <i>may</i>
vary in passcode.  This information can be found on the first slide -
titled "Day XX Introduction" - of each day's slides within these
notes.  Please note, all Zoom meetings require you to log in using
your Bronco credentials. i.e. only @cpp.edu users are allowed.
</p>

<p>
<i>Exception</i>: My office hours will be held using the Zoom
information provided in the <a href="#org12875eb">syllabus</a>.  Bronco credentials are
still required for office hours.
</p>
</div>
</div>

<div id="outline-container-orgcb47d08" class="outline-4">
<h4 id="orgcb47d08">Zoom Lecture Recordings</h4>
<div class="outline-text-4" id="text-orgcb47d08">
<p>
Recorded Zoom lectures and any other lecture recordings will be
linked within the notes (usually on the 'Day XX Summary' slide).
The videos themselves will reside within CPP's streaming video
service.  I often teach the same class twice in a row so I provide
links to <i>both</i> classes' videos so you won't miss anything
(different analogies, tangent topics, etc.).  However, there shouldn't
be anything major differences between the two videos <i>forcing</i> you to view
both&#x2026;it's just an option for you.
</p>

<p>
Class lectures are recorded locally on my computer and require
conversion (Zoom's fault, not mine).  This conversion is done on an
older (slower) computer and thus may take a few days to
be posted (especially if editing is required).  Class notes will
be updated with the link when the video is available.  A Canvas
notification will be sent out as well if you've configured your
Canvas to receive them. 
</p>
</div>
</div>

<div id="outline-container-org0606f28" class="outline-4">
<h4 id="org0606f28">Zoom Audio</h4>
<div class="outline-text-4" id="text-org0606f28">
<p>
During our class sessions, I respectfully request you keep
yourself muted unless you have a question or response.  Remember
we are all somewhere other than in a classroom and ambient noises
can be distracting.
</p>

<p>
One exception to this request, is me (duh). So I apologize in
advance for any ambient noises such as kids yelling, dogs barking,
air conditioning blowing, or the occasional kid-friendly profanity
when I jam my knee into the desk. 
</p>
</div>
</div>

<div id="outline-container-org4fb9aef" class="outline-4">
<h4 id="org4fb9aef">Zoom Video</h4>
<div class="outline-text-4" id="text-org4fb9aef">
<p>
During our class sessions, I do <i>not</i> require you to have your video
on in order to save bandwidth and reduce CPU usage.  Likewise, for
the same reasons I do not have video on either - only screen sharing.
</p>

<p>
If you would like video activated during an office hour visit,
please let me know ahead of time so I can make accomodations. 
</p>
</div>
</div>

<div id="outline-container-org33fea64" class="outline-4">
<h4 id="org33fea64">Zoom Backgrounds</h4>
<div class="outline-text-4" id="text-org33fea64">
<p>
If you do choose to have your video on, whatever background you
choose - virtual or not, please remember to ensure it is not
offensive.  Any background found to be offensive will result in
the student's video being turned off.  As I will be sharing my
screen (and unable to see students), any student who observes an
offensive background may send me a private message within the Zoom
chat so I can take action accordingly. 
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated : "2025-08-24 18:54:44"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org327d428" class="outline-3">
<h3 id="org327d428">Working Environment<a id="org8d149d7"></a></h3>
<div class="outline-text-3" id="text-org327d428">
<p>
To practice/explore what we learn in class, you need a Unix system.
Cal Poly provides such a system via secure shell ('ssh' and 'scp' commands)
at <i>login.cpp.edu</i>.  We will be using this for our class
demonstrations and any code requested on quizzes/exams are expected
to function on this system.
</p>

<p>
If you have access to a different Unix system, you may use it for
the practice sets but know any solution requested on quizzes or
exams should be that of material presented in class and known to
work on the Cal Poly system (our common environment).
</p>
</div>

<div id="outline-container-org6dff240" class="outline-4">
<h4 id="org6dff240">Cal Poly's Virtual Private Network</h4>
<div class="outline-text-4" id="text-org6dff240">
<p>
Unfortunately, CPP's Unix system is only accessible from their <i>internal</i> network,
available either on campus or via connecting to their VPN if off campus.  CPP
provides a VPN client and can be downloaded and installed per the
instructions at <a href="https://cpp.service-now.com/ehelp?id=kb_article&amp;sys_id=c40f854e6fe8e600e020f35d5d3ee4d5">this URL</a>.
</p>

<p>
While the URL provides a Windows and MacOS client, CPP has made it
clear to me they do not support Linux (yes, I get the irony).
</p>

<p>
If you primarily use a Linux system and would like to connect off
campus via the VPN, I've successfully done this in Debian 11
and 12 (as you'll see in class).  So email me and I can tell you
which packages are needed and you can attempt the same approach
using your distro of choice&#x2026;YMMV though.
</p>
</div>
</div>

<div id="outline-container-orgf2324bd" class="outline-4">
<h4 id="orgf2324bd">Alternative Unix Systems</h4>
<div class="outline-text-4" id="text-orgf2324bd">
<p>
If you have access to an alternative Unix system, you may use it
but again, know solutions to quizzes and exams are expected to
work on the CPP Unix system. Any solutions isolated to your system
won't be accepted.  (Explanation of why below&#x2026;) 
</p>
</div>

<div id="outline-container-orga1681f2" class="outline-5">
<h5 id="orga1681f2">Windows Subsystem for Linux</h5>
<div class="outline-text-5" id="text-orga1681f2">
<p>
I have no experience with this and I loathe M$ and Windows.  From
students, I have learned and come across differences between CPP
Unix and the WSL such that code working on WSL did not work the
same way on CPP.  Consider yourself warned.
</p>
</div>
</div>

<div id="outline-container-orgf3b5b69" class="outline-5">
<h5 id="orgf3b5b69">MacOS</h5>
<div class="outline-text-5" id="text-orgf3b5b69">
<p>
MacOS is run on a Unix variant and while much of what we cover in
this class can be done on MacOS's terminal, you'll find many
commands missing and have difficulty without knowledge or use of
Bash/Zsh and Homebrew.  I recommend using the VPN client if you
have MacOS and are not experienced already in MacOS Unix.
</p>
</div>
</div>
</div>

<div id="outline-container-orgcfd9c68" class="outline-4">
<h4 id="orgcfd9c68">Unix, not Linux</h4>
<div class="outline-text-4" id="text-orgcfd9c68">
<p>
As mentioned above, in this course, while we use Linux as the
vehicle for learning, I work very hard to teach you concepts
usable in <b>Unix</b>.  As such, you may come across solutions which
work on <i>your</i> host system but I do not accept on quizzes/exams.  This is
because I want the student to walk away with skills applicable to
virtually any Unix: Linux, Solaris, AIX, HPUX, etc.  It is very
important you do not ignore the covered material in favor of an Ubuntu
Linux, Bash vX.X.X command not covered in class.
</p>

<p>
Nevertheless, much of what we learn <i>is</i> for the <i>Bash</i> shell,
currently the default for Linux distributions and available on
other *nixes.  There are several other shells which could be used
(sh, csh, tcsh, ksh, zsh, dash, etc.) so I will try and indicate
similarities and differences as we go.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-01-22 18:00:03"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org6946fbd" class="outline-3">
<h3 id="org6946fbd">Cal Poly's Unix System<a id="orgbdf99a9"></a></h3>
<div class="outline-text-3" id="text-org6946fbd">
</div>
<div id="outline-container-orgb76316c" class="outline-4">
<h4 id="orgb76316c">Connect to CPP VPN</h4>
<div class="outline-text-4" id="text-orgb76316c">
<p>
First, be sure you are either on campus, or connected to the
internal network via the <a href="https://cpp.service-now.com/ehelp?id=kb_article&amp;sys_id=c40f854e6fe8e600e020f35d5d3ee4d5">VPN client software</a>.
</p>
</div>
</div>

<div id="outline-container-org95a4a5e" class="outline-4">
<h4 id="org95a4a5e">Open a Command Prompt / Terminal</h4>
<div class="outline-text-4" id="text-org95a4a5e">
<p>
In this class, we don't use GUI tools&#x2026;it's all about the command
line and text environments.
</p>

<p>
<b>For Linux</b>: Which terminal program you use highly depends on your
desktop environment.  Chances are if you're using Linux, you
already know how to get a terminal.  Nevertheless, if you go to
your main Applications menu, 
you should see an option for <i>Terminal</i>, <i>Terminal Emulator</i>, or
other such name.  You might also find it in a "System" or "Utility"
menu. Ask me if you can't find it.
</p>

<p>
<b>For Windows</b>: Tap your Windows key and the letter 'r' at the same
time, then type
"cmd" (without the quotes) and press &lt;ENTER&gt;.
</p>

<p>
<b>For MacOS</b>: Open your <i>Utilities</i> with <i>Command-Shift-u</i>, then
double click <i>Terminal</i>.
</p>

<p>
For all of these OSes, <i>ssh</i> and <i>scp</i> should already be
installed.  If you type <i>ssh</i> you should get some indication it
exists (rather than "file not found").  If not, come to office
hours so we can solve this.
</p>
</div>
</div>

<div id="outline-container-orgb78f17a" class="outline-4">
<h4 id="orgb78f17a">Logging Into CPP's Unix System</h4>
<div class="outline-text-4" id="text-orgb78f17a">
<p>
Below, the '$' is the common command prompt on a Unix system (Linux and
MacOS). For Windows, you'll get your normal "C:\&#x2026;.\&gt;" prompt.
</p>

<p>
To access CPP's Unix System, use the hostname <i>login.cpp.edu</i>
along with your BroncoName and BroncoPassword:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ ssh BRONCONAME@login.cpp.edu    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">BRONCONAME is *your* BroncoName</span>
</pre>
</div>

<p>
Once connected, you may be prompted to accept the SSH fingerprint:
</p>

<p>
<img src="support_files/fingerprint.png" width="" height="" align=middle style="width:50%;padding-left:20px;">
</p>

<p>
Go ahead and do so by typing 'yes' and pressing &lt;ENTER&gt;.
</p>

<p>
You will then be prompted for your Bronco Password (NOTE: you
will <b>not</b> see what you type&#x2026;this is normal and good security.
Just type your bronco password and hit ENTER):
</p>

<p>
<img src="support_files/login1.png" width="" height="" align=middle style="width:50%;padding-left:20px;">
</p>

<p>
<b>UPDATE</b>: With the new CPP Unix system, you'll also be prompted
for a <i>passcode</i>.  This is the 6-digit DUO 2FA value (via the app
or hardware token).
</p>

<p>
Once logged in, you'll be given a prompt which looks like this:
</p>

<div class="org-src-container">
<pre class="src src-perl">BRONCONAME@<span style="color: #eedd82; text-decoration: underline;">login</span>-02 ~ $ 
</pre>
</div>

<p>
NOTE: The tilde (~) is called your <i>home directory</i> or <i>default
directory</i>.  It is the location on the hard drive where you're put
when you first log in.
</p>
</div>
</div>

<div id="outline-container-org8f6754c" class="outline-4">
<h4 id="org8f6754c">'login-01' and 'login-02'</h4>
<div class="outline-text-4" id="text-org8f6754c">
<p>
CPP's Unix environment is made up of 2 servers (that I know of) named
<span class="fname">login-01</span> and <span class="fname">login-02</span>.  Which one you log
into is decided by CPP's infrastructure.
</p>

<p>
However, when on one of the servers, you can log into the other by
simply typing:
</p>

<div class="org-src-container">
<pre class="src src-perl">BRONCONAME@<span style="color: #eedd82; text-decoration: underline;">login</span>-01 ~ $ ssh login-02  <span style="color: #ff7f24;"># or 'login-01' if you're already on 'login-02'</span>
</pre>
</div>

<p>
<i>Why</i> you may want to do this will be discussed later.
</p>
</div>
</div>

<div id="outline-container-org345c045" class="outline-4">
<h4 id="org345c045">Exiting CPP's Unix System</h4>
<div class="outline-text-4" id="text-org345c045">
<p>
To exit the Unix system, type <span class="cmd">exit</span>:
</p>

<p>
If you logged into the second of the two servers (again, discussed
later), you'll need to type <span class="cmd">exit</span> a second time to exit
out of both servers.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:37:10"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgfae34bc" class="outline-3">
<h3 id="orgfae34bc">Day 1 Summary<a id="orgd5e15f2"></a></h3>
<div class="outline-text-3" id="text-orgfae34bc">
</div>
<div id="outline-container-org9ca5296" class="outline-4">
<h4 id="org9ca5296">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org9ca5296">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org867e7c8" class="outline-4">
<h4 id="org867e7c8">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org867e7c8">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org488dc10" class="outline-2">
<h2 id="org488dc10">Day 2 - Wed, August 27, 2025<a id="orga4cb29e"></a></h2>
<div class="outline-text-2" id="text-org488dc10">
</div>
<div id="outline-container-orgfd0674d" class="outline-3">
<h3 id="orgfd0674d">Day 2 Introduction<a id="org377eb55"></a></h3>
<div class="outline-text-3" id="text-orgfd0674d">
</div>
<div id="outline-container-org3cbe7e8" class="outline-4">
<h4 id="org3cbe7e8">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org3cbe7e8">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org21a4b17" class="outline-3">
<h3 id="org21a4b17">Introduction to Unix<a id="orge9f02b5"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org21a4b17">
</div>
<div id="outline-container-orga968075" class="outline-4">
<h4 id="orga968075">General History - A Synopsis</h4>
<div class="outline-text-4" id="text-orga968075">
</div>
<div id="outline-container-orgded3790" class="outline-5">
<h5 id="orgded3790">1970s</h5>
<div class="outline-text-5" id="text-orgded3790">
<ul class="org-ul">
<li><p>
Started on a <a href="support_files/pdp7.png">PDP-7</a> at Bell Labs; coded in assembly.
</p>

<p>
<img src="support_files/pdp7.png" width="160" height="100" style="margin-left:100px;">
</p></li>
<li>Rewritten in C making it <i>portable</i>!</li>
<li>Later morphed into BSD v1.0 <img src="support_files/bsd.png" width=20 height=20></li>
</ul>
</div>
</div>
<div id="outline-container-orge1ef1a3" class="outline-5">
<h5 id="orge1ef1a3">1980s</h5>
<div class="outline-text-5" id="text-orge1ef1a3">
<ul class="org-ul">
<li>M$ got into the game with Xenix</li>
<li>AT&amp;T got into the game with System III
<ul class="org-ul">
<li>later with System V which was officially supported</li>
</ul></li>
<li>Sun Microsystems gets into the game with SunOS</li>
<li>HP gets into the game with HP-UX</li>
<li>DEC gets into the game with Ultrix-11</li>
<li>IEEE publishes POSIX.1 (Portable Operating System Interface) to
deal with the variance.</li>
</ul>
</div>
</div>
<div id="outline-container-orgfd3905d" class="outline-5">
<h5 id="orgfd3905d">1990s</h5>
<div class="outline-text-5" id="text-orgfd3905d">
<ul class="org-ul">
<li>Sun Microsystems switches to Solaris</li>
<li>Linux 1.0 is released <img src="support_files/linux.png" height=20>
<ul class="org-ul">
<li>Later ported to DEC and Sun hardware</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org7132b9e" class="outline-5">
<h5 id="org7132b9e">2000s</h5>
<div class="outline-text-5" id="text-org7132b9e">
<ul class="org-ul">
<li>OpenSolaris is release to compete w/Linux and keep folks on Sun
hardware</li>
<li>MacOS X certified</li>
<li>Dell ships with Ubuntu</li>
</ul>
</div>
</div>
<div id="outline-container-orgfbf5d3b" class="outline-5">
<h5 id="orgfbf5d3b">2010s</h5>
<div class="outline-text-5" id="text-orgfbf5d3b">
<ul class="org-ul">
<li>Oracle buys Sun Microsystems(<i>&#x2026;the start of the end</i>)</li>
<li>M$ adds Linux subsystem to Win10 (<i>M$ users are confused;
Linux users cry, and someone gets elected.  Coincidence??</i>)</li>
<li>Oracle lays off ~2500 Solaris engineers - "killing
Solaris"</li>
<li>Linux server revenue exceeds all other Unixes</li>
</ul>
</div>
</div>
<div id="outline-container-orgcac53aa" class="outline-5">
<h5 id="orgcac53aa">2020s</h5>
<div class="outline-text-5" id="text-orgcac53aa">
<ul class="org-ul">
<li>M$ adds <i>Recall</i>; huge exodus is made to Linux</li>
<li>MacOS announces adding "AI"; small exodus is made to Linux</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgaf30ace" class="outline-4">
<h4 id="orgaf30ace">Linux Distributions</h4>
<div class="outline-text-4" id="text-orgaf30ace">
</div>
<div id="outline-container-org9d64169" class="outline-5">
<h5 id="org9d64169">Primary Distros</h5>
<div class="outline-text-5" id="text-org9d64169">
<ul class="org-ul">
<li>Debian</li>
<li>Red Hat</li>
<li>Slackware</li>
<li>Gentoo (formerly Enoch)</li>
<li>Linux From Scratch</li>
</ul>
</div>
</div>

<div id="outline-container-orgb8a3d82" class="outline-5">
<h5 id="orgb8a3d82">Derivatives</h5>
<div class="outline-text-5" id="text-orgb8a3d82">
<ul class="org-ul">
<li>Ubuntu (Debian)</li>
<li>KNoppix (Debian)</li>
<li>Clonezilla (Debian)</li>
<li>Fedora (Open Source version of Red Hat)</li>
<li>CentOS (RedHat)</li>
<li>YellowDog (RedHat)</li>
<li>SuSE (Jurix)</li>
<li>SystemRescueCD (Was Gentoo, now Arch)</li>
</ul>

<p>
For an eyesore: <a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg">Click Here</a>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org8ac291c" class="outline-3">
<h3 id="org8ac291c">Unix Interface<a id="org2051cf4"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8ac291c">
</div>
<div id="outline-container-orgb755ae6" class="outline-4">
<h4 id="orgb755ae6">Interaction with Unix</h4>
<div class="outline-text-4" id="text-orgb755ae6">
<p>
As you can tell, Unix has been around for a long time&#x2026;way before
the advent of a Graphical User Interface (GUI).  Because of this, Unix
is known for its <i>command line interface</i> (CLI).  On a CLI, you
don't point and click.  Instead, you type commands instructing the
computer what to do.
</p>

<p>
In this class, we'll be primarily working on the command line.
</p>
</div>
</div>

<div id="outline-container-orgbb00e8d" class="outline-4">
<h4 id="orgbb00e8d">The Terminal</h4>
<div class="outline-text-4" id="text-orgbb00e8d">
<p>
The <i>terminal</i> is the primary way users interact with a Unix
system.  Current Unix systems have Graphical User Interfaces (GUI)
but the <i>terminal</i> has been the "killer app" of Unix since day 1.
</p>

<p>
In fact, even other OSes have terminals.  When you open a command
prompt in Windows, that's a terminal.  When you open 'Terminal'
from Applicaions -&gt; Utilities on MacOS&#x2026;that's a terminal.  And
naturally on Linux, we too have a terminal:
</p>

<p>
<img src="support_files/terminal.png" width="" height="" align=middle style="width:25%;border:solid black 2px;margin-left:50px;">
</p>
</div>
</div>

<div id="outline-container-org6a27d83" class="outline-4">
<h4 id="org6a27d83">Shells</h4>
<div class="outline-text-4" id="text-org6a27d83">
<p>
The terminal provides a <span class="term">shell</span>, <span class="termdef">a command interface which uses words and symbols to communicate work for the computer to perform</span>.  Shells are basically just programs which take user
input, perform work (or pass the request to another program), and
display results.
</p>

<p>
Shells come in many forms:
</p>

<ul class="org-ul">
<li>sh : Bourne shell, the original shell</li>
<li>csh : C-shell - additional features for C programmers</li>
<li>tcsh : Tom's C-shell - Improved version of C-shell</li>
<li>bash : Bourne-Again shell - Linux default; Older MacOS default</li>
<li>zsh  : Z Shell (extension of Bash) - Newer MacOS default</li>
<li>cmd : Command Prompt - Windows default</li>
</ul>

<p>
and several others.  In this class, we focus on the <i>bash</i> shell.
</p>

<p>
While there are GUI tools which do similar work of <b>some</b> typed
commands, for this class we primarily work within the shell (sometimes
called the <span class="term">command shell</span>).
</p>
</div>
</div>
<div id="outline-container-org620f8be" class="outline-4">
<h4 id="org620f8be">Modern Reality</h4>
<div class="outline-text-4" id="text-org620f8be">
<p>
While we call it the <i>terminal</i>, in reality it is a <i>terminal</i>
<b><i>emulator</i></b>.
</p>

<p>
Way back when, <i>terminals</i> were just monitors and keyboards which
communicated with a server hidden in some back room:
</p>

<p>
<img src="support_files/dumbterminal.jpg" width="" height="" align=middle style="width:15%;border:solid black 2px;margin-left:50px;">
</p>

<p>
These were typically called <i>dumb terminals</i> because they had no
computing power short of just taking input, sending input to the
<i>mainframe</i>, receiving responses, and showing results.  The shell
you worked with was actually running on the mainframe.
</p>

<p>
Today, our keyboards and monitors are connected to a local system
and don't even do what <i>dumb terminals</i> did.  So modern OSes
provide a piece of software to <i>emulate</i> a terminal which runs a
shell, all on your local computer.
</p>
</div>
</div>

<div id="outline-container-orgfcf3845" class="outline-4">
<h4 id="orgfcf3845">The Prompt</h4>
<div class="outline-text-4" id="text-orgfcf3845">
<p>
When you first open a shell, you're presented with the <i>prompt</i>.
We will discuss this prompt shortly, but for now, just know the
default prompt ends in a dollar sign.  This means the shell
program is waiting for your input, i.e. your command.
</p>
</div>
</div>

<div id="outline-container-org1ae1742" class="outline-4">
<h4 id="org1ae1742">Commands and Command Lines</h4>
<div class="outline-text-4" id="text-org1ae1742">
<p>
Commands and command lines, on any operating system, are comprised
of two parts: 
</p>

<ul class="org-ul">
<li>The <span class="term">Command</span>: <span class="termdef">a shell keyword or program name</span>, and possibly</li>
<li>The <span class="term">command line parameters</span>: <span class="termdef">data passed to the command via the input line at execution</span>.</li>
</ul>

<p>
The command and its inputs, in total, are called the
<span class="term">command line</span>.
</p>

<p>
For example, here is a command (with no associated input and a
simplified prompt) which simply displays the current system date
and time: 
</p>

<pre class="example" id="orga17ef26">
$ date
Sat 23 Jan 2021 07:46:23 PM PST
$
</pre>

<p>
We typed a single word, the command <span class="cmd">date</span>, hit &lt;ENTER&gt;, then received our
output.
</p>
</div>
</div>
<div id="outline-container-orga94cdfa" class="outline-4">
<h4 id="orga94cdfa">Command Line Parameters</h4>
<div class="outline-text-4" id="text-orga94cdfa">
<p>
However, most commands take additional information at the same
time, on the same "command line".  For example:
</p>

<pre class="example" id="org3a9684c">
$ echo hello
hello
$
</pre>

<p>
'hello' is a command line parameter given to the <span class="cmd">echo</span>
command to work on.  Command line parameters can be all kinds of
things:
</p>

<p>
nothing&#x2026;
</p>
<pre class="example" id="org50dc36c">
$ echo

$
</pre>

<p>
words (called 'arguments')&#x2026;
</p>
<pre class="example" id="orgc203900">
$ echo hello
hello
$
</pre>

<p>
switches&#x2026;
</p>
<pre class="example" id="org1804773">
$ echo -n
$
</pre>

<p>
or a combination&#x2026;
</p>
<pre class="example" id="org755feea">
$ echo -n "Hello World"
Hello World$
</pre>

<p>
and often several of both&#x2026;
</p>
<pre class="example" id="orgc7f711c">
$ echo -n -e "Hello\nWorld\n"
Hello
World
$
</pre>

<p>
We'll be exploring various commands and command lines (switchs,
arguments, etc.) in this course.
</p>
</div>
</div>

<div id="outline-container-orga45ec26" class="outline-4">
<h4 id="orga45ec26">Exiting a Shell</h4>
<div class="outline-text-4" id="text-orga45ec26">
<p>
To exit a shell, simply type the command <span class="cmd">exit</span>.  If
you're not using a multiplexer (discussed shortly), exiting the
shell will close the terminal emulator window.
</p>

<p>
Note: Pressing the Control key and the 'd' key simultaneously may
also work.  However, this is "shell-specific" and does not work
with all shells (i.e. sh, csh, etc.).
</p>

<p>
<b>Important Note</b>: Unix is <i>case-sensitive</i>!
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated : "2024-02-11 10:51:19"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2ecdc3a" class="outline-3">
<h3 id="org2ecdc3a">Unix File System Architecture<a id="orgdc2725c"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2ecdc3a">
</div>
<div id="outline-container-org12ed3f6" class="outline-4">
<h4 id="org12ed3f6">File System Structure</h4>
<div class="outline-text-4" id="text-org12ed3f6">
<ul class="org-ul">
<li>Hierarchical</li>
<li>Made up of <i>directories</i> (i.e. "folders") containing:
<ul class="org-ul">
<li>files</li>
<li>more directories, called <span class="term">sub-directories</span></li>
</ul></li>
<li>The top-most directory is <span class="fname">/</span>
<ul class="org-ul">
<li>Also called the <span class="term">root directory</span></li>
</ul></li>
</ul>

<p>
Unlike "that other OS", there are no drive letters ("c:", "d:",
etc.).  Everything is accessible under <span class="fname">/</span> and there is
nothing "above" <span class="fname">/</span>:
</p>

<pre class="example" id="orgb3bc591">
/
└─ root
   ├── brcm
   └── bcm43xx-0.fw
       ├── bcm43xx_hdr-0.fw
       ├── brcmfmac43602-pcie.ap.bin
       └── brcmfmac43602-pcie.bin
    ├── Desktop
    ├── Documents
    ├── Downloads
    ├── Music
    ├── Pictures
    ├── Public
    ├── Templates
    └── Videos
</pre>

<ul class="org-ul">
<li>When you perform commands, you are "in" a directory located
somewhere within the hierarchy.
<ul class="org-ul">
<li>This is important when dealing with commands and files.</li>
</ul></li>
<li>A users' "HOME" directory is usually <span class="fname">/home/USERNAME</span>
<ul class="org-ul">
<li>Not universal
<ul class="org-ul">
<li>CPP Linux has "HOME" at <span class="fname">/user/USERNAME</span></li>
</ul></li>
<li>Commonly, your home directory can be abbreviated using a
tilde: <span class="fname">~</span></li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orge7515e1" class="outline-4">
<h4 id="orge7515e1">External Media</h4>
<div class="outline-text-4" id="text-orge7515e1">
<ul class="org-ul">
<li>All devices (HD, CD, DVD, USB, etc) are viewable within the existing
directory structure
<ul class="org-ul">
<li>via "mount points" (no letter drives!)</li>
<li>must be "mounted" to be visible</li>
</ul></li>
</ul>

<p>
Note: The following only works if you have a virtual CD in the
virtual CDRom drive.  If you recall, this was done in the
installation video when installing Oracle Virtualbox Guest
Additions: 
</p>

<div class="org-src-container">
<pre class="src src-bash">root@debvm:~# mkdir /mnt/cdrom
root@debvm:~# cd /mnt/cdrom
root@debvm:/mnt/cdrom# ls
root@debvm:/mnt/cdrom# cd
root@debvm:~# mount /dev/sr0 /mnt/cdrom    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">/dev/sr0 is typical CD drive</span>
root@debvm:~# cd /mnt/cdrom
root@debvm:/mnt/cdrom# ls
file1.txt install.sh data.dat
root@debvm:/mnt/cdrom# cd /
root@debvm:/# tree /mnt
/mnt
&#9492;&#9472;&#9472; cdrom
    &#9500;&#9472;&#9472; file1.txt
    &#9500;&#9472;&#9472; install.sh
    &#9492;&#9472;&#9472; data.dat
root@debvm:/# 
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd8b21cd" class="outline-4">
<h4 id="orgd8b21cd">Peeking into the Kernel</h4>
<div class="outline-text-4" id="text-orgd8b21cd">
<p>
An OSes <i>kernel</i> is the "brain" of the OS&#x2026;it controls and
manages everything!  Without a kernel, you have no OS.
</p>

<p>
In Unix, almost EVERYTHING is treated as a file and the directory
<span class="fname">/proc</span> is a portion of the file structure
made up of files, sub-directories, and file-looking things.  These
are acutall "hooks" into the running kernel where you can view all
kinds of cool information about the OSes brain.
</p>

<p>
For example, take a look at <span class="fname">cpuinfo</span>,
<span class="fname">cmdline</span>, <span class="fname">version</span>:
</p>

<div class="org-src-container">
<pre class="src src-bash">instructor@deb12vm:~$ cat /proc/cpuinfo
{lots of data, depends on CPU}
instructor@deb12vm:~$ 
</pre>
</div>

<p>
You can check out the others on your own.  And also note some
items may not be viewing as your normal user, but instead require
<i>root</i> access.  Stay away from those until you know what you're
doing. 
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated : "2024-02-11 10:41:53"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org6cac283" class="outline-3">
<h3 id="org6cac283">Command Prompt Overview<a id="org3160d00"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6cac283">
<p>
In a command shell, a typical Linux command prompt (often just
called 'the prompt') may look like:
</p>

<pre class="example" id="org2a85869">
instructor@deb12vm:~$
</pre>

<p>
This <i>specific</i> prompt provides 4 pieces of information:
</p>

<ul class="org-ul">
<li>The user you're acting as : <i>instructor</i></li>
<li>The computer's hostname: <i>deb12vm</i></li>
<li>The current directory you're in: <i>~</i>  (i.e. <i>instructor</i>'s "home" directory)</li>
<li>And if you're a privileged user or not: <i>$</i>
<ul class="org-ul">
<li><span class="cmd">#</span> means you are <i>root</i>, the full-administrative access user</li>
<li><span class="cmd">$</span> means you are a normal user</li>
</ul></li>
</ul>

<p>
As you perform these tasks:
</p>

<ul class="org-ul">
<li>change user accounts, and/or</li>
<li>log on to other machines, and/or</li>
<li>change directories, and/or</li>
<li>gain <i>root</i> privileges</li>
</ul>

<p>
the prompt changes:
</p>

<pre class="example" id="org314f3ee">
instructor@deb12vm:~$ cd /mnt
instructor@deb12vm:/mnt$ su -              
Password:
root@deb12vm:~# cd /mnt
root@deb12vm:/mnt# ssh sam@machine2           # You won't be able to 'ssh'
Password:
sam@machine2:~$ su -
Password:
root@machine2:~# cd /mnt
root@machine2:/mnt# 
</pre>

<p>
The prompt can also be customized and we'll discuss how in a few
weeks. 
</p>

<p>
<span style="color:#ff0000; background-color:#;">Warning</span>: Gaining <i>root</i> privileges can be
dangerous to your system if you're not careful.  So when in doubt, don't.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated : "2024-12-17 19:46:05"</font></td></tr></table>
</div>
</div>
<div id="outline-container-org2a55f17" class="outline-3">
<h3 id="org2a55f17">Basic Commands<a id="org93b8d4d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2a55f17">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgb9e5e86">Basic Commands</a></td></tr></table>
</p>

<p>
In order to explore the commands and tools we'll learn, we need to
have some basic functionality to move around the shell, create
sample files, etc.
</p>

<p>
This slide provides some commands and their basic function to
assist us.  Later in the course, we'll be exploring these commands
in depth.
</p>
</div>
<div id="outline-container-org3a72dd3" class="outline-5">
<h5 id="org3a72dd3">Clearing the Terminal Screen</h5>
<div class="outline-text-5" id="text-org3a72dd3">
<ul class="org-ul">
<li>Clear the terminal screen: <span class="cmd">clear</span></li>
</ul>
<pre class="example" id="org1f0b29a">
$ clear
# Screen will clear and put a new prompt at top
</pre>
</div>
</div>

<div id="outline-container-orge3e209f" class="outline-5">
<h5 id="orge3e209f">Listing Files</h5>
<div class="outline-text-5" id="text-orge3e209f">
<ul class="org-ul">
<li>List files: <span class="cmd">ls</span></li>
<li>List all files: <span class="cmd">ls -a</span></li>
<li>List files with details: <span class="cmd">ls -l</span></li>
<li>Both: <span class="cmd">ls -al</span></li>
</ul>
<pre class="example" id="orgbf3dcfe">
instructor@deb12vm:~$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
instructor@deb12vm:~$


instructor@deb12vm:~$ ls -a                  # Output trimmed for brevity
.              Music
..             Pictures
.bash_history  .profile
         [...]
.local         .xsession-errors.old
instructor@deb12vm:~$


instructor@deb12vm:~$ ls -l
total 36
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Desktop
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Documents
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Downloads
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Music
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Pictures
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Public
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Templates
drwxr-xr-x 2 instructor instructor 4096 Aug  9 14:06 Videos
instructor@deb12vm:~$


instructor@deb12vm:~$ ls -al   # Output trimmed for brevity
total 164
drwx------ 16 instructor instructor  4096 Aug 20 10:02 .
drwxr-xr-x  3 root       root        4096 Aug  9 14:01 ..
-rw-------  1 instructor instructor   505 Aug 20 10:09 .bash_history
-rw-r--r--  1 instructor instructor   220 Aug  9 14:01 .bash_logout
-rw-r--r--  1 instructor instructor  3526 Aug  9 14:01 .bashrc
drwxr-xr-x  7 instructor instructor  4096 Aug 20 10:01 .cache
drwx------  7 instructor instructor  4096 Aug  9 14:08 .config
drwxr-xr-x  2 instructor instructor  4096 Aug  9 14:06 Desktop
drwxr-xr-x  2 instructor instructor  4096 Aug  9 14:06 Videos
          [...]
-rw-------  1 instructor instructor    52 Aug 20 09:59 .Xauthority
-rw-------  1 instructor instructor 13590 Aug 20 11:45 .xsession-errors
-rw-------  1 instructor instructor 13517 Aug 20 09:59 .xsession-errors.old
instructor@deb12vm:~$
</pre>
</div>
</div>
<div id="outline-container-orgec09873" class="outline-5">
<h5 id="orgec09873">Changing Directories/Moving Around the File System</h5>
<div class="outline-text-5" id="text-orgec09873">
<ul class="org-ul">
<li>Change "down" into a directory: <span class="cmd">cd</span> <i>directory_name</i></li>
<li>Change "up" 1 directory level: <span class="cmd">cd ..</span></li>
<li>Change to a specific directory: <span class="cmd">cd</span>  <i>relative_or_absolute_directory_name</i></li>
<li>Change to users' HOME directory: <span class="cmd">cd</span></li>
</ul>

<pre class="example" id="orge5d026b">
instructor@deb12vm:~$ cd Desktop
instructor@deb12vm:~/Desktop$         # Notice prompt has changed


instructor@deb12vm:~/Desktop$ cd ..
instructor@deb12vm:~$                 # Notice prompt has changed


instructor@deb12vm:~$ cd /etc/default
instructor@deb12vm:/etc/default$


instructor@deb12vm:~$ cd /etc/default
instructor@deb12vm:/etc/default$
</pre>
</div>
</div>

<div id="outline-container-org59a4c8f" class="outline-5">
<h5 id="org59a4c8f">Displaying File Contents</h5>
<div class="outline-text-5" id="text-org59a4c8f">
<ul class="org-ul">
<li>Display file content: <span class="cmd">cat</span> <i>filename</i></li>
</ul>
<pre class="example" id="org54e8c37">
instructor@deb12vm:~$ cd /etc/default          # Change into a directory with some content
instructor@deb12vm:/etc/default$ cat locale    # Display the file's content
#  File generated by update-locale
LANG="en_US.UTF-8"
instructor@deb12vm:/etc/default$ cd            # Change back to our HOME directory
instructor@deb12vm:~$ 
</pre>
</div>
</div>
<div id="outline-container-org2a60856" class="outline-5">
<h5 id="org2a60856">Creating Files</h5>
<div class="outline-text-5" id="text-org2a60856">
<ul class="org-ul">
<li>Create an empty file: <span class="cmd">touch</span> <i>filename</i></li>
<li>Save command output to a file: <i>command</i> <span class="cmd">></span> <i>filename</i></li>
<li>Create file with content: <span class="cmd">cat ></span> <i>filename</i>
<ul class="org-ul">
<li>Hit <span class="term">control-d</span> on a blank line to finish.</li>
</ul></li>
</ul>
<pre class="example" id="orgea86e76">
instructor@deb12vm:~$ touch myfile.txt
instructor@deb12vm:~$ ls
Desktop  Documents  Downloads  Music  myfile.txt  Pictures  Public  Templates  Videos
instructor@deb12vm:~$

instructor@deb12vm:~$ ls &gt; output.txt
instructor@deb12vm:~$ cat output.txt
Desktop
Documents
Downloads
Music
myfile.txt
output.txt
Pictures
Public
Templates
Videos
instructor@deb12vm:~$

instructor@deb12vm:~$ cat &gt; input.txt
Hello World                                # Hit &lt;ENTER&gt; then Control-d
instructor@deb12vm:~$ cat input.txt 
Hello World
instructor@deb12vm:~$ 
</pre>
</div>
</div>
<div id="outline-container-org7bbf3ac" class="outline-5">
<h5 id="org7bbf3ac">Deleting Files/Directories</h5>
<div class="outline-text-5" id="text-org7bbf3ac">
<ul class="org-ul">
<li>Delete a file: <span class="cmd">rm</span> <i>filename</i></li>
<li>Delete a directory: <span class="cmd">rmdir</span> <i>directory_name</i>
<ul class="org-ul">
<li>Note: Directory must be empty (we'll learn how to override
this later when we formally learn <span class="cmd">rm</span> and
<span class="cmd">rmdir</span>).</li>
</ul></li>
</ul>
<pre class="example" id="orge369b57">
# Provided you've been following the example:

instructor@deb12vm:~$ ls
Desktop    Downloads  Music       output.txt  Public     Videos
Documents  input.txt  myfile.txt  Pictures    Templates
instructor@deb12vm:~$ rm myfile.txt
instructor@deb12vm:~$ ls
Desktop    Downloads  Music       Pictures  Templates
Documents  input.txt  output.txt  Public    Videos
instructor@deb12vm:~$ rmdir Templates
instructor@deb12vm:~$ ls
Desktop    Downloads  Music       Pictures  Videos
Documents  input.txt  output.txt  Public
instructor@deb12vm:~$ rm input.txt output.txt
instructor@deb12vm:~$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Videos
instructor@deb12vm:~$
</pre>
</div>
</div>
<div id="outline-container-orga0f2640" class="outline-5">
<h5 id="orga0f2640">Resetting the Terminal</h5>
<div class="outline-text-5" id="text-orga0f2640">
<p>
Sometimes, if you try and <span class="cmd">cat</span> a <i>binary</i> file, you'll
see garbage and your prompt will look all messed up.  In fact,
what you type may not even echo back correctly.
</p>

<p>
If this happens, first try typing <span class="cmd">reset</span> and pressing
&lt;ENTER&gt;.  Even if you can't see what your typing&#x2026;type it.  If
it doesn't clear up your terminal, <i>then</i> you'll need to close
the terminal emulator window and open a new one.
</p>
</div>
</div>
<div id="outline-container-orgf996b1a" class="outline-4">
<h4 id="orgf996b1a">Prep a Workspace</h4>
<div class="outline-text-4" id="text-orgf996b1a">
<p>
Working in your <i>$HOME</i> directory with examples will clutter it
up.  So let's create a <i>workspace</i> where you can create new files,
move files/directories, etc.
</p>

<pre class="example" id="org31af4b9">
$ cd                 # Go to your $HOME directory
$ mkdir workspace    # Create the workspace directory
$ cd workspace       # Change into it so we can start playing
</pre>

<p>
Now if you want to remove all your work, you can just delete the
<span class="fname">workspace</span> directory and recreate it:
</p>

<pre class="example" id="orgdee4fd1">
$ rm *                  # Delete all files in workspace... 
$ cd                    #    ...we'll learn a faster way later.
$ rmdir workspace
$ mkdir workspace
$ cd workspace
</pre>

<p>
If you don't want to delete it, but save the work you <i>could</i> do
something like this:
</p>

<pre class="example" id="orgdb09757">
$ cd
$ mv workspace workspace.save1
$ mkdir workspace
$ cd workspace
</pre>

<p>
Or use whatever verbiage you'd like instead of <i>save1</i>.  I like to
use the current date/time:
</p>

<pre class="example" id="orgaffd69c">
$ cd
$ mv workspace workspace.$(date "+%Y%m%d-%H%M")     
$ mkdir workspace
# cd workspace
</pre>

<p>
We'll learn the <span class="cmd">$(...)</span> and <span class="cmd">date "+%Y%m%d-%H%M"</span> concepts later with <i>Command Substitution</i> and
the <span class="cmd">date</span> command.
</p>
</div>
</div>
</div>
<div id="outline-container-org48a8987" class="outline-3">
<h3 id="org48a8987">Day 2 Summary<a id="orgc2ffa1a"></a></h3>
<div class="outline-text-3" id="text-org48a8987">
</div>
<div id="outline-container-org033f4f8" class="outline-4">
<h4 id="org033f4f8">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org033f4f8">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgab1d6ab" class="outline-4">
<h4 id="orgab1d6ab">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgab1d6ab">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org725300e" class="outline-2">
<h2 id="org725300e">Day 3 - Mon, September 1, 2025<a id="orgf56aeeb"></a></h2>
<div class="outline-text-2" id="text-org725300e">
</div>
<div id="outline-container-org344bee5" class="outline-3">
<h3 id="org344bee5">Day 3 Introduction<a id="org913a221"></a></h3>
<div class="outline-text-3" id="text-org344bee5">
</div>
<div id="outline-container-orgb79f49a" class="outline-4">
<h4 id="orgb79f49a">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgb79f49a">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orge5a844b" class="outline-3">
<h3 id="orge5a844b">Holiday&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Holiday">Holiday</span></span></h3>
<div class="outline-text-3" id="text-orge5a844b">
<p>
No class
</p>
</div>
</div>
<div id="outline-container-org3a1b3dc" class="outline-3">
<h3 id="org3a1b3dc">Day 3 Summary<a id="org4fc7d30"></a></h3>
<div class="outline-text-3" id="text-org3a1b3dc">
</div>
<div id="outline-container-org128b7db" class="outline-4">
<h4 id="org128b7db">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org128b7db">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org351e0bf" class="outline-4">
<h4 id="org351e0bf">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org351e0bf">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orga1bde0f" class="outline-2">
<h2 id="orga1bde0f">Day 4 - Wed, September 3, 2025<a id="org02cd9b8"></a></h2>
<div class="outline-text-2" id="text-orga1bde0f">
</div>
<div id="outline-container-org8241ee2" class="outline-3">
<h3 id="org8241ee2">Day 4 Introduction<a id="org6231692"></a></h3>
<div class="outline-text-3" id="text-org8241ee2">
</div>
<div id="outline-container-orgf13f82b" class="outline-4">
<h4 id="orgf13f82b">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgf13f82b">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgfd4d099" class="outline-3">
<h3 id="orgfd4d099">Terminal Multiplexer - <span class="cmd">tmux</span><a id="orgccb60c8"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgfd4d099">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org7613b80">Tmux</a></td></tr></table>
</p>

<p>
<span class="cmd">tmux</span> is a tool for generating several <i>windows</i> and
<i>panes</i> for working in a text-only environment - a terminal screen
<i>multiplexer</i>.  
</p>

<p>
As we'll be focusing on using only the terminal in this class (and
no GUI tools), a multiplexer is extremely useful.  While multiple
terminals/command-prompts can be opened, it uses more screen space, can get
cumbersome with more than 3, and actual GUI windows are
not available when remotely accessing other systems.
</p>
</div>

<div id="outline-container-org8e15286" class="outline-4">
<h4 id="org8e15286">Launching <span class="cmd">tmux</span></h4>
<div class="outline-text-4" id="text-org8e15286">
<p>
To use <span class="cmd">tmux</span> you simply need to
launch it (run it).  To do so, just type <span class="cmd">tmux</span>:
</p>
<pre class="example" id="org3721220">
$ tmux
</pre>
<p>
and you'll be presented with a screen which looks like this:
</p>

<p>
<img src="support_files/tmux_view.png" width="" height="" align=middle style="">
</p>

<p>
You'll notice you now have a <i>green</i> status bar at the bottom providing
several pieces of information:
</p>

<ul class="org-ul">
<li>The session number ( "[0]" )</li>
<li>Window numbers ( "0:" )</li>
<li>Window Names ("Bash")</li>
<li>Current Window ( "*" )</li>
<li>Host name ( "deb12vm" )</li>
<li>Current military time ( "19:44" )</li>
<li>Current date ( "08-Sep-24" )</li>
</ul>

<p>
As you work with <span class="cmd">tmux</span>, these pieces of information will
obviously change.
</p>
</div>
</div>
<div id="outline-container-org8843693" class="outline-4">
<h4 id="org8843693">Structure</h4>
<div class="outline-text-4" id="text-org8843693">
<p>
Each <span class="cmd">tmux</span> session allows you to have several "windows" and each
window can have several "panes".  As described above, the windows
have numbered IDs starting at 0.  Here is a sample with 4 Windows:
</p>

<p>
<img src="support_files/tmux1.png" width="" height="" align=middle style="width:25%">
</p>

<p>
Additionally, you can create "panes" by splitting windows either
horizontally or vertically.  Here is an example of window #2
broken into 3 panes:
</p>

<p>
<img src="support_files/tmux2.png" width="" height="" align=middle style="width:25%">
</p>
</div>
</div>

<div id="outline-container-org2563528" class="outline-4">
<h4 id="org2563528">The Meta-Key</h4>
<div class="outline-text-4" id="text-org2563528">
<p>
Obviously we need to be able to type stuff into our command shell
(here on out simply called the "shell"), but we also want to be able
to communicate with <span class="cmd">tmux</span>.  So to issue commands to
<span class="cmd">tmux</span>, a hot-key is used.  By default, the hot-key
(Meta-Key) is <span class="fname">control-b</span> (lower-case 'b').
</p>

<p>
Whenever we want to issue a command to <span class="cmd">tmux</span>, we hit
<span class="fname">control-b</span> followed by additional <span class="cmd">tmux</span>
hot-keys or commands.
</p>

<p>
Sometimes, we will want <span class="fname">control-b</span> to be sent to our
shell, not <span class="cmd">tmux</span>. To send a <span class="fname">control-b</span> to
our shell, we type <span class="fname">control-b</span> twice: once to get
<span class="cmd">tmux</span>'s attention and the second time tells
<span class="cmd">tmux</span> to pass the second <span class="fname">control-b</span> on to
the shell. 
</p>
</div>
</div>

<div id="outline-container-org627ef45" class="outline-4">
<h4 id="org627ef45">Default Hot-Keys</h4>
<div class="outline-text-4" id="text-org627ef45">
<p>
Since we need to be able to type commands and hot-keys to our Bash
shell, all hot-keys/commands destined for <span class="cmd">tmux</span> need to be
preceded with the <i>Meta-Key</i> (again, by default <span class="fname">control-b</span>).
</p>

<p>
Once you enter the Meta-key, you can then issue additional hot-key
commands to <span class="cmd">tmux</span>.
</p>

<p>
Some of the <span class="cmd">tmux</span> commands you may find useful are:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key</th>
<th scope="col" class="org-left">Action</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">c</td>
<td class="org-left">Create a new Window</td>
</tr>

<tr>
<td class="org-left">,</td>
<td class="org-left">Rename the current window (be sure to remove old stuff)</td>
</tr>

<tr>
<td class="org-left">"</td>
<td class="org-left">Split the current pane horizontally (top 'n' bottom)</td>
</tr>

<tr>
<td class="org-left">%</td>
<td class="org-left">Split the current pane vertically (left 'n' right)</td>
</tr>

<tr>
<td class="org-left">t</td>
<td class="org-left">Show a clock in the current pane; tap any key to remove</td>
</tr>

<tr>
<td class="org-left">:</td>
<td class="org-left">Issue a longer, typed command to tmux</td>
</tr>

<tr>
<td class="org-left">o</td>
<td class="org-left">Move the cursor to another pane (cycles through panes)</td>
</tr>

<tr>
<td class="org-left">q</td>
<td class="org-left">Show the pane ID numbers</td>
</tr>

<tr>
<td class="org-left">?</td>
<td class="org-left">Display the Help (tap 'q' to exit help)</td>
</tr>

<tr>
<td class="org-left">0-9</td>
<td class="org-left">Change to window 0-9</td>
</tr>

<tr>
<td class="org-left">d</td>
<td class="org-left">Detach from current tmux session</td>
</tr>

<tr>
<td class="org-left">C-UP/DOWN/LEFT/RIGHT</td>
<td class="org-left">Resize the current pane</td>
</tr>

<tr>
<td class="org-left">[</td>
<td class="org-left">Enter copy/scroll mode (2000 lines default); ESC or 'q' to exit</td>
</tr>
</tbody>
</table>

<p>
NOTE: these are defaults but can all be customized.
</p>

<p>
To close a pane, just exit the shell it's using by typing
<span class="cmd">exit</span>.  In fact, keep exiting the shells to eventually
exit out of the <span class="cmd">tmux</span> session (this exits the program; doesn't <i>detach</i>). 
</p>
</div>
</div>

<div id="outline-container-org17cddb6" class="outline-4">
<h4 id="org17cddb6">Sessions</h4>
<div class="outline-text-4" id="text-org17cddb6">
<p>
You can have multiple <span class="cmd">tmux</span> sessions after you <i>detach</i>
from a <span class="cmd">tmux</span>, you'll eventually want to re-attach to an
existing session, or launch a new session:
</p>

<pre class="example" id="org5280ed2">
$ tmux         # launches session #0
$ {META-d}     # Detach
$ tmux         # launches session #1
$ {META-d}     # Detach
$ # etc...
</pre>

<p>
To view the sessions you have available, use <span class="cmd">tmux ls</span>.
</p>

<pre class="example" id="org321bceb">
instructor@deb12vm:~$ tmux ls
0: 1 windows (created Sun Sep  8 19:43:49 2024) (attached)
2: 1 windows (created Sun Sep  8 19:53:47 2024)
instructor@deb12vm:~$ 
</pre>

<p>
To attach to a specific session, add <span class="cmd">-t #</span> after
<span class="cmd">tmux attach</span> where <i>#</i> is the number of the session to
attach to.   <b>Be sure</b> you are not within a <span class="cmd">tmux</span> session when you
execute this - <i>nested</i> <span class="cmd">tmux</span> sessions should be
avoided:
</p>

<pre class="example" id="org20dfdeb">
instructor@deb12vm:~$ tmux ls
0: 1 windows (created Sun Sep  8 19:43:49 2024)
2: 1 windows (created Sun Sep  8 19:53:47 2024)
instructor@deb12vm:~$ tmux attach -t 2
{attaches to session #2}
</pre>

<p>
Multiple sessions are useful for things such as:
</p>
<ul class="org-ul">
<li>Different sessions for different projects/classes (CS 2600 vs CS 1280)</li>
<li>Work vs school vs personal</li>
<li>Different remote host logons</li>
<li>etc.</li>
</ul>
</div>
</div>

<div id="outline-container-org30cd68a" class="outline-4">
<h4 id="org30cd68a"><span class="cmd">tmux</span> Demo</h4>
<div class="outline-text-4" id="text-org30cd68a">
<ol class="org-ol">
<li>Create 3 windows, two with 2 panes:
<ul class="org-ul">
<li>One window with 2 horizontal panes</li>
<li>One window with 2 vertical panes</li>
<li>One window with no panes</li>
</ul></li>
<li>Rename Window #2 to <span class="fname">win2</span></li>
<li>Launch the clock on Window 1, Pane 0 (hint: use 'q' to identify
the panes)</li>
<li>Detach from the entire session and close the terminal emulator
(or log off CPP).</li>
<li>Re-open a terminal emulator (or log back in to CPP) and
reattach to your session.</li>
</ol>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:56:46"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org15e2f56" class="outline-3">
<h3 id="org15e2f56">Listing files - <span class="cmd">ls</span><a id="orgfb47379"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org15e2f56">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org3a179d6">ls</a></td></tr></table>
</p>


<p>
<span class="cmd">ls</span> is a command used to list the files in the current
working directory (or just "current directory"):
</p>

<pre class="example" id="org09e693a">
$ ls
file1.txt   file2.txt   file3.txt   other_stuff
$
</pre>
</div>

<div id="outline-container-org17b2dfa" class="outline-4">
<h4 id="org17b2dfa"><span class="cmd">-a</span></h4>
<div class="outline-text-4" id="text-org17b2dfa">
<p>
<span class="cmd">-a</span> : List all files including hidden files:
</p>
<pre class="example" id="org335782f">
$ ls -a
.  ..  file1.txt   file2.txt   file3.txt   other_stuff
$
</pre>

<p>
In Unix, any file (or directory) which starts with a period (.) is
not listed/shown unless <span class="cmd">-a</span> is provided.  These are
considered <i>hidden</i>.
</p>
</div>
</div>

<div id="outline-container-org3a17232" class="outline-4">
<h4 id="org3a17232"><span class="cmd">-F</span></h4>
<div class="outline-text-4" id="text-org3a17232">
<p>
<span class="cmd">-F</span> adds a character to certain files and directories so
you can tell which is which.
</p>

<pre class="example" id="orgbcb2255">
$ ls -aF
./  ../  file1.txt@  file2.txt*  file3.txt  other_stuff/
</pre>

<p>
Notice the extra characters after some of the entries:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Char</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">/</td>
<td class="org-left">Entry is a directory</td>
</tr>

<tr>
<td class="org-left">*</td>
<td class="org-left">Entry is executable</td>
</tr>

<tr>
<td class="org-left">@</td>
<td class="org-left">File is a "symbolic link", or "symlink" (a pointer to a file)</td>
</tr>
</tbody>
</table>

<p>
The "symlink" will not be discussed in this course unless time
permits, but you should be aware of what it looks like so you can
recognize it as you browse the file system.
</p>
</div>
</div>

<div id="outline-container-orgeea408d" class="outline-4">
<h4 id="orgeea408d"><span class="cmd">-l</span></h4>
<div class="outline-text-4" id="text-orgeea408d">
<p>
<span class="cmd">-l</span> provides a <i>long</i> listing of the contents.  It
results in much more information about the files and directories:
</p>

<pre class="example" id="org5ac305a">
$ ls -alF
total 20 
drwx------  3 instructor instructor  4096 Sep  3 21:15 ./
drwxrwxrwt 16 root       root       12288 Sep  3 21:15 ../ 
lrwxrwxrwx  1 instructor instructor     9 Sep  3 21:15 file1.txt -&gt; file3.txt
-rwx------  1 instructor instructor     0 Sep  3 21:14 file2.txt*
-rw-------  1 instructor instructor     0 Sep  3 21:14 file3.txt
drwx------  2 instructor instructor  4096 Sep  3 21:14 other_stuff/
$
</pre>

<p>
Included are:
</p>
<ul class="org-ul">
<li>Column 1 : Entry's type and permissions</li>
<li>Column 2 : Number of hard links</li>
<li>Column 3 : Owner</li>
<li>Column 4 : Group membership</li>
<li>Column 5 : Size (for files) in bytes</li>
<li>Column 6+ : Date/time of last modification</li>
<li>Column N : Entry's name</li>
</ul>

<p>
Note: the date/time entry is not necessarily Month, Day, and
time.  Depending on the age of the entry, it may just be month,
day, year, or even just month and year.  This is why the notes
state "6+" because it may be columns 6, 7, and 8, or just 6 &amp; 7.
This is important to keep in mind later in the class.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:44:48"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org69b44ee" class="outline-3">
<h3 id="org69b44ee">File Globbing<a id="org8a23fe5"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org69b44ee">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgdbd4b3d">File Globbing</a></td></tr></table>
</p>

<p>
<i>File Globbing</i> is the process of using "wildcard" characters to
specify a collection of files in several circumstances.
</p>

<p>
The wildcards often used are:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Wildcard</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">*</td>
<td class="org-left">Match any number of characters (including none)</td>
</tr>

<tr>
<td class="org-left">?</td>
<td class="org-left">Match a single character</td>
</tr>

<tr>
<td class="org-left">[]</td>
<td class="org-left">Match a class, or group, of characters</td>
</tr>
</tbody>
</table>

<p>
Say we'd like to list all our MP3 files:
</p>

<pre class="example" id="org90f99d1">
$ ls -alF *.mp3
</pre>

<p>
Or, list only files which start with 's', end with 't' and only
have one char in-between, with any extension:
</p>

<pre class="example" id="org823830d">
$ ls -alF s?t.*
</pre>
</div>

<div id="outline-container-org0b48fcc" class="outline-4">
<h4 id="org0b48fcc">Character Classes</h4>
<div class="outline-text-4" id="text-org0b48fcc">
<p>
Character classes, or groups of characters, are put inside
brackets "[]".  These classes are made up of all the characters
you'd like to include in <i>that spot</i> of the glob.
</p>

<p>
For example, list all files which start with a digit:
</p>

<pre class="example" id="org1aca3f6">
$ ls [1029384765]*
</pre>

<p>
or, list all files which start with a vowel, upper-case or lower-case:
</p>

<pre class="example" id="org906c142">
$ ls [aeiouAEIOU]*
</pre>

<p>
If the characters can be described "contiguously", you can use the
first character, a dash, and the last character of the range.
</p>

<p>
For example, again, list all files which start with a digit:
</p>

<pre class="example" id="org325fdc0">
$ ls [0-9]*
</pre>

<p>
or, list all files which start with one of the first 6 letters of
the alphabet, lower-case only:
</p>

<pre class="example" id="org95d1d67">
$ ls [abcdef]*
$  ## or                     Side note: '#' is a comment character
$ ls [a-f]*
</pre>

<p>
Perhaps show only Java source code files whose file names contain a
digit:
</p>

<pre class="example" id="org708c99e">
$ ls -alF *[0-9]*.java
</pre>

<p>
Finally, list only those movies which start with A-J,
case-INsensitive:
</p>

<pre class="example" id="orgc3c2856">
$ ls -alF [a-jA-J]*.mp4
</pre>
</div>
</div>

<div id="outline-container-orgf02a621" class="outline-4">
<h4 id="orgf02a621">Contiguous Characters</h4>
<div class="outline-text-4" id="text-orgf02a621">
<p>
In computers, "characters" are actually represented by numbers.
It is these numbers which determine <i>order</i>
(i.e. contiguous-ness).  Commonly, they are the <a href="https://www.asciitable.com/">ASCII</a> values of
the characters: 
</p>

<p>
'0' <code>= 48; ... ; '9' =</code> 57; &#x2026; ;'A' <code>= 65; 'B' =</code> 66; &#x2026; ; 'a' <code>= 90; 'b' =</code> 91; &#x2026; ; 'z' == 122
</p>

<p>
This is why "[0-9]" is easy for our shell to extrapolate.
</p>
</div>
</div>

<div id="outline-container-orga7cdd08" class="outline-4">
<h4 id="orga7cdd08">Bash vs Command</h4>
<div class="outline-text-4" id="text-orga7cdd08">
<p>
While file globbing is not a Bash-specific feature, you need to be
aware Bash sees the wild card characters and expands file names
<i>prior</i> to the command executing.  Meaning, it is the command
shell which expands the file glob&#x2026;*not* the command itself.
</p>

<p>
So, with
</p>

<pre class="example" id="org002d2b9">
$ ls -alF *.mp4
</pre>

<p>
Bash finds all MP4 files in the current directory and then passes them to <span class="cmd">ls</span> as
command line parameters for processing by <span class="cmd">ls</span>:
</p>

<pre class="example" id="org897febe">
$ ls -alF *.mp4
$   # Bash extrapolates to...
$ ls -alF file1.mp4 file2.mp4 ... cool_movie.mp4
</pre>

<p>
<span class="cmd">ls</span> only sees a list of files, it never sees the
wildcard characters this way.
</p>

<p>
Note: There <i>are</i> ways to pass wildcard characters to the command,
however, which we'll see later on.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:41:39"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org32bfb69" class="outline-3">
<h3 id="org32bfb69">Creating a File - <span class="cmd">touch</span><a id="org4d49987"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org32bfb69">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org2b2d2ba">touch</a></td></tr></table>
</p>

<p>
If a file does not exist, <span class="cmd">touch</span> can create it.  If the
file does exist, <span class="cmd">touch</span> actually just updates the time
stamp of the file.  
</p>

<p>
Updating the time stamp is not why <span class="cmd">touch</span> is presented
here.  It is presented here as a quick way to create an empty file:
</p>

<pre class="example" id="org5e5b58b">
$ ls
dir1  dir2  file1.txt  file2.txt  file3.txt
$ touch newfile.txt
$ ls
dir1  dir2  file1.txt  file2.txt  file3.txt  newfile.txt
$ 
</pre>

<p>
You can also create multple files at once:
</p>

<pre class="example" id="orgd2ca927">
$ ls
dir1  dir2  file1.txt  file2.txt  file3.txt  newfile.txt
$ touch main.c support.h README
$ ls
dir1  dir2  file1.txt  file2.txt  file3.txt  main.c newfile.txt README support.h
$
</pre>
</div>
</div>
<div id="outline-container-org6ab16ea" class="outline-3">
<h3 id="org6ab16ea">Viewing Files - <span class="cmd">cat</span><a id="orgafaae31"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6ab16ea">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org124dc0b">cat</a></td></tr></table>
</p>

<p>
If the file is a plain text file - meaning its contents are just
letters, numbers, and punctuation marks - we can output the contents using the
<span class="cmd">cat</span> command.  The required parameter to 
<span class="cmd">cat</span> is the name of the file or files to display:
</p>

<p>
Presume we have 3 files each with different content.
</p>

<pre class="example" id="orgb72c2f2">
$ ls
file1.txt   file2.txt   file3.txt
$ cat file1.txt
Hello File #1
$ cat file2.txt
This is file #2
$ cat file3.txt
Inside file #3
$
</pre>

<p>
We can even provide multiple files on a single command line:
</p>

<pre class="example" id="org57bceca">
$ cat file1.txt file2.txt file3.txt
Hello File #1
This is file #2
Inside file #3
$
</pre>
</div>

<div id="outline-container-orgb89c8ae" class="outline-4">
<h4 id="orgb89c8ae"><span class="cmd">-n</span> with <span class="cmd">cat</span></h4>
<div class="outline-text-4" id="text-orgb89c8ae">
<p>
When viewing files, sometimes it's useful to have line numbers
placed in front of each line.  <span class="cmd">cat</span> can do that for us
with the <span class="cmd">-n</span> switch:
</p>

<pre class="example" id="org40c7fa6">
$ cat -n file1.txt
     1  Hello File #1
$ cat -n file2.txt
     1  This is file #2
$
$ cat -n file1.txt file2.txt file3.txt
     1  Hello File #1
     2  This is file #2
     3  Inside file #3
$
</pre>
</div>
</div>

<div id="outline-container-org37303e7" class="outline-4">
<h4 id="org37303e7">Only Text???</h4>
<div class="outline-text-4" id="text-org37303e7">
<p>
Full disclosure, <span class="cmd">cat</span> can also display binary
files&#x2026;files whose content is not meant to be displayed on a
text-based screen (i.e. a terminal), like MP3 audio files.
</p>

<p>
Using <span class="cmd">cat</span> to "display" binary files <i>can</i> actually be
useful but we'll see why later in the course.
</p>
</div>
</div>

<div id="outline-container-org5696c91" class="outline-4">
<h4 id="org5696c91"><span class="cmd">tac</span></h4>
<div class="outline-text-4" id="text-org5696c91">
<p>
While strange but sometimes useful, is to display the file in
reverse order (last line first).  Many Unix systems provide a
command <span class="cmd">tac</span> for just that purpose:
</p>

<p>
Suppose we have a file <span class="fname">file4.txt</span> with the following
content:
</p>
<pre class="example" id="orgfbc83da">
$ cat file4.txt
File #4 Line #1
File #4 Line #2
File #4 Line #3
$
</pre>

<p>
<span class="cmd">tac</span> will output the file in reverse:
</p>
<pre class="example" id="org8249bfa">
$ tac file4.txt
File #4 Line #3
File #4 Line #2
File #4 Line #1
$
</pre>

<p>
Unfortunately, <span class="cmd">tac</span> does <i>not</i> have the <span class="cmd">-n</span>
switch.  However, we'll learn how to accomplish this result later
on in the course using additional tools.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:39:27"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgf994574" class="outline-3">
<h3 id="orgf994574">Viewing files - <span class="cmd">less</span><a id="org1cb514d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf994574">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org2237e22">less</a></td></tr></table>
</p>

<p>
When viewing files, they often contain more than one screenful of
content.  To view content one screenful at a time, we use a <i>pager</i>. 
</p>

<p>
One such pager is called <span class="cmd">less</span>.  
</p>

<p>
To use <span class="cmd">less</span>, simply give it the name of the file you
wish to "page":
</p>

<pre class="example" id="org8e35927">
$ less /usr/share/dict/words   
</pre>

<p>
To navigate, use:
</p>
<ul class="org-ul">
<li><i>return</i> or <i>cursor-down</i> to advance one line</li>
<li><i>cursor-up</i> to move up one line</li>
<li><i>space</i> or <i>page-down</i> to advance a screenful</li>
<li><i>b</i> or <i>page-up</i> to go back up a screenful</li>
<li><i>g</i> to go to the top of the file</li>
<li><i>G</i> to go to the bottom of the file</li>
<li>and finally <i>q</i> to quit the <span class="cmd">less</span> pager</li>
</ul>
</div>

<div id="outline-container-org92c7c77" class="outline-4">
<h4 id="org92c7c77">Searching</h4>
<div class="outline-text-4" id="text-org92c7c77">
<p>
One of the most powerful features of <span class="cmd">less</span> is the
ability to <i>search</i> for a substring (actually, it's a <i>Regular
Expression</i>) in the file.
</p>

<p>
After launching <span class="cmd">less</span>, tap '/' and enter the substring
to search for at the prompt.  Press &lt;ENTER&gt; to perform the search.
</p>

<p>
For example, let's <span class="cmd">less</span> on a list of words, hit '/', and
search for 'lizard' (type "lizard" followed by ENTER).
</p>

<pre class="example" id="orgbb02e75">
$ less /usr/share/dict/words
/lizard{ENTER}
</pre>

<p>
Then you can use <span class="fname">n</span> to cycle through additional occurrences.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:43:56"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgc3b9c34" class="outline-3">
<h3 id="orgc3b9c34">Day 4 Summary<a id="org0b5e0b8"></a></h3>
<div class="outline-text-3" id="text-orgc3b9c34">
</div>
<div id="outline-container-org143a681" class="outline-4">
<h4 id="org143a681">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org143a681">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org182fa2b" class="outline-4">
<h4 id="org182fa2b">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org182fa2b">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgbfaf04c" class="outline-2">
<h2 id="orgbfaf04c">Day 5 - Mon, September 8, 2025<a id="org132923d"></a></h2>
<div class="outline-text-2" id="text-orgbfaf04c">
</div>
<div id="outline-container-orgcf1545f" class="outline-3">
<h3 id="orgcf1545f">Day 5 Introduction<a id="orgdc5b926"></a></h3>
<div class="outline-text-3" id="text-orgcf1545f">
</div>
<div id="outline-container-orgc457c6a" class="outline-4">
<h4 id="orgc457c6a">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgc457c6a">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2f4bddb" class="outline-3">
<h3 id="org2f4bddb">Viewing Unix Manual Pages<a id="org231e710"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2f4bddb">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgb204a90">man</a></td></tr></table>
</p>

<p>
By default, most UNIX systems have manuals documenting installed commands and C
functions.  
</p>

<p>
Unix "manual pages", or "man pages", are documentation of particular commands and
viewed via the <span class="cmd">man</span> command.
</p>
</div>

<div id="outline-container-org20bb2c4" class="outline-4">
<h4 id="org20bb2c4">Basic Usage</h4>
<div class="outline-text-4" id="text-org20bb2c4">
<p>
The simple usage is to provide the command in question as a
command line paramter.
</p>

<p>
For example, to get documentation on the <span class="cmd">ls</span> command:
</p>

<pre class="example" id="org9d43d06">
$ man ls
{screen is usually cleared}
NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about  the  FILEs (the current directory by default).  Sort entries alphabetically if
       none of -cftuvSUX nor --sort is specified.

       Mandatory arguments to long options are mandatory for short options too.

       -a, --all
	      do not ignore entries starting with .
[...]
</pre>

<p>
If you have a <i>pager</i> installed (which most Unixes do), you will
see one screenful at a 
time and are able to scroll up/down and possibly even search for
substrings.
</p>

<p>
<span class="cmd">man</span> can do all sorts of things.  To see all of them,
read the man page on <span class="cmd">man</span>:
</p>

<pre class="example" id="orgc8bb3be">
$ man man
{usually screen clears}

NAME
       man - an interface to the on-line reference manuals

SYNOPSIS
       man  [-C  file]  [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-m system[,...]] [-M path]
       [-S list] [-e extension] [-i|-I]  [--regex|--wildcard]  [--names-only]  [-a]  [-u]  [--no-subpages]  [-P
       pager]  [-r  prompt] [-7] [-E encoding] [--no-hyphenation] [--no-justification] [-p string] [-t] [-T[de‐
       vice]] [-H[browser]] [-X[dpi]] [-Z] [[section] page[.section] ...] ...
       man -k [apropos options] regexp ...
       man -K [-w|-W] [-S list] [-i|-I] [--regex] [section] term ...
       man -f [whatis options] page ...
       man -l [-C file] [-d] [-D] [--warnings[=warnings]] [-R encoding] [-L locale] [-P pager] [-r prompt] [-7]
       [-E encoding] [-p string] [-t] [-T[device]] [-H[browser]] [-X[dpi]] [-Z] file ...
       man -w|-W [-C file] [-d] [-D] page ...
       man -c [-C file] [-d] [-D] page ...
       man [-?V]

DESCRIPTION
       man  is  the  system's manual pager.  Each page argument given to man is normally the name of a program,
       utility or function.  The manual page associated with each of these arguments is  then  found  and  dis‐
       played.   A  section,  if provided, will direct man to look only in that section of the manual.  The de‐
       fault action is to search in all of the available sections following a pre-defined order ("1 n l 8  3  2
       3posix  3pm  3perl  3am  5  4 9 6 7" by default, unless overridden by the SECTION directive in /etc/man‐
       path.config), and to show only the first page found, even if page exists in several sections.

[...]
</pre>

<p>
As you can see, there is far too much information to learn for
class.  Instead, we'll focus on a couple of useful features.
</p>
</div>
</div>

<div id="outline-container-org1c60b3a" class="outline-4">
<h4 id="org1c60b3a">A More Focused Search</h4>
<div class="outline-text-4" id="text-org1c60b3a">
<p>
The Unix Manual is broken up into <i>sections</i> (see <a href="https://en.wikipedia.org/wiki/Man_page#Manual_sections">here</a>).  Each section
pertains to a specific type of command, function, file type, etc.
<span class="cmd">man</span> usually does a good job figuring out which section
to show you, especially if the command/function/etc. is
unique.
</p>

<p>
However, if the name is not unique, you may have to specify the
section for <span class="cmd">man</span> to search in.  For example,
<span class="cmd">printf</span> is a Unix command but also a C function call.
</p>

<p>
To see which sections a command or function resides in, use the
<span class="cmd">-f</span> <i>switch</i>. 
</p>

<p>
<b>Tip</b>: Almost all Unix commands have <i>options</i> or <i>switches</i>&#x2026;extra
parameters to alter the program's behavior. 
</p>

<pre class="example" id="org0d530f2">
$ man -f printf
printf (3)           - formatted output conversion
printf (1)           - format and print data
$
</pre>

<p>
As you can see, using the <span class="cmd">-f</span> switch, we don't get the
documentation of the command, but rather a list of sections it
resides in.
</p>

<p>
Now, you can use the section number to view the man page specific
to your needs (note the section number does not require a dash '-'):
</p>

<pre class="example" id="org3865792">
$ man 3 printf       # Get documentation on the C function call
{screen may clear}
NAME
       printf,  fprintf, dprintf, sprintf, snprintf, vprintf, vfprintf, vdprintf, vsprintf, vsnprintf - format‐
       ted output conversion

SYNOPSIS
       #include &lt;stdio.h&gt;

       int printf(const char *format, ...);
       int fprintf(FILE *stream, const char *format, ...);
       int dprintf(int fd, const char *format, ...);
       int sprintf(char *str, const char *format, ...);
       int snprintf(char *str, size_t size, const char *format, ...);
[...]
</pre>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:45:29"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org7932cac" class="outline-3">
<h3 id="org7932cac">Text Editor - <span class="cmd">vi</span><a id="org74360ba"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org7932cac">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgeeb6a76">Editing a File</a></td></tr></table>
</p>

<p>
<span class="cmd">vi</span> is a text editor found in <span class="underline">all versions</span> of
Unix. <span class="cmd">vi</span> works in one of
two modes: <i>command mode</i> or <i>entry mode</i>. 
</p>

<ul class="org-ul">
<li>In <i>command mode</i>, the user provides hot-keys to execute actions,
like search and replace.</li>
<li>In <i>entry mode</i>, the user is entering and editing text.</li>
</ul>

<p>
To use <span class="cmd">vi</span>, simply type <span class="cmd">vi</span>, optionally with a
name of a file to edit:
</p>

<pre class="example" id="orga283d53">
$ vi myscript.bash
{edit the file}
$
</pre>

<p>
If the file does not exist, <span class="cmd">vi</span> will create it when you
save your work.
</p>

<p>
NOTE: <span class="cmd">vi</span> does not contain menus.  As a result there is a
learning curve.  However, learning some basics ensures you can edit
any file as needed on any Unix system.
</p>
</div>

<div id="outline-container-orgefd801b" class="outline-4">
<h4 id="orgefd801b">Hot Keys</h4>
<div class="outline-text-4" id="text-orgefd801b">
<p>
The following hot-keys are the only ones required to know for this course.
</p>

<p>
Often, in order to enter a command while in command-mode, you'll
need to type a colon ':' first.  These are shown below:
</p>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Hot-Key</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">:w</td>
<td class="org-left">Write the file out</td>
</tr>

<tr>
<td class="org-left">:w filename</td>
<td class="org-left">Write the file out with given name (i.e. Save as&#x2026;)</td>
</tr>

<tr>
<td class="org-left">:q</td>
<td class="org-left">Quit vi</td>
</tr>

<tr>
<td class="org-left">:q!</td>
<td class="org-left">Quit vi and don't ask to save the work (if modified)</td>
</tr>

<tr>
<td class="org-left">gg</td>
<td class="org-left">Goto start of file</td>
</tr>

<tr>
<td class="org-left">GG</td>
<td class="org-left">Goto end of file</td>
</tr>

<tr>
<td class="org-left">$</td>
<td class="org-left">Goto end of line</td>
</tr>

<tr>
<td class="org-left">^</td>
<td class="org-left">Goto start of line</td>
</tr>

<tr>
<td class="org-left">i</td>
<td class="org-left">Enter entry-mode at cursor</td>
</tr>

<tr>
<td class="org-left">a</td>
<td class="org-left">Enter entry-mode after cursor</td>
</tr>

<tr>
<td class="org-left">ESC</td>
<td class="org-left">Exit entry-mode and enter command-mode</td>
</tr>

<tr>
<td class="org-left">k</td>
<td class="org-left">Move up one line (while in command-mode)</td>
</tr>

<tr>
<td class="org-left">j</td>
<td class="org-left">Move down one line (while in command-mode)</td>
</tr>

<tr>
<td class="org-left">h</td>
<td class="org-left">Move left one char (while in command-mode)</td>
</tr>

<tr>
<td class="org-left">l</td>
<td class="org-left">Move right one char  (while in command-mode)</td>
</tr>
</tbody>
</table>

<p>
Note: Cursor keys may also work to move the cursor around.
However, this is a feature of <span class="underline">newer implementations</span> of
<span class="cmd">vi</span>, as on Linux.  The Linux version of <span class="cmd">vi</span>
is actually called <span class="cmd">vim</span> - VI Improved.  So be sure you
still know, and can use, the letters for cursor movement.
</p>
</div>
</div>
<div id="outline-container-orgbb8e3c3" class="outline-4">
<h4 id="orgbb8e3c3">Example</h4>
<div class="outline-text-4" id="text-orgbb8e3c3">
<p>
Let's create a file called <span class="fname">sample.txt</span> containing
'Hello World' on a single line:
</p>

<pre class="example" id="orgc581436">
$ vi sample.txt
iHello World&lt;ENTER&gt;
ESC
:wq

$ ls
sample.txt
$ cat sample.txt
Hello World
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org1bd5d8e" class="outline-3">
<h3 id="org1bd5d8e">Text Editor - <span class="cmd">emacs</span><a id="org2bcf0b4"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org1bd5d8e">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgeeb6a76">Editing a File</a></td></tr></table>
</p>

<p>
<span class="cmd">emacs</span> is a text editor not installed by
 default. However, it is very popular and often requested on Linux
 systems. 
</p>

<p>
<span class="cmd">emacs</span> relies
very heavily on the Control and "Meta" key. Sometimes the "Meta"
key is just the ESC key. Others, ALT or COMMAND (on Mac) may also be
used (you'll need to test to find out which your system uses; any can be
configured).  
</p>

<p>
In notations/descriptions, manuals, etc. for
<span class="cmd">emacs</span>, the 
Control key is usually designated with just a 'C' and the Meta key
with 'M'.  For example: C-xC-s means press Control and 'x' at the
same time, release, then press Control and 's' at the same
time. The same holds true for 'M' and the Meta key (ESC/Alt/Command..as
the case may be).
</p>

<p>
Tip: If the key combinations use the same 'C'
or Meta key, you don't have to release the 'C' or Meta keys.  For
example, C-xC-s can be issued via pressing Control and 'x' at the
same time, release 'x' (keep Control held down), then press 's'.
</p>

<p>
To use <span class="cmd">emacs</span>, simply type <span class="cmd">emacs</span>, optionally
followed by a name of a file to edit:
</p>

<pre class="example" id="org938cc3e">
$ emacs myscript.bash
{edit the file}
$
</pre>

<p>
In normal GUI environments, launching <span class="cmd">emacs</span> this way
will launch the GUI version of the program.  However, again, for
this class we will be focused on the text console form 
of Emacs.  Since the CPP Unix system has no GUI, we don't have to
worry about it.
</p>

<p>
Tip: If you want to use a text-only version in a GUI environment,
launch <span class="cmd">emacs</span> with the <span class="cmd">-nw</span> switch:
</p>

<p>
$ emacs -nw myscript.bash
{ edit the file and exit as desired }
$
</p>

<p>
Note: Using <span class="cmd">-nw</span> in a text-only environment has no effect.
</p>
</div>

<div id="outline-container-org116f4c5" class="outline-4">
<h4 id="org116f4c5">Hot Keys</h4>
<div class="outline-text-4" id="text-org116f4c5">
<p>
The following hot-keys are the only sequences required to know for
this class.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Hot-Key</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-xC-s</td>
<td class="org-left">Save the file; will be prompted if no file name was given at launch</td>
</tr>

<tr>
<td class="org-left">C-xC-c</td>
<td class="org-left">Quit emacs; will be prompted to save if file changed</td>
</tr>

<tr>
<td class="org-left">M-&lt;</td>
<td class="org-left">Goto start of file</td>
</tr>

<tr>
<td class="org-left">M-&gt;</td>
<td class="org-left">Goto end of file</td>
</tr>

<tr>
<td class="org-left">C-a</td>
<td class="org-left">Goto start of line</td>
</tr>

<tr>
<td class="org-left">C-e</td>
<td class="org-left">Goto end of line</td>
</tr>

<tr>
<td class="org-left">C-p</td>
<td class="org-left">Move up one line</td>
</tr>

<tr>
<td class="org-left">C-n</td>
<td class="org-left">Move down one line</td>
</tr>

<tr>
<td class="org-left">C-f</td>
<td class="org-left">Move right one char</td>
</tr>

<tr>
<td class="org-left">C-b</td>
<td class="org-left">Move left one char</td>
</tr>
</tbody>
</table>

<p>
Note #1: Modern implementations of Emacs allow the cursor keys for
movement as well, but again for this class, you are required to know
the above.
</p>

<p>
Note #2: If you are using <span class="cmd">tmux</span>, you will find constantly
using C-b a hassle as C-b is also the Meta-key for
<span class="cmd">tmux</span>.  To get C-b to <span class="cmd">emacs</span>, you need to hit
C-b twice!  To rectify this you can either:
</p>

<ul class="org-ul">
<li>Change your <span class="cmd">tmux</span> Meta-key</li>
<li>Define a new "backward char" key for <span class="cmd">emacs</span></li>
<li>Test (hope) your cursor keys.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgf53df1f" class="outline-3">
<h3 id="orgf53df1f">Text Editor - <span class="cmd">nano</span><a id="org210e628"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span>&#xa0;<span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf53df1f">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgeeb6a76">Editing a File</a></td></tr></table>
</p>

<p>
<span class="cmd">nano</span> is a text editor usually installed by default on
Linux, <i>not all Unixes</i>! It has been gaining popularity due to its ease of
use. However, once users desire more power, flexibility, and function
they tend to move to <span class="cmd">emacs</span> or <span class="cmd">vi</span>.  
</p>

<p>
Like <span class="cmd">emacs</span>, <span class="cmd">nano</span> uses the
Control and Meta keys quite a bit. Sometimes the "Meta" key is just
the ESC key and other times, the ALT or COMMAND (on Mac) can be
used. However, <span class="cmd">nano</span> provides the hot-key bindings in a
menu-like view at the bottom of the screen.
</p>

<p>
Warning: the hot-keys do not align with current conventions
(i.e. C-s to save, C-q to quit)
</p>

<p>
To use <span class="cmd">nano</span>, simply type <span class="cmd">nano</span>, optionally with a
name of a file to edit:
</p>

<pre class="example" id="org9091663">
$ nano myscript.bash
{edit the file}
$
</pre>
</div>

<div id="outline-container-org1e8c773" class="outline-4">
<h4 id="org1e8c773">Hot Keys</h4>
<div class="outline-text-4" id="text-org1e8c773">
<p>
The following hot-keys are the only ones I'm going to require you
to know.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Hot-Key</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">C-o</td>
<td class="org-left">Write out the file; will be prompted for the file name</td>
</tr>

<tr>
<td class="org-left">C-x</td>
<td class="org-left">Quit nano</td>
</tr>

<tr>
<td class="org-left">M-\</td>
<td class="org-left">Goto start of file</td>
</tr>

<tr>
<td class="org-left">M-/</td>
<td class="org-left">Goto end of file</td>
</tr>

<tr>
<td class="org-left">C-e</td>
<td class="org-left">Goto end of line</td>
</tr>

<tr>
<td class="org-left">C-a</td>
<td class="org-left">Goto start of line</td>
</tr>

<tr>
<td class="org-left">C-p</td>
<td class="org-left">Move up one line</td>
</tr>

<tr>
<td class="org-left">C-n</td>
<td class="org-left">Move down one line</td>
</tr>

<tr>
<td class="org-left">C-f</td>
<td class="org-left">Move right one char</td>
</tr>

<tr>
<td class="org-left">C-b</td>
<td class="org-left">Move left one char</td>
</tr>
</tbody>
</table>

<p>
Note: Cursor key movements also work.
</p>
</div>
</div>
</div>
<div id="outline-container-org4b41e79" class="outline-3">
<h3 id="org4b41e79">Day 5 Summary<a id="org1bf08e5"></a></h3>
<div class="outline-text-3" id="text-org4b41e79">
</div>
<div id="outline-container-org253e0a1" class="outline-4">
<h4 id="org253e0a1">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org253e0a1">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org47eea82" class="outline-4">
<h4 id="org47eea82">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org47eea82">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc74d436" class="outline-2">
<h2 id="orgc74d436">Day 6 - Wed, September 10, 2025<a id="orga38859d"></a></h2>
<div class="outline-text-2" id="text-orgc74d436">
</div>
<div id="outline-container-orgc08fbcc" class="outline-3">
<h3 id="orgc08fbcc">Day 6 Introduction<a id="org0f4ad81"></a></h3>
<div class="outline-text-3" id="text-orgc08fbcc">
</div>
<div id="outline-container-org64995bb" class="outline-4">
<h4 id="org64995bb">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org64995bb">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2d3194e" class="outline-3">
<h3 id="org2d3194e">Make a Directory - <span class="cmd">mkdir</span><a id="org01e3279"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2d3194e">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org7cc474b">mkdir</a></td></tr></table>
</p>

<p>
To make a directory, use <span class="cmd">mkdir</span>:
</p>

<pre class="example" id="org01b1e4b">
$ ls
$ mkdir data
$ ls -F
data/
$ 
</pre>

<p>
You can also create a full path of directories by
adding the <span class="cmd">-p</span> switch:
</p>

<pre class="example" id="orga6138d7">
$ ls
$ mkdir data
$ ls -F
data/
$ mkdir -p some/other/path
$ ls -F
data/    some/
$ tree some
some
└── other
    └── path
$ ls -RF some                 # -R was not discussed; it does a "recursive" ls
some:
other/

some/other:
path/

some/other/path:
$
</pre>
</div>
</div>
<div id="outline-container-org973bdd8" class="outline-3">
<h3 id="org973bdd8">Directory Navigation - <span class="cmd">cd</span><a id="orgff34f7a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org973bdd8">
<p>
<span class="cmd">cd</span> is used to <i>change directory</i>.
</p>

<p>
When you log in to a Unix system, by default, you're put into your
<i>home</i> directory which, on most Linux systems, is
<span class="fname">/home/USERNAME</span>.
</p>

<p>
In order to move around the Unix hierarchical file system, we use
the <span class="cmd">cd</span> command and give it the new location we'd like to
reside in:
</p>

<pre class="example" id="org5d02683">
$ pwd                    # 'pwd' - print working (current) directory
/home/instructor
$ ls -F
other_stuff/
$ cd other_stuff
$ pwd
/home/instructor/other_stuff
</pre>
</div>
<div id="outline-container-org34e0ac8" class="outline-4">
<h4 id="org34e0ac8">Paths</h4>
<div class="outline-text-4" id="text-org34e0ac8">
<p>
You can give <span class="cmd">cd</span> a <i>path</i> to the target directory so you
don't have to move in single-directory increments:
</p>
<pre class="example" id="orgbed3da2">
$ pwd
/home/instructor/other_stuff
$ cd /home/instructor/cs2600/hw1
$ pwd
/home/instructor/cs2600/hw1
$
</pre>
</div>
</div>
<div id="outline-container-orgf2f9dae" class="outline-4">
<h4 id="orgf2f9dae">Absolute Paths</h4>
<div class="outline-text-4" id="text-orgf2f9dae">
<p>
<span class="cmd">cd</span> can take absolute paths as its parameter.  An
<span class="term">absolute path</span> is <span class="termdef">a path which starts at the root directory</span>. 
</p>

<p>
For example, <span class="fname">/home/instructor/cs2600/hw1</span> is an absolute
path since the first component is <span class="fname">/</span>&#x2026;the root of the
Unix file system.
</p>

<p>
Another example might be <span class="fname">/proc/sys/net/ipv4</span>.
</p>
</div>
</div>

<div id="outline-container-orgaad64ad" class="outline-4">
<h4 id="orgaad64ad">Relative Paths</h4>
<div class="outline-text-4" id="text-orgaad64ad">
<p>
A <span class="term">relative path</span> is <span class="termdef">a path which starts at the current location; the first component is a directory name, not the root directory</span>.
</p>

<p>
For example, <span class="fname">cs2600/hw1</span> is a relative path:
</p>

<pre class="example" id="orgcfb2cbb">
$ cd
$ pwd
/home/instructor
$ cd cs2600/hw1
$ pwd
/home/instructor/cs2600/hw1
$
</pre>

<p>
Notice we passed <span class="cmd">cd</span> a relative path, but <span class="cmd">pwd</span>
returns an absolute path.
</p>
</div>
</div>
<div id="outline-container-orgfa4ca17" class="outline-4">
<h4 id="orgfa4ca17">No Argument</h4>
<div class="outline-text-4" id="text-orgfa4ca17">
<p>
Issuing a <span class="cmd">cd</span> with no directory (absolute or relative)
takes you to your home directory:
</p>
<pre class="example" id="org13a6837">
$ pwd
/home/instructor/cs2600/hw1
$ cd
$ pwd
/home/instructor
$
</pre>
</div>
</div>

<div id="outline-container-org3cdb7b8" class="outline-4">
<h4 id="org3cdb7b8"><span class="fname">..</span></h4>
<div class="outline-text-4" id="text-org3cdb7b8">
<p>
Sometimes we want to provide a relative path, but still be able to
move UP the directory heirarchy.  To do so, we can use
<span class="fname">..</span> to mean "back up one level of the hierarchy".
</p>

<p>
So, one level up from <span class="fname">/home/instructor</span> is
<span class="fname">/home</span>.  Thus <span class="fname">/home/instructor/..</span> is the same
as <span class="fname">/home</span>:
</p>

<pre class="example" id="org7b76a3d">
$ pwd
/home/instructor/cs2600/hw1
$ cd ../../cs3800/hw2
$ pwd
/home/instructor/cs3800/hw2
$
</pre>

<p>
Notice we can use <span class="fname">..</span> more than once (separated by the
path delimiter), to denote backing up more than one level.  You
may use as may as you need.
</p>

<p>
Here is an actual example from my own system:
</p>

<pre class="example" id="orgb54934e">
$ pwd
/home/instructor/data/instruction/cal_poly_pomona/CS_2600/2018_fall/students
$ cd ../../../../bin/
$ pwd
/home/instructor/data/instruction/bin
$
</pre>
</div>
</div>
<div id="outline-container-org74e25c6" class="outline-4">
<h4 id="org74e25c6"><span class="fname">.</span></h4>
<div class="outline-text-4" id="text-org74e25c6">
<p>
Like <span class="fname">..</span>, <span class="fname">.</span> has a special meaning.
Specifically, <span class="fname">.</span> means "here" or "this directory" -
the current working directory.
</p>

<p>
For example:
</p>
<pre class="example" id="org6bceddf">
$ pwd
/home/instructor
$ cd .
$ pwd
$ /home/instructor
</pre>

<p>
Notice there is no difference since the directory you "changed
into" was the directory you were already in.  
</p>

<p>
The <span class="fname">.</span> is used in other ways, not usually with
<span class="cmd">cd</span>, but you need to be aware of it.
</p>

<p>
This is why if you issue a <span class="cmd">tree</span> command with no
arguments, it uses the current working directory and the starting location
shown is a <span class="fname">.</span>:
</p>
<pre class="example" id="org0512c1c">
.
├── compiled
│   ├── bin.class
│   ├── lib.class
│   └── main.class
└── src
    ├── bin.java
    ├── lib.java
    └── main.java
</pre>
</div>
</div>
<div id="outline-container-org122ac16" class="outline-4">
<h4 id="org122ac16">Special Character <span class="fname">~</span></h4>
<div class="outline-text-4" id="text-org122ac16">
<p>
In Unix, the tilde <span class="fname">~</span> is symbolic of the current
user's home directory.  You may use it to <span class="cmd">cd</span> to your
home directory or even at the start of path:
</p>
<pre class="example" id="org43ebe40">
$ pwd
/home/instructor/code/project1/source
$ cd ~
$ pwd
/home/instructor
$ cd /home/instructor/code/project1/source
$ pwd
/home/instructor/code/project1/source
$ cd ~/public_html
$ pwd
/home/instructor/public_html
$
</pre>
</div>
</div>

<div id="outline-container-org1eb23bc" class="outline-4">
<h4 id="org1eb23bc">Special Location <span class="fname">-</span></h4>
<div class="outline-text-4" id="text-org1eb23bc">
<p>
Another special symbol denoting a location is a dash
<span class="fname">-</span>.  <span class="fname">-</span> denotes the most recent directory you
were in.
</p>

<pre class="example" id="org1573b9c">
$ pwd
/home/instructor/code/project1/source
$ cd ~                              # same result as 'cd' by itself
$ pwd
/home/instructor
$ cd -
$ pwd
/home/instructor/code/project1/source
$ cd ../bin
$ pwd
/home/instructor/code/project1/bin
$ cd -
$ pwd
/home/instructor/code/project1/source
$
</pre>
</div>
</div>
</div>
<div id="outline-container-orgfe4bc59" class="outline-3">
<h3 id="orgfe4bc59"><span class="cmd">tree</span> - Viewing a File Hierarchy&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgfe4bc59">
<p>
<span class="cmd">tree</span> displays the file hierarchy starting with either:
</p>
<ul class="org-ul">
<li>the directory you are in, or</li>
<li>the directory you specify</li>
</ul>

<p>
For example:
</p>

<pre class="example" id="orge2fcd16">
$ tree
.
└── cs2600
    ├── day5
    │   ├── ex1
    │   │   └── sample.bash
    │   ├── ex2
    │   │   └── myproc.c
    │   ├── ex3
    │   │   └── secret_pwd
    │   └── intro.pdf
    └── notes.txt

5 directories, 5 files
$
</pre>

<p>
or if you give it a directory:
</p>

<pre class="example" id="orgba01952">
$ tree day5
day5
├── ex1
│   └── sample.bash
├── ex2
│   └── myproc.c
├── ex3
│   └── secret_pwd
└── intro.pdf

3 directories, 4 files
$
</pre>

<p>
<span class="cmd">tree</span> can take either <i>absolute</i> or <i>relative</i> paths:
</p>

<pre class="example" id="org3ddf2dd">
$ tree
.
└── cs2600
    ├── day5
    │   ├── ex1
    │   │   └── sample.bash
    │   ├── ex2
    │   │   └── myproc.c
    │   ├── ex3
    │   │   └── secret_pwd
    │   └── intro.pdf
    └── notes.txt

5 directories, 5 files
$

$ tree cs2600/day5/ex1        # &lt;== 'relative' path to directory
cs2600/day5/ex1
└── sample.bash

0 directories, 1 file
$


$ tree /home/instructor/data/cs2600/day5/ex3   # &lt;== 'absolute' path to directory
/home/instructor/data/cs2600/day5/ex3
└── secret_pwd

0 directories, 1 file
$
</pre>
</div>
</div>
<div id="outline-container-org2ddf314" class="outline-3">
<h3 id="org2ddf314">Copying files - <span class="cmd">cp</span><a id="org1cc4d71"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2ddf314">
<p>
To copy a file from one location to another, we use the
<span class="cmd">cp</span> command.  <span class="cmd">cp</span> takes at least two
parameters, the source file and the destination file:
</p>

<pre class="example" id="org957e31e">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ cp file1.txt other_stuff/file1.txt
$ cd other_stuff
$ ls
file1.txt
$
</pre>
</div>

<div id="outline-container-org2a48d32" class="outline-4">
<h4 id="org2a48d32">Keep the File Name</h4>
<div class="outline-text-4" id="text-org2a48d32">
<p>
If the destination file does not exist and we want to keep the
same name as the source file, we do not need to include the
destination file name in the command, just the destination
directory:
</p>

<pre class="example" id="org716b52f">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ cp file1.txt other_stuff
$ cd other_stuff
$ ls
file1.txt
$
</pre>

<p>
The '/' after <span class="fname">other_stuff</span> is optional.
</p>

<p>
Note: If the destination <b>file</b> <i>does</i> exist, it will be
overwritten.
</p>
</div>
</div>

<div id="outline-container-org103779e" class="outline-4">
<h4 id="org103779e">File Globbing</h4>
<div class="outline-text-4" id="text-org103779e">
<p>
As with other commands, file globbing is also allowed:
</p>

<pre class="example" id="org19754b6">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ cp *.txt other_stuff
$ cd other_stuff
$ ls
files1.txt   file2.txt
$

</pre>
</div>
</div>
</div>
<div id="outline-container-org6fa36a5" class="outline-3">
<h3 id="org6fa36a5">Moving files - <span class="cmd">mv</span><a id="org7490091"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6fa36a5">
<p>
Rather than copying, often we'll want to move files from one
location to another.  To do so, we use the <span class="cmd">mv</span> command. 
<span class="cmd">mv</span> takes at least two
parameters, the source file and the destination file:
</p>

<pre class="example" id="org85139b9">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ mv file1.txt other_stuff/file1.txt
$ ls -F
file2.txt   other_stuff/
$ cd other_stuff
$ ls
file1.txt
$
</pre>
</div>

<div id="outline-container-org91b3c4b" class="outline-4">
<h4 id="org91b3c4b">Keep the File Name</h4>
<div class="outline-text-4" id="text-org91b3c4b">
<p>
If the destination file does not exist and we want to keep the
same name as the source file, we do not need to include the
destination file name in the command, just the destination
directory:
</p>

<pre class="example" id="orgda48844">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ mv file1.txt other_stuff
$ ls -F
file2.txt   other_stuff/
$ cd other_stuff
$ ls
file1.txt
$
</pre>

<p>
The '/' after <span class="fname">other_stuff</span> is optional.
</p>

<p>
Note: If the destination <b>file</b> <i>does</i> exist, it will be overwritten.
</p>
</div>
</div>
<div id="outline-container-orgc2de217" class="outline-4">
<h4 id="orgc2de217">File Globbing</h4>
<div class="outline-text-4" id="text-orgc2de217">
<p>
As with other commands, file globbing is also allowed:
</p>

<pre class="example" id="org29aef98">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ mv *.txt other_stuff
$ cd other_stuff
$ ls
files1.txt   file2.txt
$
</pre>
</div>
</div>

<div id="outline-container-org7d45010" class="outline-4">
<h4 id="org7d45010">Renaming Files</h4>
<div class="outline-text-4" id="text-org7d45010">
<p>
In Unix, renaming files is the same as moving them.  Just don't
include any directories:
</p>

<pre class="example" id="orgd6e3fc8">
$ ls -F
files1.txt   file2.txt   other_stuff/
$ mv file1.txt fileX.txt
$ ls -F
filesX.txt   file2.txt   other_stuff/
$
</pre>

<p>
Note: Renaming files using File Globbing is not possible with the
<span class="cmd">mv</span> command.
</p>
</div>
</div>
</div>
<div id="outline-container-org72c217c" class="outline-3">
<h3 id="org72c217c">Deleting files - <span class="cmd">rm</span><a id="orge9003b2"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org72c217c">
<p>
To delete a file, we use <span class="cmd">rm</span>:
</p>

<pre class="example" id="orga84dbb1">
$ ls
file1.txt   file2.txt   file3.txt
$ rm file1.txt
$ ls
file2.txt   file3.txt
$
</pre>
</div>

<div id="outline-container-org2fb5631" class="outline-4">
<h4 id="org2fb5631"><span class="cmd">-i</span></h4>
<div class="outline-text-4" id="text-org2fb5631">
<p>
Sometimes, we want to get user verification.  To do so, use the
<span class="cmd">-i</span> switch:
</p>

<pre class="example" id="org6369e03">
$ ls
file1.txt   file2.txt   file3.txt
$ rm -i file1.txt
rm: remove regular file ‘file1.txt’? n
$ ls
file1.txt  file2.txt   file3.txt
$ rm -i file1.txt
rm: remove regular file ‘file1.txt’? y
$ ls
file2.txt   file3.txt
</pre>
</div>
</div>

<div id="outline-container-org02d758b" class="outline-4">
<h4 id="org02d758b">Deleting Multiple Files</h4>
<div class="outline-text-4" id="text-org02d758b">
<p>
Specify more than one file and <span class="cmd">rm</span> will remove all of them:
</p>

<pre class="example" id="org61e0983">
$ ls
file1.txt   file2.txt   file3.txt
$ rm file2.txt file3.txt           
$ ls
file1.txt
$
</pre>

<p>
<b>BE CAREFUL!!!!!!</b>
</p>

<p>
While <i>globbing</i> is allowed with many of these commands
(<span class="cmd">ls</span>, <span class="cmd">cp</span>, <span class="cmd">mv</span>, etc.), using
wildcards with <span class="cmd">rm</span> can be especially dangerous!
</p>

<pre class="example" id="orgc165d63">
$ cd /home/bdorf/hw1
$ rm *
$
</pre>

<p>
'bdorf' just deleted <span class="underline">all</span> of their homework 1 files!!  So if
you issued <span class="cmd">rm *.txt</span> above, you would lose
<span class="fname">file1.txt</span> also.
</p>
</div>
</div>
</div>
<div id="outline-container-orgc0cb892" class="outline-3">
<h3 id="orgc0cb892">Copying Directories<a id="org1dc7567"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgc0cb892">
<p>
Copying directories uses the <span class="cmd">cp</span> command like files, but
with the <span class="cmd">-r</span> switch.  <span class="cmd">-r</span> means "recursive".
</p>

<pre class="example" id="orgf6e81f3">
$ ls -F
dir1/  file1.txt  file2.txt  file3.txt
$ cp dir1 dir2     # 'cp' will not copy directories w/o '-r'
cp: omitting directory ‘dir1’
$ cp -r dir1 dir2  
$ ls -F
dir1/  dir2/  file1.txt  file2.txt  file3.txt
$ tree .
.
├── dir1
│   └── other_stuff
├── dir2
│   └── other_stuff
├── file1.txt
├── file2.txt
└── file3.txt

4 directories, 3 files
$ cp -r dir2 dir1               # Notice 'dir1' already exists!
$ tree .
.
├── dir1
│   ├── dir2                    # so the copy went *into* the target!
│   │   └── other_stuff
│   └── other_stuff
├── dir2
│   └── other_stuff
├── file1.txt
├── file2.txt
└── file3.txt

6 directories, 3 files
$
</pre>
</div>
</div>
<div id="outline-container-org79035b5" class="outline-3">
<h3 id="org79035b5">Moving a directory<a id="orgb263b31"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org79035b5">
<p>
Moving a directory is the same as moving a file (and with
renaming), just use the <span class="cmd">mv</span> command.  No special
switches are required.
</p>

<pre class="example" id="org3773250">
$ ls -F
dir1/  dir2/  file1.txt  file2.txt  file3.txt
$ mv dir2 other_stuff
$ ls -F
dir1/  file1.txt  file2.txt  file3.txt  other_stuff/
$ mv other_stuff dir1                                 # Warning: 'dir1' exists, so the move...
$ ls -F
dir1/  file1.txt  file2.txt  file3.txt                #    puts 'other_stuff' *inside* 'dir1'.
$ tree .
.
├── dir1
│   └── other_stuff
├── file1.txt
├── file2.txt
└── file3.txt

2 directories, 3 files
$
</pre>

<p>
Be careful if the target directory exists.  You won't be renaming a
directory, you'll be moving its entire tree <i>into</i> the target.
</p>
</div>
</div>
<div id="outline-container-orge661cf1" class="outline-3">
<h3 id="orge661cf1">Deleting a Directory<a id="orgd69c746"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orge661cf1">
<p>
To delete a directory, we use either the <span class="cmd">rmdir</span> command
or the <span class="cmd">rm</span> command, as with files.
</p>

<p>
Use <span class="cmd">rmdir</span> when the directory is empty.  If the directory
is not empty, you can use <span class="cmd">rm</span> with the <span class="cmd">-r</span>
switch to delete <i>recursively</i>.  Be careful using <span class="cmd">rm -r</span> as you may delete
content you didn't mean to.
</p>

<pre class="example" id="org651cf1f">
$ tree .
.
├── dir1
├── dir2
│   └── file2.txt
├── file1.txt
├── file2.txt
└── file3.txt

2 directories, 4 files
$ rm dir2                                    # 'rm' can not be used to delete directories w/o -r
rm: cannot remove ‘dir2’: Is a directory
$ rmdir dir2                                 # 'rmdir' requires directories to be empty
rmdir: failed to remove ‘dir2’: Directory not empty
$ rmdir dir1                                 # 'dir1' is empty, so 'rmdir' works
$ ls
dir2  file1.txt  file2.txt  file3.txt        # Notice no more 'dir1'
$ rm -r dir2                                 # Use -r to remove a directory tree, empty or not!!
$ ls
file1.txt  file2.txt  file3.txt              # "rm -r" removed 'dir2' tree; 'rmdir' removed 'dir1'
$ 
</pre>
</div>
</div>
<div id="outline-container-org3cbd055" class="outline-3">
<h3 id="org3cbd055">Day 6 Summary<a id="org22e13a2"></a></h3>
<div class="outline-text-3" id="text-org3cbd055">
</div>
<div id="outline-container-org4557940" class="outline-4">
<h4 id="org4557940">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org4557940">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org2cb66ae" class="outline-4">
<h4 id="org2cb66ae">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org2cb66ae">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgad328f0" class="outline-2">
<h2 id="orgad328f0">Day 7 - Mon, September 15, 2025<a id="org198e677"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></h2>
<div class="outline-text-2" id="text-orgad328f0">
</div>
<div id="outline-container-org5bb8c56" class="outline-3">
<h3 id="org5bb8c56">Day 7 Introduction<a id="org2645cec"></a></h3>
<div class="outline-text-3" id="text-org5bb8c56">
</div>
<div id="outline-container-org89823e8" class="outline-4">
<h4 id="org89823e8">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org89823e8">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org8a055e4" class="outline-3">
<h3 id="org8a055e4">Quiz #1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q1">Q1</span></span></h3>
<div class="outline-text-3" id="text-org8a055e4">
<ul class="org-ul">
<li><b>Quiz is closed book, closed notes, no Internet resources, no
shell access, and no collaboration of any kind.</b>
<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;"><b>Warning: Discord and other collaboration tools have been detected! Please don't risk it!</b></span></li>
</ul></li>
<li>All answers must be derived from material covered in class.</li>
<li>Quiz will be available from 5:30pm to 5:55pm</li>
<li>During the quiz, Zoom chat will be limited to posts only with
instructor, so you may ask questions while you take the quiz.</li>
<li>You will have 20 minutes to complete the quiz from the time you start.
<ul class="org-ul">
<li>After the 20 minutes, the quiz is set to auto-submit.</li>
<li>If you get disconnected from the network, you will be able to
get back into the quiz but keep in mind the timer keeps going.</li>
</ul></li>
<li>You will be presented one question at a time; backtracking to previous questions is not permitted</li>
<li>Be careful to use <b><i>NEXT</i></b> to advance to the next question and not
accidentally click "Submit" until you are finished.</li>
<li>You may assume all files and directory names contain only letters
(both-cases), digits, underscores, and/or periods.</li>
</ul>

<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;">Results will not be available/visible until all student submissions have been graded.</span></li>
</ul>

<p>
NOTE #1: 'Fill in the blank' answers are simple enough to be
automatically graded. So read the question carefully and be
precise - no extraneous words (i.e. "Solution" vs "My answer is
'Solution'.")    
</p>
</div>
</div>
<div id="outline-container-org7a29a2f" class="outline-3">
<h3 id="org7a29a2f">Day 7 Summary<a id="org77f2e05"></a></h3>
<div class="outline-text-3" id="text-org7a29a2f">
</div>
<div id="outline-container-org93b5381" class="outline-4">
<h4 id="org93b5381">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org93b5381">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org9f4dce0" class="outline-4">
<h4 id="org9f4dce0">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org9f4dce0">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgfcaf622" class="outline-2">
<h2 id="orgfcaf622">Day 8 - Wed, September 17, 2025<a id="org1356823"></a></h2>
<div class="outline-text-2" id="text-orgfcaf622">
</div>
<div id="outline-container-org4e3c4ca" class="outline-3">
<h3 id="org4e3c4ca">Day 8 Introduction<a id="org0e9070d"></a></h3>
<div class="outline-text-3" id="text-org4e3c4ca">
</div>
<div id="outline-container-org6b40ab8" class="outline-4">
<h4 id="org6b40ab8">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org6b40ab8">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org4cbdca1" class="outline-3">
<h3 id="org4cbdca1">File Ownership&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4cbdca1">
<p>
Every file on Unix belongs to 3 entities:
</p>
<ul class="org-ul">
<li>An owner: a single user</li>
<li>A group: a collection of 0+ users</li>
<li>Everyone else on the system</li>
</ul>
</div>

<div id="outline-container-org966cad3" class="outline-4">
<h4 id="org966cad3">Owner</h4>
<div class="outline-text-4" id="text-org966cad3">
<p>
An owner&#x2026;
</p>
<ul class="org-ul">
<li>&#x2026;is the user who usually created the file</li>
<li>&#x2026;can be changed/set by the <i>root</i> user  ('root' is the
all-powerful admin account)</li>
</ul>
</div>
</div>

<div id="outline-container-org151941c" class="outline-4">
<h4 id="org151941c">Group</h4>
<div class="outline-text-4" id="text-org151941c">
<p>
A group&#x2026;
</p>
<ul class="org-ul">
<li>&#x2026;is an identifier given to represent a collection of users.</li>
<li>&#x2026;provides a means for several users to access a common file/directory.</li>
</ul>
</div>
</div>

<div id="outline-container-org7ba8428" class="outline-4">
<h4 id="org7ba8428">Everyone Else</h4>
<div class="outline-text-4" id="text-org7ba8428">
<p>
Everyone else is those users who are not the owner and not in the file's
associated group.  This entity is commonly called <i>other</i>.
</p>
</div>
</div>

<div id="outline-container-orgcae5adc" class="outline-4">
<h4 id="orgcae5adc">Example</h4>
<div class="outline-text-4" id="text-orgcae5adc">
<pre class="example" id="org9e6933b">
$ ls -alF
total 20
drwx------  2 instructor   instructor   4096 Sep 27 16:14 ./
drwxrwxrwt 15 root   root  12288 Sep 27 16:14 ../
-rw-------  1 instructor cs2600     29 Sep 27 16:14 instructor.dat
$
</pre>

<p>
As you can see <span class="fname">instructor.dat</span> has two names associated with it in
columns 3 and 4.  Column 3 is the owner of the file, in this case
<i>instructor</i>.  Column 4 is the group ownership of the file, in this case
<i>cs2600</i>.
</p>

<p>
File ownership can only be changed by <i>root</i>, but the owner of the
file can change the group of a file <i>only if the owner is in the group being changed to</i>. 
</p>
</div>
</div>

<div id="outline-container-org4b45b5b" class="outline-4">
<h4 id="org4b45b5b">Changing Ownership</h4>
<div class="outline-text-4" id="text-org4b45b5b">
<p>
Changing ownership will not be discussed in the course.  However,
it is important to understand as move on to permissions.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:41:44"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org94ef668" class="outline-3">
<h3 id="org94ef668">File Permissions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org94ef668">
<p>
When doing a long directory listing&#x2026;
</p>

<pre class="example" id="orgfc160a9">
$ ls -alF
-rw-------  1 instructor instructor    29 Sep 27 16:14 instructor.dat
drwx------  2 instructor instructor  4096 Sep 27 16:17 stuff/
$
</pre>

<p>
&#x2026;the first "column" of information is the file's type and
<span class="term">permissions</span>.  Permissions <span class="termdef">describe who can do what with the directory listing entry</span>.
</p>

<p>
The type can be one of several options, for example:
</p>

<ul class="org-ul">
<li><span class="fname">-</span> : a normal file</li>
<li><span class="fname">d</span> : a directory</li>
<li><span class="fname">c</span> : a character device (ie. data stream devices like
video cameras or microphones)</li>
<li><span class="fname">b</span> : a block device (disks, USB drives, CDRoms, etc.)</li>
</ul>
</div>

<div id="outline-container-org3ebcd46" class="outline-4">
<h4 id="org3ebcd46">Permissions</h4>
<div class="outline-text-4" id="text-org3ebcd46">
<p>
The permissions are described by the 9 right-most positions, or "bits", and split
into 3 groups of 3.  Each triplet has the following meaning: 
</p>

<ul class="org-ul">
<li>Bit 1: READ - <span class="fname">r</span> if the entity can read the file,
<span class="fname">-</span> if not</li>
<li>Bit 2 : WRITE - <span class="fname">w</span> if the entity can write the file,
<span class="fname">-</span> if not</li>
<li>Bit 3 : EXECUTE - <span class="fname">x</span> if the entity can execute the
file, <span class="fname">-</span> if not 
<ul class="org-ul">
<li>Note: Directories can not be executed.  If the entry is a
directory, <span class="fname">x</span> means "searchable/enter-able",
i.e. the user can change into that directory or search it.
<span class="fname">-</span> means they can't.</li>
</ul></li>
</ul>

<p>
The first triplet is the permissions for the
(<b>U</b>)ser (owner) of the file,<br />
the middle triplet is the permissions for the (<b>G</b>)roup
owner (membership) of the file,<br />
and the last triplet is the permission for
(<b>O</b>)thers (everyone else) on the system.
</p>
</div>
</div>

<div id="outline-container-orge6c0849" class="outline-4">
<h4 id="orge6c0849">Expressing Permissions using Numbers</h4>
<div class="outline-text-4" id="text-orge6c0849">
<p>
Permissions for an entity (User, Group, or Other) is
usually expressed as an integer representing the 3 bits which
allow or deny access in the order of READ, WRITE, EXECUTE.
</p>

<p>
For example, to allow READ permissions (abbreviated as 'perms')
and nothing else: 
</p>
<ul class="org-ul">
<li>the first bit (READ) would be a 1</li>
<li>the second bit (WRITE) would be a 0</li>
<li>the third bit (EXECUTE) would also be a 0</li>
</ul>

<p>
The result would be '100' in binary, or 4 in decimal.  
</p>

<p>
To allow READ and EXECUTE only:
</p>
<ul class="org-ul">
<li>the first bit (READ) would be a 1</li>
<li>the second bit (WRITE) would be a 0</li>
<li>the third bit (EXECUTE) would be a 1</li>
</ul>

<p>
thus giving us 101 binary or 5 decimal.
</p>
</div>
</div>

<div id="outline-container-org4c69332" class="outline-4">
<h4 id="org4c69332">Octal Representation</h4>
<div class="outline-text-4" id="text-org4c69332">
<p>
An <i>octal</i> number is a number in the base-8 number system.  As
such, possible digits are 0-7.  Since 0-7 are also in the decimal
base-10 number system, octal numbers <b>look like</b> decimal numbers.
</p>

<p>
Since there are 3 entities to describe permissions for, the result is
3 integers (each integer representing 3 bits).  In Unix, the 3
integers are typically expressed as an Octal number (number in
base 8).  So, an octal number can be used to describe the
permissions for all 3 entities at once.
</p>

<p>
Example: For a given file, allow 
</p>
<ul class="org-ul">
<li>the owner to READ and WRITE the file,</li>
<li>the group should only be able to READ it, and</li>
<li>everyone else should have no permissions.</li>
</ul>

<p>
For the Owner, read and write (but not execute) would be 110
binary or 6 octal (and 6 decimal).<br />
For the Group, read only would be 100 binary or 4 octal (and 4 decimal).<br />
For Everyone Else, we want 000 binary or 0 octal (and 0 decimal).
</p>

<p>
So the octal number would be 640.
</p>

<p>
Again, while this looks like a decimal number as well, we say "octal" as
a means of communicating "the permission bits must be represented
by a number between 0 and 7 <i>only</i>".  In the decimal system, a
digit could include '8' and '9'.  However, permissions for a file
<b><i>must never</i></b> have digits outside the octal number system
(i.e. 0-7).
</p>

<p>
Additionally, we'll see this use elsewhere when we program in C.
</p>

<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2024-02-11 10:41:49"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org0573f6b" class="outline-3">
<h3 id="org0573f6b">Change Permissions with <span class="cmd">chmod</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org0573f6b">
<p>
To change a file's permissions, use the <span class="cmd">chmod</span> command.  <span class="cmd">chmod</span> takes
2 arguments, the octal perms and the file name (or glob): 
</p>
<pre class="example" id="org4c7d7de">
chmod OOO filename(s)
</pre>

<p>
For example:
</p>
<pre class="example" id="orgb576a0d">
$ ls -alF script.bash
-rw------- 1 instructor instructor 29 Sep 27 16:14 script.bash       # Notice user can read and write; nothing else
$ chmod 740 script.bash                                  # User=7==111; Group=4==100; Other=0==000
$ ls -alF script.bash
-rwxr----- 1 instructor instructor 29 Sep 27 16:14 script.bash       # Now, user can execute and group can read.
$
</pre>

<p>
In this example, 
</p>
<ul class="org-ul">
<li>we wanted the owner to READ, WRITE, and EXECUTE the file <span class="fname">script.bash</span></li>
<li>the group, we only allowed READ permissions, and</li>
<li>everyone else on the system isn't allowed to do anything</li>
</ul>

<p>
For the Owner, we used 111 or 7.<br />
For the Group, we used 100 or 4.<br />
For Everyone Else, we used 000 or 0.
</p>

<p>
So, 740 was provided to <span class="cmd">chmod</span>
</p>
</div>

<div id="outline-container-orgb2109ff" class="outline-4">
<h4 id="orgb2109ff"><span class="cmd">chmod</span> - Alternative Notation</h4>
<div class="outline-text-4" id="text-orgb2109ff">
<p>
Instead of an octal number, <span class="cmd">chmod</span> also allows a
comma delimited symbolic notation:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Symbol</th>
<th scope="col" class="org-left">Definition</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">u</td>
<td class="org-left">User</td>
</tr>

<tr>
<td class="org-left">g</td>
<td class="org-left">Group</td>
</tr>

<tr>
<td class="org-left">o</td>
<td class="org-left">Other</td>
</tr>

<tr>
<td class="org-left">r</td>
<td class="org-left">Read Perm</td>
</tr>

<tr>
<td class="org-left">w</td>
<td class="org-left">Write Perm</td>
</tr>

<tr>
<td class="org-left">x</td>
<td class="org-left">Execute Perm</td>
</tr>

<tr>
<td class="org-left">+</td>
<td class="org-left">Add permission</td>
</tr>

<tr>
<td class="org-left">-</td>
<td class="org-left">Remove permission</td>
</tr>

<tr>
<td class="org-left">=</td>
<td class="org-left">Assign THIS permission (if empty, all are removed)</td>
</tr>
</tbody>
</table>

<p>
For example, add execute permission for the user and remove it for group and
other:
</p>
<pre class="example" id="org81ad801">
$ chmod u+x,g=,o= file.bash               # Notice 'g' and 'o' use blank after =
$
</pre>

<p>
If permissions are the same, you can combine the 'who'
portion:
</p>

<pre class="example" id="org1ef3bbf">
$ chmod u+x,go= file.bash     # 'g' and 'o' were identical, so we can combine them
$
</pre>

<p>
Another example, set the user to 'rw' with no 'x' and leave the
others alone.  Sometimes, it's easier to just call out all the
permissions for an entity:
</p>

<pre class="example" id="orgb1b4f4f">
$ chmod u=rw file.bash
</pre>

<p>
The file may have had 'r' already, or 'w', or 'x'&#x2026;we don't
know.  So rather than giving <span class="cmd">chmod</span> the "deltas", we
just call it out.  
</p>

<p>
This is the main reason why many users often just use the octal
numbers&#x2026;they don't <i>change permission</i> they just <i>set
permissions</i>. 
</p>
</div>
</div>
</div>
<div id="outline-container-org6260c97" class="outline-3">
<h3 id="org6260c97">Day 8 Summary<a id="org1a17fac"></a></h3>
<div class="outline-text-3" id="text-org6260c97">
</div>
<div id="outline-container-orgfd01038" class="outline-4">
<h4 id="orgfd01038">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orgfd01038">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org8d67217" class="outline-4">
<h4 id="org8d67217">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org8d67217">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc72767f" class="outline-2">
<h2 id="orgc72767f">Day 9 - Mon, September 22, 2025<a id="org3c0c81a"></a></h2>
<div class="outline-text-2" id="text-orgc72767f">
</div>
<div id="outline-container-org23135ae" class="outline-3">
<h3 id="org23135ae">Day 9 Introduction<a id="orga1e7d2f"></a></h3>
<div class="outline-text-3" id="text-org23135ae">
</div>
<div id="outline-container-orge1b1dd7" class="outline-4">
<h4 id="orge1b1dd7">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orge1b1dd7">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org7f99e21" class="outline-3">
<h3 id="org7f99e21">Print to the Screen - <span class="cmd">echo</span><a id="org261ba38"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org7f99e21">
<p>
Often, in our command lines/scripts, we'll want to print messages
to the user or provide output to another command.
Just like some form of 'print' statement in other languages, Unix
uses the <span class="cmd">echo</span> command.
</p>

<p>
<span class="cmd">echo</span> takes one or more strings to output:
</p>

<pre class="example" id="orgf26aff0">
$ echo Hello World
Hello World
$ echo Hello    World
Hello World
$
</pre>

<p>
As you can see in the example above, <span class="cmd">echo</span> took 'Hello'
and 'World' as two separate strings, not 1 with several spaces.
</p>

<p>
To take something entirely as a string, surround it with single or double
quotes, as appropriate:
</p>

<pre class="example" id="org4d77558">
$ echo Hello World
Hello World
$ echo "Hello    World"
Hello    World
$
</pre>

<p>
Notice, <span class="cmd">echo</span> displays what we want and then puts the
cursor to the beginning of the next line&#x2026;where our prompt
continues, i.e. it added a newline character <span class="underline">automatically</span>.
</p>
</div>

<div id="outline-container-orga6b430d" class="outline-4">
<h4 id="orga6b430d">Do Not Print <span class="cmd">\n</span> - <span class="cmd">-n</span></h4>
<div class="outline-text-4" id="text-orga6b430d">
<p>
To suppress the printing of the newline character, use the
<span class="cmd">-n</span> switch:
</p>

<pre class="example" id="orgf7af78e">
$ echo "Hello World"
Hello World
$ echo -n "Hello World"
Hello World$
</pre>

<p>
As you can see, our prompt is now immediately after
<span class="cmd">echo</span>'s output.
</p>
</div>
</div>

<div id="outline-container-org6ec8348" class="outline-4">
<h4 id="org6ec8348">Interpret Escapes - <span class="cmd">-e</span></h4>
<div class="outline-text-4" id="text-org6ec8348">
<p>
Just as we may want to suppress newline characters, sometimes
we'll want to add them (or other "escaped" characters).  As in other languages, we <i>could</i> use the
<span class="cmd">\n</span> characters in our string.  
</p>

<p>
However:
</p>
<pre class="example" id="org06270f4">
$ echo "Hello World"
Hello World
$ echo "Hello\nWorld"
Hello\nWorld
$
</pre>

<p>
However, <span class="cmd">echo</span> does not interpret the <span class="cmd">\n</span> by default.
We must tell <span class="cmd">echo</span> to interpret escaped characters via
<span class="cmd">-e</span>: 
</p>

<pre class="example" id="orge8321ab">
$ echo "Hello\nWorld"
Hello\nWorld
$ echo -e "Hello\nWorld"
Hello
World
$
</pre>

<p>
And yes, you can combine them:
</p>

<pre class="example" id="org72c6078">
$ echo "Hello World"
Hello World"
$ echo -ne "Hello\nWorld"
Hello
World$
</pre>

<p>
Thus, you can put yourself in total control:
</p>

<pre class="example" id="org82863e6">
$ echo "Hello World"
Hello World
$ echo -e "Hello\nWorld"
Hello
World
$ echo -ne "Hello\nWorld\n"
Hello
World
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org8044c93" class="outline-3">
<h3 id="org8044c93">Environment Variables&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8044c93">
<p>
<i>Environment Variables</i> are variables within the Bash shell which
can provide useful information.  
</p>

<p>
These variables can be created, set, and maintained by Bash, and/or
other variables by us.
</p>

<p>
Environment variables may be upper or lower case (or mixed) but
must start with a letter and not contain spaces&#x2026;the common rules
to any identifier you're used to.
</p>
</div>
<div id="outline-container-orgd832cf8" class="outline-4">
<h4 id="orgd832cf8">Setting an Environment Variable</h4>
<div class="outline-text-4" id="text-orgd832cf8">
<p>
To set a variable, just use the '=' with the value and no spaces:
</p>

<pre class="example" id="org4f0813f">
$ x=5
$ NAME="Bob Dorf"
</pre>
</div>
</div>

<div id="outline-container-org28bfe33" class="outline-4">
<h4 id="org28bfe33">Accessing an Environment Variable's Value</h4>
<div class="outline-text-4" id="text-org28bfe33">
<p>
To access the variable, use its identifier preceded with a '$'.
</p>

<pre class="example" id="orge42fed2">
$ echo $x
5
$ echo X is $x
X is 5
$

$ echo Your name is $NAME
Your name is Bob Dorf
$
</pre>
</div>
</div>

<div id="outline-container-orgc74d49e" class="outline-4">
<h4 id="orgc74d49e"><span class="cmd">echo</span> with Variables</h4>
<div class="outline-text-4" id="text-orgc74d49e">
<p>
When using variables with <span class="cmd">echo</span>, a few things to
consider:
</p>

<ul class="org-ul">
<li><span class="cmd">echo</span> can take multiple items on a single command line
and it will separate the output with spaces.
<ul class="org-ul">
<li>To output a single item using <i>interpolation</i>, use double quotes.</li>
<li>To output a single item without <i>interpolation</i>, use single quotes.</li>
</ul></li>
<li>To display a '$', we need single quotes or '\' to escape the quote:
<ul class="org-ul">
<li>We could use double quotes, but would need to escape the
'$' (\$).</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org54ea498" class="outline-4">
<h4 id="org54ea498"><span class="underline">Bash</span> Provided Variables</h4>
<div class="outline-text-4" id="text-org54ea498">
<p>
The following environment variables are provided by the Bash shell.  We can use them and
in some cases, modify them.
</p>
</div>
</div>

<div id="outline-container-org0eba87c" class="outline-4">
<h4 id="org0eba87c"><span class="cmd">SHELL</span></h4>
<div class="outline-text-4" id="text-org0eba87c">
<p>
The <span class="cmd">SHELL</span> variable holds the user's currently set/used
shell:
</p>

<pre class="example" id="org4cee5c3">
$ echo $SHELL
/bin/bash
$
</pre>
</div>
</div>

<div id="outline-container-org54ffaa6" class="outline-4">
<h4 id="org54ffaa6"><span class="cmd">USER</span></h4>
<div class="outline-text-4" id="text-org54ffaa6">
<p>
<span class="cmd">USER</span> returns the username of the currently logged in
user.  This is useful when creating scripts which may be used by
several users.
</p>

<pre class="example" id="orga5a7db6">
$ echo $USER
bdorf
$
</pre>
</div>
</div>

<div id="outline-container-orgda3f1d7" class="outline-4">
<h4 id="orgda3f1d7"><span class="cmd">HOME</span></h4>
<div class="outline-text-4" id="text-orgda3f1d7">
<p>
This variable simply holds the directory which is the currently
logged in user's home directory (remember, commonly in
/home/USERNAME).
</p>

<pre class="example" id="org950de51">
$ echo $USER
/home/bdorf
$
</pre>
</div>
</div>

<div id="outline-container-org77b0e3a" class="outline-4">
<h4 id="org77b0e3a"><span class="cmd">HOSTNAME</span></h4>
<div class="outline-text-4" id="text-org77b0e3a">
<p>
Returns the hostname of the current system.
</p>
</div>
</div>

<div id="outline-container-org6b59f16" class="outline-4">
<h4 id="org6b59f16"><span class="cmd">HOSTTYPE</span>, <span class="cmd">MACHTYPE</span>, <span class="cmd">OSTYPE</span></h4>
<div class="outline-text-4" id="text-org6b59f16">
<p>
Returns the architecure of the current host.
</p>

<pre class="example" id="orgaef05e1">
$ echo $HOSTTYPE
x86_64
$ echo $MACHTYPE
x86_64-pc-linux-gnu
$ echo $OSTYPE
linux-gnu
$
</pre>
</div>
</div>

<div id="outline-container-org83910d4" class="outline-4">
<h4 id="org83910d4"><span class="cmd">OLDPWD</span></h4>
<div class="outline-text-4" id="text-org83910d4">
<p>
Holds the previous directory you were in.  Synonymous to <span class="cmd">cd -</span>.
</p>
</div>
</div>

<div id="outline-container-orga648f0c" class="outline-4">
<h4 id="orga648f0c"><span class="cmd">RANDOM</span></h4>
<div class="outline-text-4" id="text-orga648f0c">
<p>
When accessed, it will return a random number between 0
and 32767. 
</p>

<pre class="example" id="orgfd49dcc">
$ echo $RANDOM
28101
$ echo $RANDOM
21519
$ echo $RANDOM
19458
</pre>
</div>
</div>
</div>
<div id="outline-container-org264b99e" class="outline-3">
<h3 id="org264b99e">Environment Variables WE Can/Should Set and Maintain&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org264b99e">
</div>
<div id="outline-container-orgea5469e" class="outline-4">
<h4 id="orgea5469e"><span class="cmd">PATH</span></h4>
<div class="outline-text-4" id="text-orgea5469e">
<p>
<span class="cmd">PATH</span> is a variable which holds the list of directories
(colon ':' delimited) your shell will search when trying to locate an
executable command. 
</p>

<pre class="example" id="orgf3e06ad">
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
$
</pre>
<p>
(The actual list of directories may vary on your system.)
</p>

<p>
So if I type the command <span class="cmd">dothis</span>:
</p>
<pre class="example" id="org225539f">
$ dothis
</pre>

<p>
The shell will look in these directories, in order, and use the first
occurance of <span class="cmd">dothis</span> it finds:
</p>
<ul class="org-ul">
<li>/usr/local/bin</li>
<li>/usr/bin</li>
<li>/usr/local/games</li>
<li>/usr/games</li>
</ul>

<p>
<span class="cmd">PATH</span> is commonly modified by users to include custom
directories such as <span class="fname">/home/username/bin</span> where custom made
scripts and programs exist.
</p>
</div>
</div>


<div id="outline-container-org7c8ed21" class="outline-4">
<h4 id="org7c8ed21"><span class="cmd">EDITOR</span></h4>
<div class="outline-text-4" id="text-org7c8ed21">
<p>
Some commands launch your favorite editor.  The editor which is
launched is typically set by this variable.
</p>

<p>
Full disclosure: Typically when you set this one you'll need the
keyword <span class="cmd">export</span>:
</p>

<pre class="example" id="org0b1f73c">
$ export EDITOR=emacs
</pre>

<p>
We won't go into why for this class and <span class="cmd">export</span> won't be tested on,
but as you explore you may find you need it.
</p>
</div>
</div>

<div id="outline-container-orgc95c7fe" class="outline-4">
<h4 id="orgc95c7fe"><span class="cmd">PS1</span></h4>
<div class="outline-text-4" id="text-orgc95c7fe">
<p>
<span class="cmd">PS1</span> is a very special environment variable for the Bash
shell.  It holds the characters and character codes which make up
your Bash shell command prompt:
</p>

<pre class="example" id="org5055439">
Next command? echo $PS1
Next command?
Next command?
</pre>

<p>
We can change it by assigning to <span class="cmd">PS1</span> what we want:
</p>
<pre class="example" id="org78bd728">
$ PS1='&gt; '
&gt; 
&gt; echo $PS1
&gt;
&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb3ea737" class="outline-3">
<h3 id="orgb3ea737">Displaying the Date - <span class="cmd">date</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb3ea737">
<p>
<span class="cmd">date</span> is used to show the current date and/or time in a
variety of formats.
</p>

<p>
Here is the default with no format specified:
</p>

<pre class="example" id="org8457f29">
$ date
Thu 29 Aug 2019 03:34:59 PM PDT
$ 
</pre>
</div>

<div id="outline-container-org029142b" class="outline-4">
<h4 id="org029142b">Formats</h4>
<div class="outline-text-4" id="text-org029142b">
<p>
Telling <span class="cmd">date</span> to display the information using a
specific format is simply a matter of using a <span class="fname">+</span> followed by
one or more format symbols.  Format symbols are shown below and
need to be preceded by a percent (%) sign:
</p>

<p>
For example, to show what day today is:
</p>
<pre class="example" id="orgff65631">
$ date +%A
Thursday
$
</pre>

<p>
or, to show today's date as you may normally write it on a piece of
paper:
</p>
<pre class="example" id="org306bb4f">
date +'%B %d, %Y'
August 29, 2019
$ 
</pre>

<p>
Notice:
</p>

<ul class="org-ul">
<li>You may use more than one formatting symbol</li>
<li>If you need spaces or other punctuation, enclose the format
string in quotes
<ul class="org-ul">
<li>Single quotes are best for now</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org2ed7e65" class="outline-4">
<h4 id="org2ed7e65">Formatting Symbols</h4>
<div class="outline-text-4" id="text-org2ed7e65">
<p>
There is a large number for formatting symbols but here are some
of the most useful ones (you are <span class="underline">not</span> required to memorize these):
</p>

<pre class="example" id="orgb3f4053">
%%     a literal %
%a     locale's abbreviated weekday name (e.g., Sun)
%A     locale's full weekday name (e.g., Sunday)
%b     locale's abbreviated month name (e.g., Jan)
%B     locale's full month name (e.g., January)
%d     day of month (e.g., 01)
%e     day of month, space padded; same as %_d
%H     hour (00..23)
%I     hour (01..12)
%j     day of year (001..366)
%k     hour, space padded ( 0..23); same as %_H
%l     hour, space padded ( 1..12); same as %_I
%m     month (01..12)
%M     minute (00..59)
%n     a newline
%p     locale's equivalent of either AM or PM; blank if not known
%P     like %p, but lower case
%S     second (00..60)
%t     a tab
%u     day of week (1..7); 1 is Monday
%U     week number of year, with Sunday as first day of week (00..53)
%w     day of week (0..6); 0 is Sunday
%y     last two digits of year (00..99)
%Y     year
%Z     alphabetic time zone abbreviation (e.g., EDT)
</pre>
</div>
</div>

<div id="outline-container-org5232f1f" class="outline-4">
<h4 id="org5232f1f">Example</h4>
<div class="outline-text-4" id="text-org5232f1f">
<p>
Write the date format, such that, if it were the name of a file,
sorting the file names would result in a chronological list:
</p>

<pre class="example" id="org356c424">
$ date +'%Y%m%d-%H%M'
20190829-2044
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org2217232" class="outline-3">
<h3 id="org2217232">Scripts<a id="orgccec174"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2217232">
<p>
Scripts are just a collection of commands all put together in
a file.  This file is called a <i>script</i> because it is <i>interpreted</i>
and doesn't require compilation.
</p>

<p>
Note: The series of commands in the file may be called a <i>Bash script</i> or <i>Csh script</i> or <i>Tcsh
script</i>, etc. depending on the shell-specificity.  For our class,
we deal primarily with Bash scripts and thus Bash syntax.
</p>

<p>
The general format of a script is as follows:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Comment - ignored</span>
<span style="color: #b0c4de;">cd</span> /proc           <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Command</span>
                  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Blank lines are ignored</span>
ls -alF           <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">More commands</span>
</pre>
</div>

<p>
Scripts can include anything you can type on the command line,
including branching, looping, and other such
programming constructs&#x2026;none of which we've learned yet (due to
time, we will only be learning a few).
</p>
</div>
<div id="outline-container-orgc42baaa" class="outline-4">
<h4 id="orgc42baaa">How to Create a Script</h4>
<div class="outline-text-4" id="text-orgc42baaa">
<p>
To create a script, simply launch a text editor (<span class="cmd">vi</span>,
<span class="cmd">emacs</span>, <span class="cmd">nano</span>, etc.) and start coding.  When
done, save your work.
</p>
</div>
</div>
<div id="outline-container-orgcab6fc3" class="outline-4">
<h4 id="orgcab6fc3">Bash Script File Names</h4>
<div class="outline-text-4" id="text-orgcab6fc3">
<p>
File names in Unix do <b>not</b> require an extension.  However, it is
common practice, especially when first starting out, to do so.
</p>

<p>
As such, when you save your work, consider adding a
<span class="fname">.bash</span> extension, like <span class="cmd">myscript.bash</span>.  
</p>

<p>
NOTE: You may find Bash scripts with only a <span class="cmd">.sh</span>
extension.  This is common among advanced users, but not
really correct.  <span class="fname">.sh</span> means the file is a "shell script" but
more accurately, an <span class="cmd">sh</span> or Bourne Shell, script.  Bash,
is the "Bourne Again Shell"&#x2026;a newer version of <span class="cmd">sh</span>
with many new features.  So the modern convention is to use
<span class="fname">.bash</span> for Bash scripts and <span class="fname">.sh</span> for the
older "sh scripts".  However, again, the extension is merely for
our (human) consumption. To the Unix Operating System, a file is a file
regardless of its name and/or extension.
</p>
</div>
</div>
<div id="outline-container-org587e873" class="outline-4">
<h4 id="org587e873">Executing (Running) Scripts Directly via Bash</h4>
<div class="outline-text-4" id="text-org587e873">
<p>
To execute your Bash script, simply give your script file name to
the <span class="cmd">bash</span> command:
</p>

<pre class="example" id="orgdc7e243">
$ bash myscript.bash
$
</pre>
</div>
</div>
<div id="outline-container-org3da9f48" class="outline-4">
<h4 id="org3da9f48">Executing (Running) Scripts Directly</h4>
<div class="outline-text-4" id="text-org3da9f48">
<p>
Instead of 
</p>

<pre class="example" id="org19438a0">
$ bash myscript.bash
{magic}
$
</pre>

<p>
If we put <span class="cmd">#!/bin/bash</span> as the <b>first line</b>
of our scripts, we can set the script to be executable for the user
(the owner) and then we no longer need to call "bash" explicitly: 
</p>

<pre class="example" id="org84f9643">
$ cat myscript.bash
#!/bin/bash
echo 'Woohoo! No more "bash myscript.bash"!!'
$
$ ls -alF myscript.bash
-rw------- 1 instructor instructor 29 Sep 27 16:14 script.bash
$
$ chmod 700 myscript.bash                               # Turn on eXecute bit for user
$
$ ls -alF myscript.bash
-rwx------ 1 instructor instructor 29 Sep 27 16:14 script.bash
$
$ ./myscript.bash                                       # Can now leave off 'bash'; "./" needed!
{magic}
$
</pre>

<p>
Notice we only need to provide the name (and possibly the path) of
our script to execute it.  When we do, Bash will now know how to
run a '.bash' file, so it looks at the first line of the script.  If the first
line starts with <span class="cmd">#!</span>, it takes the rest as the tool to
use.  In this case <span class="cmd">/bin/bash</span>.
</p>

<p>
NOTE #1: Since scripts are interpreted, in order to execute, they
must be <i>readable</i> <b>and</b> <i>executable</i>.  To edit them, we need the
<i>write</i> bit set.
</p>

<p>
NOTE #2: The <span class="cmd">#!</span> line is used on all kinds of scripting
languages: Bash, Perl, Python, sh, Tcl, etc.  If <i>Bash</i> does not
find the <span class="cmd">#!</span>, it will <i>assume</i> it is a Bash script and
use Bash to interpret it.  So if you don't use this line in your
Perl scripts, for example, they'll fail with Bash errors.
</p>
</div>
</div>
</div>
<div id="outline-container-org6427c6c" class="outline-3">
<h3 id="org6427c6c">Day 9 Summary<a id="orga99b584"></a></h3>
<div class="outline-text-3" id="text-org6427c6c">
</div>
<div id="outline-container-org076f592" class="outline-4">
<h4 id="org076f592">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org076f592">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgc773c4d" class="outline-4">
<h4 id="orgc773c4d">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgc773c4d">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd6c41a7" class="outline-2">
<h2 id="orgd6c41a7">Day 10 - Wed, September 24, 2025<a id="org24a1080"></a></h2>
<div class="outline-text-2" id="text-orgd6c41a7">
</div>
<div id="outline-container-orgd86c844" class="outline-3">
<h3 id="orgd86c844">Day 10 Introduction<a id="orgcdbec8e"></a></h3>
<div class="outline-text-3" id="text-orgd86c844">
</div>
<div id="outline-container-org215fb7f" class="outline-4">
<h4 id="org215fb7f">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org215fb7f">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgb60f3a5" class="outline-3">
<h3 id="orgb60f3a5">Variables in Scripts<a id="org6bb6e4e"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb60f3a5">
<p>
As with any programming language, we can utilize variables in
Bash scripts (basically, they're just Environment variables).  In
fact, since Bash scripts are just a collection of commands we type
on the command line, we can use (environment) variables on the
command line in the same fashion. 
</p>
</div>
<div id="outline-container-org536f2c7" class="outline-4">
<h4 id="org536f2c7">Variable Names</h4>
<div class="outline-text-4" id="text-org536f2c7">
<p>
The rules for variables names in Bash are similar to those of
other languages, so stick with what you know and you'll be fine.
</p>

<p>
For example
</p>
<ul class="org-ul">
<li>sum</li>
<li>SUM</li>
<li>Sum5</li>
<li>user_name</li>
<li>PASSWORD</li>
</ul>

<p>
Almost everything on Unix is case-<i>sensitive</i>.  So be sure you
keep track of upper vs lower case in your variable identifiers!
</p>

<p>
Commonly, variables in Bash will all be upper-case (like the
environment variables we've seen so far) so they are
easily distinguished from commands (which are almost always
lower-case).  However, this is not a rule.
</p>
</div>
</div>

<div id="outline-container-orgf6a5b6a" class="outline-4">
<h4 id="orgf6a5b6a">Assigning Variables</h4>
<div class="outline-text-4" id="text-orgf6a5b6a">
<p>
To assign a variable, simply type the identifier, follow by an
equal sign '=', then follow up with the value.  Strings with spaces
or special characters should be enclosed in single or double
quotes.
</p>

<p>
Examples:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">SUM</span>=0   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice no spaces around '='.  While in other languages it is good for readibility,</span>
        <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">Bash uses spaces as delimiters on the command line.  We need to avoid them during</span>
        <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">variable assignment.</span>
<span style="color: #eedd82;">CMD</span>=/usr/bin/index_db
<span style="color: #eedd82;">PathToFile</span>=<span style="color: #ffa07a;">"/home/username/my data/db.db"</span>                       <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Need quotes because of the space</span>
<span style="color: #eedd82;">GREETING</span>=<span style="color: #ffa07a;">'!!!Hello.  Welcome to the Database Indexer Helper!!!'</span> <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Need quotes because of spaces and '!'</span>
</pre>
</div>

<p>
NOTE #1 - <span class="cmd">PathToFile</span> required quotes because of the
space in the file path.  In this case, single or double quotes
would have been fine.
</p>

<p>
NOTE #2 - <span class="cmd">GREETING</span> required single quotes because our
greeting contained an exclamation point.  There are non-space
characters which have special meaning to Bash&#x2026;even within double
quotes - the '!' is one of them!  So to have those special
meanings effectively ignored, we use single quotes.  Everything
inside single quotes are left alone.   
</p>
</div>
</div>
<div id="outline-container-org6f35020" class="outline-4">
<h4 id="org6f35020">Using Variables</h4>
<div class="outline-text-4" id="text-org6f35020">
<p>
When it's time to use a variable, we simply type its name <i><b>BUT</b></i>
we must precede it with a dollar sign '$':
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">PATH2CFG</span>=/path/to/myapp
<span style="color: #eedd82;">FNAME</span>=myapp.cfg

<span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">PATH2CFG</span>
ls -alF $<span style="color: #eedd82;">FNAME</span>
</pre>
</div>

<p>
What Bash actually performs is a <span class="cmd">cd</span> to the contents of
<span class="cmd">PATH2CFG</span>, namely <span class="fname">/path/to/myapp</span>.
</p>

<p>
Then, Bash performs an <span class="cmd">ls -alF</span> on
<span class="fname">myapp.cfg</span>.
</p>

<p>
The replacement of a variable with its content is called <i>interpolation</i>.
</p>
</div>
<div id="outline-container-orgbb569da" class="outline-5">
<h5 id="orgbb569da">Bash Script Execution Environments</h5>
<div class="outline-text-5" id="text-orgbb569da">
<p>
When you run a Bash script, it runs within its own
"environment".  Any <span class="cmd">cd</span>s you perform, will not "stick"
when the script is executed.
</p>

<p>
For example, consider this script named <span class="fname">myscript.bash</span> which resides in <span class="fname">~</span>:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">cd</span> /tmp
touch newfile.txt
ls newfile.txt
</pre>
</div>
<p>
and now consider the following:
</p>

<pre class="example" id="orgade728c">
$ pwd
/home/bdorf
$ bash myscript.bash
newfile.txt
$ pwd
/home/bdorf
$ ls newfile.txt
ls: cannot access 'newfile.txt': No such file or directory
$ ls /tmp/newfile.txt
newfile.txt
$
</pre>

<p>
Notice the script changed into <span class="fname">/tmp</span> but never
returned.  However, when the script ended, we were still
in our home directory.
</p>
</div>
</div>
</div>

<div id="outline-container-org173133b" class="outline-4">
<h4 id="org173133b">Interpolation: Single vs Double Quotes</h4>
<div class="outline-text-4" id="text-org173133b">
<p>
Interpolation is <i><b>NOT performed</b></i> inside <span class="underline">single</span> quotes, however,
interpolation <i><b>IS performed</b></i> inside <span class="underline">double</span> quotes!!
</p>

<p>
For example:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">PATH2CFG</span>=<span style="color: #ffa07a;">"/path/to/my app"</span>
<span style="color: #eedd82;">FNAME</span>=myapp.cfg

<span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">PATH2CFG</span>
ls -alF $<span style="color: #eedd82;">FNAME</span>
</pre>
</div>

<p>
This example will attempt to perform the following <span class="cmd">cd</span>:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">cd</span> /path/to/my app
</pre>
</div>

<p>
Because of the space, Bash considers "app" a second parameter to
<span class="cmd">cd</span>, not part of the first.  So even though we used
double quotes when assigning the variable, we still need to be
cognizant of how Bash will interpolate.
</p>

<p>
To solve this issue, let's try single quotes:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">cd</span> <span style="color: #ffa07a;">'$PATH2CFG'</span>
</pre>
</div>

<p>
Unfortunately, this won't work either.  Remember, interpolation is
<i><b>NOT</b></i> performed inside single quotes.  So Bash is going to try
and <span class="cmd">cd</span>, literally, into a directory called
<span class="fname">$PATH2CFG</span>&#x2026;not the contents of our variable.
</p>

<p>
To maintain the space within our path correctly, we need to
interpolate the variable within double quotes:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">cd</span> <span style="color: #ffa07a;">"$PATH2CFG"</span>
</pre>
</div>

<p>
This will result in our variable being replaced with its contents,
but keeping the path entirely inside double quotes:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">cd</span> <span style="color: #ffa07a;">"/path/to/my app"</span>
</pre>
</div>

<p>
As such, the proper content of the variable is now passed to
<span class="cmd">cd</span>. 
</p>
</div>
</div>
<div id="outline-container-orgc0239e2" class="outline-4">
<h4 id="orgc0239e2">Example 1 Revisited</h4>
<div class="outline-text-4" id="text-orgc0239e2">
<p>
Remember the initial example for variables:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">SUM</span>=0   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice no spaces around '='.  While in other languages it is good for readibility,</span>
        <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">Bash uses spaces as delimiters on the command line, so we avoid them during</span>
        <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">variable assignment.</span>
<span style="color: #eedd82;">CMD</span>=/usr/bin/index_db
<span style="color: #eedd82;">PathToFile</span>=<span style="color: #ffa07a;">"/home/username/my data/db.db"</span>
<span style="color: #eedd82;">GREETING</span>=<span style="color: #ffa07a;">'!!!Hello.  Welcome to the Database Indexer Helper!!!'</span>
</pre>
</div>

<p>
Take another look at <span class="cmd">GREETING</span>.  Why do you think we
needed single quotes and not double quotes?
</p>

<p>
While we're not interpolating <i>variables</i>, there are other
characters which serve special purposes for Bash.  '!' is one of
them.  Inside double quotes, '!' can do weird things:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ <span style="color: #eedd82;">X</span>=<span style="color: #ffa07a;">"!!!Hello World!!!"</span>
-bash: !Hello: event not found
$ echo $<span style="color: #eedd82;">X</span>
<span style="color: #b0c4de;">echo</span> Worldecho Hello! World!
$ 
</pre>
</div>

<p>
We won't go into all the possibilities, but do remember: if
something is going weird with your code, consider changing double
quotes to single quotes as a first step in debugging.
</p>
</div>
</div>
</div>
<div id="outline-container-orgec338e0" class="outline-3">
<h3 id="orgec338e0">Command Substitution<a id="org7192154"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgec338e0">
<p>
Now that we have variables, let's assign more than just basic
values.
</p>

<p>
With <i>command substitution</i>, we can execute a command and have the
results assigned to a variable.  This provides a lot of utility
when dealing with scripts.  Especially scripts which are meant to
work with hundreds of files or megabytes of data.
</p>
</div>

<div id="outline-container-org96eac99" class="outline-4">
<h4 id="org96eac99">Method 1 : Backticks - <span class="cmd">``</span></h4>
<div class="outline-text-4" id="text-org96eac99">
<p>
The first method is a general method which works in many/most
shells.  Simply surround your command with backticks:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ <span style="color: #eedd82;">today</span>=<span style="color: #fa8072;">`date`</span>
$ echo <span style="color: #ffa07a;">"Today is $today"</span>
Today is Thu 12 Sep 2019 01:17:01 PM PDT
$ 
</pre>
</div>
</div>
</div>


<div id="outline-container-org4da32ee" class="outline-4">
<h4 id="org4da32ee">Method 2 : POSIX Standard - <span class="cmd">$( )</span></h4>
<div class="outline-text-4" id="text-org4da32ee">
<p>
The new POSIX standard is to use parens prefixed with a dollar
sign:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ <span style="color: #eedd82;">today</span>=$(<span style="color: #fa8072;">date</span>)
$ echo <span style="color: #ffa07a;">"Today is $today"</span>
Today is Thu 12 Sep 2019 01:17:01 PM PDT
$ 
</pre>
</div>
</div>
</div>

<div id="outline-container-org0d7a277" class="outline-4">
<h4 id="org0d7a277">Example</h4>
<div class="outline-text-4" id="text-org0d7a277">
<p>
Write a script, a new <span class="cmd">ls</span>, to display some boilerplate
before the list of files:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Script: ls2</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Date      : $(</span><span style="color: #fa8072;">date</span><span style="color: #ffa07a;">)"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Directory : $(</span><span style="color: #fa8072;">pwd</span><span style="color: #ffa07a;">)"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">""</span>
ls -alF
</pre>
</div>

<p>
Output:
</p>

<pre class="example" id="org1445100">
$ ./ls2
Date      : Thu 12 Sep 2019 01:21:36 PM PDT
Directory : /home/instructor/workspace/2600

total 32
drwx------ 2 instructor instructor 4096 Sep 12 13:21 ./
drwx------ 4 instructor instructor 4096 Sep  5 11:15 ../
-rw------- 1 instructor instructor    6 Sep 12 13:21 file1.txt
-rw------- 1 instructor instructor    6 Sep 12 13:21 file2.txt
-rw------- 1 instructor instructor    5 Sep 12 13:21 file3.txt
-rw------- 1 instructor instructor    6 Sep 12 13:21 file4.txt
-rw------- 1 instructor instructor    5 Sep 12 13:21 file5.txt
-rwx------ 1 instructor instructor  105 Sep 12 13:21 ls2*
$ 
</pre>
</div>
</div>
</div>
<div id="outline-container-orge067d4d" class="outline-3">
<h3 id="orge067d4d">Positional Parameters<a id="org7670748"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orge067d4d">
<p>
When calling scripts we often want to pass data to the script on
the command line, like a file to work on:
</p>

<pre class="example" id="org6c3bf5d">
$ bash myscript.bash somefile.java  #  or:    ./myscript.bash somefile.java    if you set 'x' perms
</pre>

<p>
Within the script, we access these paramters using <span class="term">positional parameters</span>.   
</p>

<p>
In our script code, these positional parameters are referred to as
variables $1 through $9.  $0 is the script name (including
path if any) we executed.
</p>

<p>
Consider a script called <span class="fname">myscript.bash</span>:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"\$0 : $0"</span>     <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice we use \$ to avoid the first $0 from being interpolated.</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"\$1 : $1"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"\$2 : $2"</span>
</pre>
</div>

<p>
and now run some tests:
</p>

<pre class="example" id="orgd45c6c2">
$ bash myscript
$0: myscript
$1:
$2:
$

$ /path/to/myscript somevalue            # assuming 'x' perm is set
$0: /path/to/myscript
$1: somevalue
$2:
$

$ ./myscript filename .mp4
$0: ./myscript
$1: filename
$2: .mp4
$ 
</pre>

<p>
Once we have the parameter(s), we can then act on them like any other variables:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Contents of $1:"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"==========================================="</span>
cat -n $<span style="color: #eedd82;">1</span>
</pre>
</div>

<pre class="example" id="org5350676">
$ ./myscript file.txt
Contents of file.txt:
=====================================
     1  Hello World
$
</pre>

<p>
Here's another example, this time using multiple positional
parameters:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Combined listing of : $1 and $2:"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"==========================================="</span>
cat -n $<span style="color: #eedd82;">1</span> $<span style="color: #eedd82;">2</span>
</pre>
</div>

<pre class="example" id="org94d6731">
$ ./combine.bash file1.txt file2.txt
Combined listing of : file1.txt and file2.txt:
==================================
     1  File 1, Line 1
     2  File 1, Line 2
     3  File 1, Line 3
     4  File 2, Line 1
     5  File 2, Line 2
     6  File 2, Line 3
$
</pre>

<p>
In the previous example, the directory only had
<span class="fname">file1.txt</span> and <span class="fname">file2.txt</span>, so what happens if
we use wildcards?
</p>

<pre class="example" id="orgc379fec">
$ combine file*.txt
Combined listing of : file1.txt and file2.txt:
==================================
     1  File 1, Line 1
     2  File 1, Line 2
     3  File 1, Line 3
     4  File 2, Line 1
     5  File 2, Line 2
     6  File 2, Line 3
$
</pre>

<p>
Same result.  Had there been more than 2 files, only the first two
would have been processed.
</p>
</div>

<div id="outline-container-orga94d81f" class="outline-4">
<h4 id="orga94d81f">Caveat</h4>
<div class="outline-text-4" id="text-orga94d81f">
<p>
Take a look at the following execution. Can you explain what happened?
</p>

<pre class="example" id="org111fdeb">
$ ./combine.bash 
Combined listing of :  and :
===========================================
{script "hangs" with cursor here}
</pre>
</div>
</div>
</div>
<div id="outline-container-org5699b69" class="outline-3">
<h3 id="org5699b69">Get Input : <span class="cmd">read</span><a id="org6452459"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org5699b69">
<p>
To get input from the user <span class="cmd">read</span> can be used.  
</p>

<p>
Warning: 'read' is a Bash shell "built-in"&#x2026;it is not available in
other shells.  They will have their own means of reading user
input.
</p>

<p>
For example, get the age of the user:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">File: myscript.bash</span>
<span style="color: #b0c4de;">echo</span> -n <span style="color: #ffa07a;">"Enter your age: "</span>
<span style="color: #b0c4de;">read</span> age  
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"You are $age years old."</span>
</pre>
</div>

<pre class="example" id="orgea0d117">
$ bash myscript.bash
Enter your age: 22&lt;ENTER&gt;
You are 22 years old.
$
</pre>
</div>

<div id="outline-container-orgc31aad8" class="outline-4">
<h4 id="orgc31aad8"><span class="cmd">-p</span> : Include a Prompt</h4>
<div class="outline-text-4" id="text-orgc31aad8">
<p>
Use <span class="cmd">-p</span> to include a prompt:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">File: myscript.bash</span>
<span style="color: #b0c4de;">read</span> -p <span style="color: #ffa07a;">"Enter your age: "</span> age  
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"You are $age years old."</span>
</pre>
</div>
<pre class="example" id="orgde3b9c0">
$ bash myscript.bash
Enter your age: 22&lt;ENTER&gt;
You are 22 years old.
$
</pre>
</div>
</div>

<div id="outline-container-orgfdec248" class="outline-4">
<h4 id="orgfdec248"><span class="cmd">-s</span> : Silent Echoing</h4>
<div class="outline-text-4" id="text-orgfdec248">
<p>
Use <span class="cmd">-s</span> to avoid echoing user-typed input to the screen (i.e. passwords):
</p>
<pre class="example" id="org6b24814">
read -p "Enter your password: " -s password
echo -e "\nYou entered: $password"
</pre>

<p>
We need the '\n' in the <span class="cmd">echo</span> since the ENTER key was not
echoed to the screen either.
</p>

<p>
For example, run this and see what happens:
</p>

<pre class="example" id="org9d0e094">
read -p "Enter your password: " -s password
echo "You entered: $password"
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf0400ec" class="outline-3">
<h3 id="orgf0400ec">I/O Streams in Unix<a id="orga0e9693"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf0400ec">
<p>
In Unix, all input and all output are performed using
<span class="term">streams</span>, queues of information destined for some
target.
</p>
</div>
<div id="outline-container-org57e33bd" class="outline-4">
<h4 id="org57e33bd">Input Stream</h4>
<div class="outline-text-4" id="text-org57e33bd">
<p>
The primary input stream is called Standard Input, or STDIN for
short.  Under normal conditions, the data which populates this
input stream comes from the keyboard as the user types.
</p>
</div>
</div>
<div id="outline-container-org70e3063" class="outline-4">
<h4 id="org70e3063">Output Stream - Normal</h4>
<div class="outline-text-4" id="text-org70e3063">
<p>
The primary output stream is called Standard Output, or STDOUT for
short (also designated with the number 1).  Under normal conditions, the data on STDOUT will be sent
to the screen for display.
</p>
</div>
</div>
<div id="outline-container-org3b195c3" class="outline-4">
<h4 id="org3b195c3">Output Stream - Errors</h4>
<div class="outline-text-4" id="text-org3b195c3">
<p>
Often when you program, you'll get errors, not "normal" output.
For example, try this:
</p>

<pre class="example" id="org120d0e8">
$ ls some_nonexistent_file.txt
ls: cannot access 'some_nonexistent_file.txt': No such file or directory
$
</pre>
<p>
This is an example of an error.  Many programs will not output
this content to the standard output stream (STDOUT).  Instead,
they output it to a special stream for errors, called Standard
Error, or STDERR for short (also designated with the number 2).
</p>

<p>
Under normal conditions, STDERR gets output to the screen as well.
</p>
</div>
</div>
</div>
<div id="outline-container-org743e35b" class="outline-3">
<h3 id="org743e35b">Redirection<a id="org656076c"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org743e35b">
<p>
While the following are the normal sources/targets for I/O streams:
</p>

<ul class="org-ul">
<li>STDIN &lt; keyboard</li>
<li>STDOUT &gt; screen</li>
<li>STDERR &gt; screen</li>
</ul>

<p>
We can change the source of information for STDIN and can change
the target for information from STDOUT and STDERR.
</p>

<p>
Changing the source/destination of information is called
<span class="term">redirection</span>.
</p>
</div>
</div>
<div id="outline-container-orgc554254" class="outline-3">
<h3 id="orgc554254">Redirecting STDOUT<a id="orge86bb6a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgc554254">
<p>
To redirect STDOUT, use the <span class="cmd">></span> character
</p>

<pre class="example" id="org309f0e6">
$ ls -alF &gt; /tmp/output.txt
</pre>

<p>
You may include the designator if you wish:
</p>

<pre class="example" id="orgda6f46f">
$ ls -alF 1&gt; /tmp/output.txt
</pre>

<p>
Note #1: If the destination file does not exist, it will be
created. <br />
Note #2: If the destination file exists, it will be overwritten!
</p>
</div>
<div id="outline-container-orgc10b718" class="outline-4">
<h4 id="orgc10b718">Combining Files</h4>
<div class="outline-text-4" id="text-orgc10b718">
<p>
Remember how you can <span class="cmd">cat</span> multiple files:
</p>

<pre class="example" id="org5993425">
$ cat file1.txt file2.txt file3.txt
Hello File #1
This is file #2
Inside file #3
$
</pre>

<p>
With redirection, all the output will go to a file instead:
</p>

<pre class="example" id="org553edc4">
$ cat file1.txt file2.txt file3.txt &gt; total.txt
$ cat total.txt
Hello File #1
This is file #2
Inside file #3
$
</pre>
</div>
</div>

<div id="outline-container-orgd07e19b" class="outline-4">
<h4 id="orgd07e19b">Append Output</h4>
<div class="outline-text-4" id="text-orgd07e19b">
<p>
To <b>add</b> output to a file rather than overwriting, use two (2)
<span class="cmd">></span>, <span class="cmd">>></span>:
</p>
<pre class="example" id="org6783441">
$ ls -alF &gt;&gt; /tmp/output.txt
</pre>
</div>
</div>
</div>
<div id="outline-container-org8c14a8c" class="outline-3">
<h3 id="org8c14a8c">Redirecting STDERR<a id="org404406f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8c14a8c">
<p>
To redirect STDERR, use the designator with the <span class="cmd">></span> symbol (the
designator is <b>not</b> optional to redirect STDERR):
</p>

<pre class="example" id="org91d0cff">
$ some_command 2&gt; /tmp/errors.txt
</pre>
</div>

<div id="outline-container-orgca41141" class="outline-4">
<h4 id="orgca41141">Append Output</h4>
<div class="outline-text-4" id="text-orgca41141">
<p>
To <b>add</b> output to a file rather than overwriting, use two (2)
<span class="cmd">></span> again (<span class="cmd">>></span>):
</p>
<pre class="example" id="orgae434e9">
$ ls -alF 2&gt;&gt; /tmp/errors.txt
</pre>
</div>
</div>
<div id="outline-container-org3371e25" class="outline-4">
<h4 id="org3371e25">STDOUT vs STDERR</h4>
<div class="outline-text-4" id="text-org3371e25">
<p>
To see the difference between STDOUT and STDERR, try the following
commands:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ cat file1.txt file2.txt file3.txt
File 1, Line 1
File 1, Line 2
File 1, Line 3
File 2, Line 1
File 2, Line 2
File 2, Line 3
cat: file3.txt: No such file or directory
$
</pre>
</div>

<p>
Notice we get an error stating <span class="fname">file3.txt</span> doesn't
exist.  
</p>

<p>
So now try this:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ cat file1.txt file2.txt file3.txt 2&gt; errors.txt
File 1, Line 1
File 1, Line 2
File 1, Line 3
File 2, Line 1
File 2, Line 2
File 2, Line 3
$ cat errors.txt 
cat: file3.txt: No such file or directory
$
</pre>
</div>

<p>
Notice good output went to the screen (STDOUT) but the error was
redirected to a file since it was actually output to STDERR.
</p>
</div>
</div>
</div>
<div id="outline-container-orgaf8f2d3" class="outline-3">
<h3 id="orgaf8f2d3">Redirecting Both at the Same Time<a id="org33e1a6c"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgaf8f2d3">
<p>
To redirect both at the same time, include both redirection
portions:
</p>

<pre class="example" id="org58b646b">
$ some_command &gt; /tmp/output.txt 2&gt; /tmp/errors.txt
</pre>
</div>
</div>
<div id="outline-container-org1d39653" class="outline-3">
<h3 id="org1d39653">Redirecting STDERR to the same location as STDOUT<a id="orgab92460"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org1d39653">
<p>
To put STDERR in the same location as STDOUT, you <b>CAN NOT</b> do this:
</p>

<pre class="example" id="org577e550">
$ some_command &gt; /tmp/output.txt 2&gt; /tmp/output.txt       # FAIL!
</pre>

<p>
Each designator needs its own target. 
</p>

<p>
However, we can still tell bash to send STDERR to the same location as
STDOUT with a different notation:
</p>

<pre class="example" id="org56155ba">
$ some_command &gt; /tmp/output.txt 2&gt;&amp;1
</pre>

<p>
The <span class="cmd">2>&1</span> tells Bash to send STDERR (designator 2) to the same location
as STDOUT, designator 1 - just don't forget the <span class="cmd">&</span>.
</p>
</div>
</div>
<div id="outline-container-org454bf9c" class="outline-3">
<h3 id="org454bf9c">Redirection - Input Stream<a id="org138aa11"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org454bf9c">
<p>
When you <b><i>type</i></b> input, what you type goes into the STDIN stream <b>AND</b>
gets echoed to the screen:
</p>

<pre class="example" id="org685f4ec">
# File: myscript.bash
read -p "Enter your name: " name
echo "Name: $name"
</pre>

<pre class="example" id="org7257b9d">
$ bash myscript.bash 
Enter your name: Bob                # As I type 'B', 'o', 'b' and  &lt;Enter&gt;
Name: Bob                           #   all 4 chars are sent to screen also.
$
</pre>

<p>
However, we can use redirection to use the contents of a file to
feed the STDIN stream using the <span class="cmd"><</span> character.
</p>

<p>
First the setup:
</p>

<pre class="example" id="org5af3191">
$ # Create the script                   # New way to create a file!!!
$ cat &gt; myscript.bash                   #  Don't give cat a filename, and it will read from STDIN
read -p "Enter your name: " name        #     which at this point, is the keyboard!
echo "Name: $name"
C-d                                     # Press Control-d to close the file.
$ # Create the input file
$ echo "Bob Dorf" &gt; name.input          # Another way to create a file!!!
</pre>

<p>
Just to confirm, let's view the files:
</p>

<pre class="example" id="org392b751">
$ cat myscript.bash
read -p "Enter your name: " name
echo "Name: $name"
$
$ cat name.input
Bob Dorf
$
</pre>

<p>
And now, let's just run the script normally, without redirection:
</p>

<pre class="example" id="org8aad0e0">
$ bash myscript.bash
Enter your name: bob                    # We manually type this.
Name: bob                               #  So the keyboard populates STDIN
$
</pre>

<p>
Finally, try using input redirection:
</p>

<pre class="example" id="org487f14d">
$ bash myscript.bash &lt; name.input           # Feeds the *contents* of 'name.input'
Name: Bob Dorf                           #  into STDIN as if we typed it.
$
</pre>

<p>
Do you see something weird here?
</p>
</div>

<div id="outline-container-org2c58fa4" class="outline-4">
<h4 id="org2c58fa4">Caveat</h4>
<div class="outline-text-4" id="text-org2c58fa4">
<p>
Did you notice the prompt isn't even shown?  This is a result of
<span class="cmd">read</span>.  Here is the same script, but using a prompt via
<span class="cmd">echo</span> instead:
</p>

<pre class="example" id="org3f11226">
echo -n "Enter your name: "
read name
echo "Name: $name"
</pre>

<p>
&#x2026;and the execution both interactive and then via redirection:
</p>

<pre class="example" id="org43fcca7">
$ bash myscript.bash                        # First just type on the keyboard
Enter your name: Bob
Name: Bob
$

$ bash myscript.bash &lt; name.input           #  ...and now via input redirection
Enter your name: Name: Bob Dorf
$
</pre>

<p>
Conclusion:
</p>
<ul class="org-ul">
<li><span class="cmd">read</span> will not show a prompt when STDIN is redirected
from a file.</li>
<li>The way output looks may be changed when typing vs redirecting.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org00799b4" class="outline-3">
<h3 id="org00799b4">Day 10 Summary<a id="org8742792"></a></h3>
<div class="outline-text-3" id="text-org00799b4">
</div>
<div id="outline-container-org4786290" class="outline-4">
<h4 id="org4786290">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org4786290">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgad35c40" class="outline-4">
<h4 id="orgad35c40">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgad35c40">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgb3ec53f" class="outline-2">
<h2 id="orgb3ec53f">Day 11 - Mon, September 29, 2025<a id="org5a57986"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Midterm">Midterm</span></span></h2>
<div class="outline-text-2" id="text-orgb3ec53f">
</div>
<div id="outline-container-org5a7b414" class="outline-3">
<h3 id="org5a7b414">Day 11 Introduction<a id="orgb3e9328"></a></h3>
<div class="outline-text-3" id="text-org5a7b414">
</div>
<div id="outline-container-orgc78b814" class="outline-4">
<h4 id="orgc78b814">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgc78b814">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org13955b4" class="outline-3">
<h3 id="org13955b4">Midterm #1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M1">M1</span></span></h3>
<div class="outline-text-3" id="text-org13955b4">
<ul class="org-ul">
<li><b>Exam is closed book, closed notes, no Internet resources, no
shell access, and no collaboration of any kind.</b>
<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;"><b>Warning: Discord and other collaboration tools have been detected! Please don't risk it!</b></span></li>
</ul></li>
<li>All answers must be derived from material covered in class.</li>
<li>Exam will be available from 5:30pm to 6:50pm</li>
<li>During the quiz, Zoom chat will be limited to posts only with
instructor, so you may ask questions while you take the quiz.</li>
<li>You will have 75 minutes to complete the quiz from the time you start.
<ul class="org-ul">
<li>After the 75 minutes, the quiz is set to auto-submit.</li>
<li>If you get disconnected from the network, you will be able to
get back into the quiz but keep in mind the timer keeps going.</li>
</ul></li>
<li>You will be presented one question at a time; backtracking to previous questions is not permitted</li>
<li>Be careful to use <b><i>NEXT</i></b> to advance to the next question and not
accidentally click "Submit" until you are finished.</li>
<li>You may assume all files and directory names contain only letters
(both-cases), digits, underscores, and/or periods.</li>
</ul>

<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;">Results will not be available/visible until all student submissions have been graded.</span></li>
</ul>

<p>
NOTE #1: 'Fill in the blank' answers are simple enough to be
automatically graded. So read the question carefully and be
precise - no extraneous words (i.e. "Solution" vs "My answer is
'Solution'.")    
</p>
</div>
</div>
<div id="outline-container-org02510dc" class="outline-3">
<h3 id="org02510dc">Day 11 Summary<a id="orgcd17cc7"></a></h3>
<div class="outline-text-3" id="text-org02510dc">
</div>
<div id="outline-container-orgf581c60" class="outline-4">
<h4 id="orgf581c60">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orgf581c60">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgefca24e" class="outline-4">
<h4 id="orgefca24e">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgefca24e">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org15be22f" class="outline-2">
<h2 id="org15be22f">Day 12 - Wed, October 1, 2025<a id="orgcad698e"></a></h2>
<div class="outline-text-2" id="text-org15be22f">
</div>
<div id="outline-container-org0f593b0" class="outline-3">
<h3 id="org0f593b0">Day 12 Introduction<a id="orge834e07"></a></h3>
<div class="outline-text-3" id="text-org0f593b0">
</div>
<div id="outline-container-org9b1577f" class="outline-4">
<h4 id="org9b1577f">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org9b1577f">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgf8aac04" class="outline-3">
<h3 id="orgf8aac04">Pipes - <span class="cmd">|</span><a id="org89cf084"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf8aac04">
<p>
The vertical bar, or <i>pipe</i>, is how shells implement a basic Unix
Philosophy: 
</p>

<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i><b>Use the output of one program as input to another.</b></i>
</p>

<p>
Consider this simple example:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello World"</span> | cat -n
     1  Hello World
$ 
</pre>
</div>

<p>
Or perhaps do the same with a directory listing:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ ls -alF | cat -n
     1  total 32
     2  drwx------ 2 instructor instructor 4096 Sep 12 13:21 ./
     3  drwx------ 4 instructor instructor 4096 Sep  5 11:15 ../
     4  -rw------- 1 instructor instructor    6 Sep 12 13:21 file1.txt
     5  -rw------- 1 instructor instructor    6 Sep 12 13:21 file2.txt
     6  -rw------- 1 instructor instructor    5 Sep 12 13:21 file3.txt
     7  -rw------- 1 instructor instructor    6 Sep 12 13:21 file4.txt
     8  -rw------- 1 instructor instructor    5 Sep 12 13:21 file5.txt
     9  -rwx------ 1 instructor instructor  105 Sep 12 13:21 ls2*
$ 
</pre>
</div>
</div>
<div id="outline-container-orgc793c87" class="outline-4">
<h4 id="orgc793c87">How?</h4>
<div class="outline-text-4" id="text-orgc793c87">
<p>
Pipes work by connecting I/O <i>streams</i>.  Remember redirection,
the STDIN input stream, and the STDOUT output stream?  Pipes
connect the STDOUT of one program directly to the STDIN of
another.  This allows the data to <i>flow through</i> from one program
to another with no user interaction.
</p>

<pre class="example" id="orgc988630">
$ echo -e "Line 1: Hello World\nLine 2: Goodbye World" | tac
Line 2: Goodbye World
Line 1: Hello World
$
</pre>

<p>
Here is another simple example:
</p>
<pre class="example" id="org0707f23">
$ cat -n /usr/share/dict/words | head -n 2     # 'head' shows the first few lines of a file.
     1  A
     2  A's
$
</pre>

<p>
NOTE: Notice how <span class="cmd">cat</span> took a file to work on, did it's
work, and then sent it's output to STDOUT.  Normally, STDOUT is
the screen.  However, the pipe connected the STDOUT of
<span class="cmd">cat</span> to STDIN of <span class="cmd">head</span>.  By doing so,
<span class="cmd">head</span> does not require any file name to perform work
on&#x2026;the data is coming from STDIN.
</p>
</div>
</div>

<div id="outline-container-org8c31a44" class="outline-4">
<h4 id="org8c31a44">Programmer's Choice</h4>
<div class="outline-text-4" id="text-org8c31a44">
<p>
Not all programs/commands can take data from STDIN and/or files!
It depends on the developer of the program/command.
</p>
</div>
</div>

<div id="outline-container-org42740a0" class="outline-4">
<h4 id="org42740a0">More Examples</h4>
<div class="outline-text-4" id="text-org42740a0">
<p>
Pipelines can be as long as you want.  The following example uses
commands we've not talked about, but it does demonstrate how long
"command pipelines" can get.  Consider the following:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ ls -alF
total 28
drwx------ 2 bdorf bdorf 4096 Sep 12 13:32 ./
drwx------ 4 bdorf bdorf 4096 Sep  5 11:15 ../
-rw------- 1 bdorf bdorf    6 Sep 12 13:21 file1.txt
-rw------- 1 bdorf bdorf    6 Feb 13  2019 file2.txt
-rw------- 1 bdorf bdorf    5 Sep 12 13:21 file3.txt
-rw------- 1 bdorf bdorf    6 May 15 00:00 file4.txt
-rw------- 1 bdorf bdorf    5 Dec 25  2019 file5.txt
$ 
</pre>
</div>

<p>
Perhaps you want the list of months files were last modified,
sorted alphabetically, upper-cased, with no duplicates:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Extra spaces were added in the command pipeline to align with the comments</span>
$ <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">List directory | extact only files| extract months    | upper-case them     | sort w/o dups</span>
$ ls -alF          | grep <span style="color: #ffa07a;">'^-'</span>        | awk <span style="color: #ffa07a;">'{print $6;}'</span> | perl -ne <span style="color: #ffa07a;">'print uc'</span> | sort -u
DEC
FEB
MAY
SEP
$
</pre>
</div>

<p>
Again, don't worry about the specific commands. Instead, pay
attention to how the output of one program becomes the input to
another. 
</p>
</div>
</div>
<div id="outline-container-org526ac21" class="outline-4">
<h4 id="org526ac21">Pipelines vs Scripts</h4>
<div class="outline-text-4" id="text-org526ac21">
<p>
Pipelines are <i>not</i> meant to be a replacement for scripts.  Very
often it is better to create a nice structured script than to try
and solve an entire task in a single pipeline.
</p>

<p>
I often see "commands" on web sites made up of looooong
pipelines.  The reality is, <b>no one</b> is going to type all of it in
every time they need the task performed.  They'll create a
script.  
</p>

<p>
When you create a script, readability is more important than
"1-liners".  A one line script is never going to be seen unless
code needs to be modified - and when code needs to be modified,
programmers care <b>a lot</b> about readablity.
</p>
</div>
</div>

<div id="outline-container-orgb320cdd" class="outline-4">
<h4 id="orgb320cdd">Pipes with Command Substitution</h4>
<div class="outline-text-4" id="text-orgb320cdd">
<p>
Yes, you can use pipes inside command substitution as well.
Consider the file <span class="fname">/usr/share/dict/words</span>.  Display the
word on line 64738 within a proper sentence.
</p>

<p>
Hint: "within a proper sentence" means we need <span class="cmd">echo</span> to
print it.
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"The word on line 64738 is: $(</span><span style="color: #fa8072;">cat</span><span style="color: #ffa07a;"> /usr/share/dict/words | head -n 64738 | tail -n 1)"</span>
The word on line 64738 is: miniature<span style="color: #ffa07a;">'s</span>
<span style="color: #ffa07a;">$</span>
</pre>
</div>

<p>
Not sure about this?  Use <span class="cmd">cat -n</span> to make sure:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"The word on line 64738 is: $(</span><span style="color: #fa8072;">cat</span><span style="color: #ffa07a;"> -n /usr/share/dict/words | head -n 64738 | tail -n 1)"</span>
The word on line 64738 is:  64738       miniature<span style="color: #ffa07a;">'s</span>
<span style="color: #ffa07a;">$ #                         ^^^^^^^^^^^^^^^^^^^^^^^ is the output from the command substitution.</span>
<span style="color: #ffa07a;">$</span>
</pre>
</div>

<p>
NOTE: 'head' and 'tail' are useful commands, but I've left them
off this term unless we have time at the end of the course.
Basically, they show the first N lines or last N lines of a file.
</p>
</div>
</div>
</div>
<div id="outline-container-org07ac0fc" class="outline-3">
<h3 id="org07ac0fc">Extract Field Data - <span class="cmd">cut</span><a id="orge23531d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org07ac0fc">
<p>
<span class="cmd">cut</span> is used to "pull" data out of a line of input.  What
data is extracted depends on what you specify for:
</p>

<ul class="org-ul">
<li>The <i>field</i> you want : use the <span class="cmd">-f</span> switch (1-based, not 0-based)</li>
<li>The field <i>delimiter</i> : use the <span class="cmd">-d</span> switch</li>
</ul>

<p>
For example, consider the following comma-delimited file:
</p>
<pre class="example" id="org627cff2">
Dorf,Bob,CS,2600
Jones,Sally,Eng,3800
</pre>

<p>
To extract last names, we want field 1 and using a comma as a
delimiter:
</p>
<pre class="example" id="org50e0762">
$ cut -d',' -f1 file.txt 
Dorf
Jones
$ 
</pre>

<p>
Notice the delimiter should be enclosed in single quotes.  You may
have a space between the switch and the value you're providing:
</p>

<pre class="example" id="org6c21e54">
$ cut -d ',' -f 1 file.txt 
Dorf
Jones
$ 
</pre>

<p>
Perhaps we want to view only the disciplines:
</p>
<pre class="example" id="orgc74d0b6">
$ cut -d ',' -f 3 file.txt 
CS
Eng
$ 
</pre>

<p>
By <i>default</i>, <span class="cmd">cut</span> looks for a tab as a delimiter.  So
assume we had the following file:
</p>

<pre class="example" id="orgffabfe6">
Dorf    Bob     CS      2600
Jones   Sally   Eng     3800
</pre>

<p>
We could leave off out <span class="cmd">-d</span> switch:
</p>

<pre class="example" id="orgf575c88">
$ cut -f 1 file.txt 
Dorf
Jones
$ 
$ cut -f 3 file.txt 
CS
Eng
$ 
</pre>

<p>
We can also extract multiple fields by providing the fields
separated by commas:
</p>
<pre class="example" id="orgae1a5bd">
$ cut -d ',' -f1,3 file.txt 
Dorf,CS
Jones,Eng
$ 
</pre>

<p>
We can even use a range:
</p>
<pre class="example" id="org7daa625">
$ cut -d ',' -f1-3 file.txt 
Dorf,Bob,CS
Jones,Sally,Eng
$
</pre>

<p>
In fact, with modern versions of <span class="cmd">cut</span>, we can leave off
the start <b>or</b> the end of a range to signal "from the start" or
"until the end", respectively:
</p>

<pre class="example" id="org8c66c61">
$ cut -d ',' -f3- file.txt
CS,2600
Eng,3800
$
</pre>

<p>
or  
</p>

<pre class="example" id="org6c9268f">
$ cut -d ',' -f-3 file.txt 
Dorf,Bob,CS
Jones,Sally,Eng
$
</pre>
</div>
</div>
<div id="outline-container-org04672a7" class="outline-3">
<h3 id="org04672a7">Translate Characters - <span class="cmd">tr</span><a id="org0aeb16c"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org04672a7">
<p>
Often it's useful to change one character in a line of input to
another.  <span class="cmd">tr</span> does just that and then some.
</p>
</div>
<div id="outline-container-orgf5d4f5c" class="outline-4">
<h4 id="orgf5d4f5c">Translate a Character</h4>
<div class="outline-text-4" id="text-orgf5d4f5c">
<p>
To translate a character to another, just provide the two chars on
the command line, each one surrounded by single quotes.
</p>

<p>
For example, to change spaces to underscores:
</p>

<pre class="example" id="orgacec3f9">
$ echo "Hello World" | tr ' ' '_'
Hello_World
$
</pre>
</div>
</div>

<div id="outline-container-org0ab5122" class="outline-4">
<h4 id="org0ab5122">Delete a Character : <span class="cmd">-d</span></h4>
<div class="outline-text-4" id="text-org0ab5122">
<p>
<span class="cmd">tr</span> will even delete a character with the <span class="cmd">-d</span>
switch.  Just provide the char to delete:
</p>

<pre class="example" id="orgb6389dd">
$ echo "Hello World" | tr -d ' '
HelloWorld
$
</pre>
</div>
</div>

<div id="outline-container-orgeb654ad" class="outline-4">
<h4 id="orgeb654ad">"Squeeze" Repeated Characters</h4>
<div class="outline-text-4" id="text-orgeb654ad">
<p>
Try this:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello World"</span> | cut -d<span style="color: #ffa07a;">' '</span> -f2
</pre>
</div>

<p>
What do you expect to print out?
</p>

<p>
How about this:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello     World"</span> | cut -d<span style="color: #ffa07a;">' '</span> -f2
</pre>
</div>

<p>
The fix, squeeze repeated chars:
</p>

<div class="org-src-container">
<pre class="src src-perl">$ echo <span style="color: #ffa07a;">"Hello     World"</span> | tr <span style="color: #ffa07a;">-s ' ' | cut -d' ' -</span>f2
</pre>
</div>

<p>
What happened?
</p>
</div>
</div>
</div>
<div id="outline-container-org11c95e6" class="outline-3">
<h3 id="org11c95e6">Word Count - <span class="cmd">wc</span><a id="org7ef11ba"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org11c95e6">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgfb6c2bb">wc</a></td></tr></table>
</p>

<p>
<span class="cmd">wc</span> is a simple tool to count, for example, the number of
characters or lines in a file. (It does more, but characters and
lines are most common.)
</p>
</div>

<div id="outline-container-org27868c3" class="outline-4">
<h4 id="org27868c3">Count Characters: <span class="cmd">-c</span></h4>
<div class="outline-text-4" id="text-org27868c3">
<p>
While the <span class="cmd">ls</span> command can provide the number of bytes in
a file, it does so only with a long listing which can be difficult
to parse in scripts.
</p>

<p>
<span class="cmd">wc</span> can provide the number of bytes in a file using
the <span class="cmd">-c</span> switch:
</p>

<pre class="example" id="orgce8063e">
$ ls -alF file.txt
-rw------- 1 instructor instructor 26 Oct 17 19:48 file.txt

$ wc -c file.txt
26 file.txt
$
</pre>

<p>
and yes, wildcards work too:
</p>

<pre class="example" id="org09f31a2">
$ wc -c *.txt
 45 file1.txt
 45 file2.txt
 90 total
$
</pre>
</div>
</div>

<div id="outline-container-org0250395" class="outline-4">
<h4 id="org0250395">Count Lines: <span class="cmd">-l</span></h4>
<div class="outline-text-4" id="text-org0250395">
<p>
To count lines, we need the <span class="cmd">-l</span> switch:
</p>

<pre class="example" id="orgf3d7396">
$ cat file.txt
Sally
Bob
David
Sam
Irene
$
$ wc -l file.txt 
5 file.txt
$ 
</pre>

<p>
Notice when <span class="cmd">wc</span> is given a file name, it outputs the
count, whitespace, and then the file name.  This allows multiple
files to be counted:
</p>

<pre class="example" id="org4d46a27">
$ wc -l file1.txt 
3 file1.txt
$ wc -l file2.txt
3 file2.txt
$ wc -l *.txt
  3 file1.txt
  3 file2.txt
  6 total
$
</pre>
</div>
</div>
</div>
<div id="outline-container-orga86b649" class="outline-3">
<h3 id="orga86b649">Top Lines of Code - <span class="cmd">head</span><a id="org26c8add"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orga86b649">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org30c2850">head/tail</a></td></tr></table>
</p>

<p>
<span class="cmd">head</span> is used to display the top N lines of a text file.
By default, the first 10 lines are shown.
</p>

<p>
Assume the following file:
</p>
<pre class="example" id="org9b5f317">
$ cat file.txt
Line 1
Line 2
Line 3
...       # Trimmed for simplicity
Line 28
Line 29
Line 30
$ 
</pre>

<p>
Now use <span class="cmd">head</span>:
</p>
<pre class="example" id="org54ccc3c">
$ head file.txt 
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
$
</pre>
</div>

<div id="outline-container-org1f3bc05" class="outline-4">
<h4 id="org1f3bc05">Change N - <span class="cmd">-n</span></h4>
<div class="outline-text-4" id="text-org1f3bc05">
<p>
You can change the default value of 10 with the <span class="cmd">-n</span>
switch followed by how many you'd like:
</p>
<pre class="example" id="org0d05f60">
$ head -n 3 file.txt 
Line 1
Line 2
Line 3
$
$ head -n 8 file.txt 
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
$
</pre>
</div>
</div>

<div id="outline-container-org1206ab9" class="outline-4">
<h4 id="org1206ab9">Display N From Bottom</h4>
<div class="outline-text-4" id="text-org1206ab9">
<p>
You can even display the top lines by specifying how many lines
to <i>trim off</i> the end.  You do this by using a negative value for N.
</p>

<p>
For example, to show the top 7 lines:
</p>

<pre class="example" id="orgf3dafaa">
$ head -n7 file.txt
  Line 1
  Line 2
  Line 3
  Line 4
  Line 5
  Line 6
  Line 7
$
</pre>

<p>
but now, let's show all <i>except</i> the bottom 13 lines:
</p>

<pre class="example" id="orgb4b3c86">
$ head -n -13 file.txt
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
Line 11
Line 12
Line 13
Line 14
Line 15
Line 16
Line 17
$
</pre>

<p>
Be careful, because the output may be the same depending on your numbers.
</p>

<p>
Consider: Display the first 5 lines showing the top 5 lines, <i>and then</i>
showing everything except the bottom 25 lines:
</p>

<pre class="example" id="orgdba1c57">
$ head -n5 file.txt         # This is "normal" use...
Line 1
Line 2
Line 3
Line 4
Line 5
$ 
$ head -n -25 file.txt     # This says "trim off the last 25 lines"
Line 1
Line 2
Line 3
Line 4
Line 5
$ 
</pre>

<p>
This shows the same result because 30 - 25 is still 5.
</p>
</div>
</div>
</div>
<div id="outline-container-orgc62e8ad" class="outline-3">
<h3 id="orgc62e8ad">Bottom Lines of Code - <span class="cmd">tail</span><a id="orgcd5dde5"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgc62e8ad">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org30c2850">head/tail</a></td></tr></table>
</p>

<p>
<span class="cmd">tail</span> is used to display the bottom N lines of a text file.
By default, the last 10 lines are shown.
</p>

<p>
Assume the following file:
</p>
<pre class="example" id="org2e2e734">
$ cat file.txt
Line 1
Line 2
Line 3
...       # Trimmed for simplicity
Line 28
Line 29
Line 30
$ 
</pre>

<p>
Now use <span class="cmd">tail</span>:
</p>
<pre class="example" id="org3de7990">
$ tail file.txt 
Line 21
Line 22
Line 23
Line 24
Line 25
Line 26
Line 27
Line 28
Line 29
Line 30
$
</pre>
</div>

<div id="outline-container-org0cef70b" class="outline-4">
<h4 id="org0cef70b">Change N - <span class="cmd">-n</span></h4>
<div class="outline-text-4" id="text-org0cef70b">
<p>
You can change the default value of 10 with the <span class="cmd">-n</span>
switch:
</p>
<pre class="example" id="orgcfcdac4">
$ tail -n 3 file.txt 
Line 28
Line 29
Line 30
$ tail -n 8 file.txt 
Line 23
Line 24
Line 25
Line 26
Line 27
Line 28
Line 29
Line 30
$
</pre>
</div>
</div>

<div id="outline-container-org20b33ec" class="outline-4">
<h4 id="org20b33ec">Display N From the Top</h4>
<div class="outline-text-4" id="text-org20b33ec">
<p>
You can even display the bottom lines by specifying <i>where to start</i>
displaying lines.  You do this by using a '+' in front of N.
</p>

<p>
Ex: Display the last 5 lines showing the bottom 5 lines, and then
showing everything except the top 25 lines:
</p>

<pre class="example" id="org979483d">
$ tail -n 5 file.txt 
Line 26
Line 27
Line 28
Line 29
Line 30
$
$ tail -n +26 file.txt           # Notice we specify what line to *start on*
Line 26
Line 27
Line 28
Line 29
Line 30
$
</pre>

<p>
Or, similar to the <span class="cmd">head</span> example: show the bottom 7
lines:
</p>

<pre class="example" id="org5b9c451">
$ tail -n 7 file.txt
Line 24
Line 25
Line 26
Line 27
Line 28
Line 29
Line 30
$
</pre>

<p>
and, show all but the top 13 lines:
</p>

<pre class="example" id="org9591856">
$ tail -n+14 file.txt

Line 14
Line 15
Line 16
Line 17
Line 18
Line 19
Line 20
Line 21
Line 22
Line 23
Line 24
Line 25
Line 26
Line 27
Line 28
Line 29
Line 30
$
</pre>

<p>
Notice the space after <span class="cmd">-n</span> is optional; this is not
universal but quite common.
</p>
</div>
</div>
</div>
<div id="outline-container-org9d3869c" class="outline-3">
<h3 id="org9d3869c"><span class="cmd">head</span> vs <span class="cmd">tail</span><a id="org78d8756"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9d3869c">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org30c2850">head/tail</a></td></tr></table>
</p>


<div id="org84f4a76" class="figure">
<p><img src="support_files/head_tail_diff.png" alt="head_tail_diff.png" />
</p>
</div>
</div>
</div>
<div id="outline-container-orgecb5b2d" class="outline-3">
<h3 id="orgecb5b2d">Day 12 Summary<a id="org0a22964"></a></h3>
<div class="outline-text-3" id="text-orgecb5b2d">
</div>
<div id="outline-container-orge618166" class="outline-4">
<h4 id="orge618166">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orge618166">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org48f8140" class="outline-4">
<h4 id="org48f8140">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org48f8140">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org10c4a72" class="outline-2">
<h2 id="org10c4a72">Day 13 - Mon, October 6, 2025<a id="org63c8399"></a></h2>
<div class="outline-text-2" id="text-org10c4a72">
</div>
<div id="outline-container-org0b55399" class="outline-3">
<h3 id="org0b55399">Day 13 Introduction<a id="org2620c13"></a></h3>
<div class="outline-text-3" id="text-org0b55399">
</div>
<div id="outline-container-org687949f" class="outline-4">
<h4 id="org687949f">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org687949f">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org05782c3" class="outline-3">
<h3 id="org05782c3">Search for Content - <span class="cmd">grep</span><a id="org0c22049"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org05782c3">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
<span class="cmd">grep</span> is one of the most powerful commands we'll be
working with.  It has a great number of options and thus major
flexibility.  For now, we'll just go over some basics.
</p>

<p>
<span class="cmd">grep</span> searches for a substring, or pattern, from lines of
input and prints only those matching (or non-matching) lines.
</p>

<pre class="example" id="orgc1fbc83">
$ cat &gt; file.txt
Sally
Bob
David
Sam
Irene
^d
$

$ cat file.txt
Sally
Bob
David
Sam
Irene
$

$ grep David file.txt
David
$

$ grep a file.txt            
Sally
David
Sam
$
</pre>

<p>
You can even search in multiple files:
</p>

<pre class="example" id="org11b6b56">
$ grep David *.txt
another_file.txt:David
file.txt:David
$
</pre>
</div>
</div>
<div id="outline-container-org1910392" class="outline-3">
<h3 id="org1910392">Case-(In)Sensitive Searches<a id="org836e740"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org1910392">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
By default, <span class="cmd">grep</span> searches are <b>case-sensitive</b>:
</p>
<pre class="example" id="org9345657">
$ grep David file.txt
David
$
$ grep david file.txt
$
</pre>

<p>
To have <span class="cmd">grep</span> search case-INsensitively, use the
<span class="cmd">-i</span> switch:
</p>

<pre class="example" id="org2ba7a07">
$ grep david file.txt 
$ grep -i david file.txt 
David
$
</pre>
</div>
</div>
<div id="outline-container-org2731022" class="outline-3">
<h3 id="org2731022">Print Anti-Matches<a id="org51a4fa2"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2731022">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
Sometimes, you'll want to search for lines which <i>do not</i> match
your pattern.  This is done via the <span class="cmd">-v</span> switch:
</p>

<pre class="example" id="org4995076">
$ grep David file.txt 
David
$
$ grep -v David file.txt 
Sally
Bob
Sam
Irene
$ 
</pre>

<p>
Notice on the <span class="cmd">-v</span> usage, <i>David</i> is <span class="underline">not</span> printed.
</p>
</div>
</div>
<div id="outline-container-org75d4232" class="outline-3">
<h3 id="org75d4232">Multiple Switches<a id="org9e9593d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org75d4232">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
It is perfectly legit to use multiple switches at a time:
</p>

<pre class="example" id="orge82738a">
$ grep david file.txt 
$ grep -i david file.txt 
David
$
$ grep -i -v david file.txt 
Sally
Bob
Sam
Irene
$
</pre>

<p>
Some commands are even OK combining the switch with a single '-':
</p>

<pre class="example" id="org4b8ac36">
$ grep -iv david file.txt 
Sally
Bob
Sam
Irene
$
</pre>

<p>
But again, this really depends on the programmer.
</p>
</div>
</div>
<div id="outline-container-org4ba21c0" class="outline-3">
<h3 id="org4ba21c0">Number of Matches<a id="org499fad0"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4ba21c0">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
Often, we only want the number of matching lines, not the lines
themselves.  To get the "count", use the <span class="cmd">-c</span> switch:
</p>

<pre class="example" id="org3d79c95">
$ cat file.txt
Sally
Bob
David
Sam
Irene
$

$ grep -c David file.txt
1
$

$ grep -c -v 'a' file.txt
2
$
</pre>

<p>
Why 2?
</p>
</div>
</div>
<div id="outline-container-org4086bfe" class="outline-3">
<h3 id="org4086bfe">Print Postceding Lines : <span class="cmd">-A</span><a id="org243c695"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4086bfe">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
Sometimes, we want to print some lines after the match, along with
the match.  This is often helpful with formatted files when the
search criteria is "constant" but the data you want is not.  To do
so, provide the number of lines to view after 
including the <span class="cmd">-A</span> switch:
</p>

<pre class="example" id="org65c7026">
$ cat &gt; file.txt
Line 1
Line 2
Line 3
Line 4
Line 5
^d
$

$ grep -A 1 3 file.txt    # search for '3' and display the match AND 1 more line
Line 3
Line 4
$

$ grep -A 3 2 file.txt  # search for '2' and display the match and 3 more lines
Line 2
Line 3
Line 4
Line 5
$
</pre>

<p>
I've used this more when searching for content in a HTML file
obtained from some site.  For example, extracing podcast file names
or titles.
</p>
</div>
</div>
<div id="outline-container-orgb76b6b2" class="outline-3">
<h3 id="orgb76b6b2">Print Preceding Lines : <span class="cmd">-B</span><a id="orga33909e"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb76b6b2">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
Sometimes, we want to print some lines before the match, along with
the match.  This is often helpful with source code to find the
correct line.  To do so, provide the number of lines to view after
the <span class="cmd">-B</span> switch:
</p>

<pre class="example" id="org894b48c">
$ cat &gt; file.txt
Line 1
Line 2
Line 3
Line 4
Line 5
^d
$

$ grep -B 1 3 file.txt    # search for '3' and display the match and 1 line *before*
Line 2
Line 3
$

$ grep -B 3 5 file.txt   # search for '5' and display the match and 3 previous lines
Line 2
Line 3
Line 4
Line 5
$
</pre>
</div>
</div>
<div id="outline-container-org770378e" class="outline-3">
<h3 id="org770378e">Example</h3>
<div class="outline-text-3" id="text-org770378e">
<p>
Remember we said -A and -B are useful when the search criteria is
"constant" but the value we want is not?
</p>

<p>
Consider a command which generates the following output:
</p>

<pre class="example" id="org38a0dd1">
$ getweather
getweather v1.0
(c) 1944 Bob Dorf, MIT, MA

Weather report: DemoCity, California, United States

      \   /     Sunny
       .-.      +87(84) °F
    ― (   ) ―   → 12 mph
       `-’      9 mi
      /   \     0.0 in
$
</pre>

<p>
If we only want the temperature, 84. Follow the example to see how
we can derive at just that answer.
</p>

<pre class="example" id="orgad75c75">
$ getweather | grep -A 3 'Weather report'
Weather report: DemoCity, California, United States

      \   /     Sunny
       .-.      +87(84) °F
$

$  # Now get clip just the last line:
$ getweather | grep -A 3 'Weather report' | tail -n1
       .-.      +87(84) °F
$       

$ # use '(' as a field delimiter
$ getweather | grep -A 3 'Weather report' | tail -n1 | cut -d'(' -f2
84) °F
$

$ # Finally, use ')' as a delimiter to get just the temperature
$ getweather | grep -A 3 'Weather report' | tail -n1 | cut -d'(' -f2 | cut -d')' -f1
84
$
</pre>

<p>
Are there simpler ways to get the same result, yes,
absolutely&#x2026;but with other commands and/or features of commands
we've not learned.  Way too much to learn in 1/2 of a class.  So
don't try so hard to get the shortest command line possible.
</p>

<p>
Generating command lines (scripts) is just like programming.  v0.1
will never be as good and v1.0.
</p>
</div>
</div>
<div id="outline-container-org08a08f5" class="outline-3">
<h3 id="org08a08f5">Patterns for <span class="cmd">grep</span><a id="org926ce1d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org08a08f5">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgaad43c2">grep</a></td></tr></table>
</p>

<p>
Technically speaking, <span class="cmd">grep</span> takes a <i>Regular Expression</i>
(RE) to search for.  
</p>

<p>
REs commonly come in 2 forms:
</p>

<ul class="org-ul">
<li>POSIX : UNIX standard, very portable
<ul class="org-ul">
<li>aka. Portable Operating System Interface for uniX (POSIX)</li>
</ul></li>
<li>PERL-Compatible : More robust/powerful than POSIX, less portable 
<ul class="org-ul">
<li>Also known as PERL Compatible REs, or PCREs</li>
</ul></li>
<li>Not-so-common:
<ul class="org-ul">
<li>Javascript</li>
<li>Python</li>
<li>Java</li>
<li>etc.</li>
</ul></li>
</ul>
</div>

<div id="outline-container-org54bbbd0" class="outline-4">
<h4 id="org54bbbd0">Start of Line : <span class="cmd">^</span></h4>
<div class="outline-text-4" id="text-org54bbbd0">
<p>
<span class="cmd">^</span> matches the start of a line.
</p>

<p>
Ex: Find all names from <span class="fname">file.txt</span> which start with 's' or 'S':
</p>
<pre class="example" id="org3f2eae0">
$ grep -i '^s' file.txt
Sally
Sam
$
</pre>
</div>
</div>

<div id="outline-container-org3b519b9" class="outline-4">
<h4 id="org3b519b9">End of Line : <span class="cmd">$</span></h4>
<div class="outline-text-4" id="text-org3b519b9">
<p>
<span class="cmd">$</span> matches the end of the line.
</p>

<p>
Ex: Find all names from <span class="fname">file.txt</span> ending in 'y':
</p>
<pre class="example" id="org5b2d5b2">
$ grep 'y$' file.txt 
Sally
$ 
</pre>
</div>
</div>

<div id="outline-container-orgdec9dd5" class="outline-4">
<h4 id="orgdec9dd5">Single Char : <span class="cmd">.</span></h4>
<div class="outline-text-4" id="text-orgdec9dd5">
<p>
<span class="cmd">.</span> matches a single character
</p>

<p>
Ex: Find all names from <span class="fname">file.txt</span> containing an 'a' with only 1 character after
it:
</p>
<pre class="example" id="org117e85f">
$ grep 'a.$' file.txt 
Sam
$
</pre>

<p>
Find all names containing an 'a' with only one letter before it:
</p>
<pre class="example" id="orgf9e14f2">
$ grep '^.a' file.txt 
Sally
David
Sam
$
</pre>
</div>
</div>

<div id="outline-container-orga378964" class="outline-4">
<h4 id="orga378964">0 or more Chars : <span class="cmd">*</span></h4>
<div class="outline-text-4" id="text-orga378964">
<p>
To match 0 or more of the <i>previous character</i>, use <span class="cmd">*</span>.
</p>

<p>
Ex: Find all names from <span class="fname">file.txt</span> with characters after 'i':
</p>
<pre class="example" id="orgfeed27a">
$ grep 'i.*' file.txt 
David
$
</pre>

<p>
Why didn't <i>Irene</i> show up?
</p>

<p>
NOTE: Here '<b>' means 0 or more of the */previous character/</b>.
Whereas in file globbing, '<b>' means 0 or more of */any NEW
character/</b>&#x2026;not the one before it.  That's the difference
between REs and wildcards.
</p>
</div>
</div>

<div id="outline-container-orgeccbc71" class="outline-4">
<h4 id="orgeccbc71">Brackets : <span class="cmd">[]</span></h4>
<div class="outline-text-4" id="text-orgeccbc71">
<p>
Use <span class="cmd">[]</span> to provide a list of possible chars to match.
</p>

<p>
Ex: Find all names which contain 'a' or 'i':
</p>
<pre class="example" id="org7f00b17">
$ grep '[ai]' file.txt
Sally
David
Sam
$
</pre>

<p>
This <i>is</i> similar to file globbing.
</p>
</div>
</div>

<div id="outline-container-org0db4073" class="outline-4">
<h4 id="org0db4073">Whitespace : <span class="cmd">\s</span></h4>
<div class="outline-text-4" id="text-org0db4073">
<p>
To indicate a space or tab (whitespace) we can use an escaped 's'
(<span class="cmd">\s</span>).  <span class="cmd">grep</span> will then match a space or tab
where specified in the pattern.
</p>

<p>
Ex: Find all non-blank lines.  Since blank lines may contain nothing,
or may contain spaces/tabs, we want to use the whitespace char:
</p>
<pre class="example" id="org5bbb356">
$ grep -v '^\s*$' file.txt
Sally
Bob
David
Same
Irene
$
</pre>

<p>
Notice we need the <span class="cmd">*</span> to say, "Match a line which has 0
or more whitespaces".  This matches lines with nothing and lines
with tabs/spaces.  We use the <span class="fname">-v</span> "filter" them out.
</p>

<p>
Ex: Consider a text file and find all lines which have the word
'the' not at the start or end of the line.  Since we only want "the" and
not "them", "lathe", "there", etc., we can specify whitespace
around the word:
</p>

<pre class="example" id="orgf2a1821">
$ grep '\sthe\s' file.txt
</pre>

<p>
Question: What possible existence(s) of "the" does this not catch?
Hint: One answer is in the question.
</p>
</div>
</div>

<div id="outline-container-org8f29f72" class="outline-4">
<h4 id="org8f29f72">Ranges : <span class="cmd">-</span></h4>
<div class="outline-text-4" id="text-org8f29f72">
<p>
Use <span class="cmd">-</span> with <span class="cmd">[]</span> to specify a range of chars to
match (or not).
</p>

<p>
Ex: Find all names which contain one of the first three letters of
the alphabet:
</p>
<pre class="example" id="org3587fe7">
$ grep '[a-c]' file.txt 
Sally
Bob
David
Sam
$
</pre>

<p>
This too is similar to file globbing.
</p>
</div>
</div>

<div id="outline-container-org3ed278f" class="outline-4">
<h4 id="org3ed278f">Range Exemptions</h4>
<div class="outline-text-4" id="text-org3ed278f">
<p>
To match characters NOT in a range, put a <span class="cmd">^</span> as the
first char in the <span class="cmd">[ ]</span>:
</p>

<pre class="example" id="org595b1a8">
$ grep '[^a]' file.txt
</pre>

<p>
This means match anything NOT an 'a'.  But be careful what you're
actually telling <span class="cmd">grep</span>:
</p>

<div class="org-src-container">
<pre class="src src-perl">$ cat &gt; file.txt  <span style="color: #ff7f24;"># Create a sample file to work with</span>
apple
ajax
bob
a
aa
aaa
^d
$ grep <span style="color: #ffa07a;">'[^a]'</span> file.txt  <span style="color: #ff7f24;">#  Find lines which match with "not an a"</span>
apple
ajax
bob
$
</pre>
</div>

<p>
Notice 'apple' and 'ajax' still showed up!  <span class="cmd">[^a]</span> does
not mean "match lines which do not contain an 'a'".  It means "match
any character which is not an 'a'".  'apple' meets this criteria
since 'pple' are all not 'a's.  And 'ajax' meets this criteria
because 'j' and 'x' are not 'a's.
</p>

<p>
To match all lines which do not contain an a, use this:
</p>

<pre class="example" id="org5420ffb">
$ grep -v 'a' file.txt
bob
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org55344bf" class="outline-3">
<h3 id="org55344bf">Command Combination&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org55344bf">
<p>
Often, we'll want to combine commands on the same line, sometimes
with the executions dependent on one another. 
</p>

<p>
There are primarily three different ways to do this:
</p>

<ul class="org-ul">
<li><span class="cmd">;</span> : Perform the next command no matter what.</li>
<li><span class="cmd">&&</span> : Perform the next command only if the first
succeeds.</li>
<li><span class="cmd">||</span> : Perform the next command only if the first
failed.</li>
</ul>
</div>

<div id="outline-container-orge7c6636" class="outline-4">
<h4 id="orge7c6636"><span class="cmd">;</span></h4>
<div class="outline-text-4" id="text-orge7c6636">
<p>
A semicolon simply separates multiple commands&#x2026;nothing more.
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello"</span> ; <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
Hello
World
$ eco <span style="color: #ffa07a;">"Hello"</span> ; <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
-bash: eco: command not found
World
$ echo <span style="color: #ffa07a;">"Hello"</span> ; eco <span style="color: #ffa07a;">"World"</span>
Hello
-bash: eco: command not found
$ 
</pre>
</div>

<p>
Notice even if the first command results in an error, the second
command will still execute.
</p>
</div>
</div>

<div id="outline-container-orgc074684" class="outline-4">
<h4 id="orgc074684"><span class="cmd">&&</span></h4>
<div class="outline-text-4" id="text-orgc074684">
<p>
A double-ampersand will perform both commands only if the first
succeeds.  If the first fails, the second will NOT be performed.
This results in "short-circuiting".
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello"</span> &amp;&amp; <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
Hello
World
$ eco <span style="color: #ffa07a;">"Hello"</span> &amp;&amp; <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
-bash: eco: command not found
$ echo <span style="color: #ffa07a;">"Hello"</span> &amp;&amp; eco <span style="color: #ffa07a;">"World"</span>
Hello
-bash: eco: command not found
$ 
</pre>
</div>

<p>
Notice in the second version, the first command failed so the
second command did not even execute.
</p>

<p>
Also notice, when the first succeeded and the second failed, we
still got some output from the first command!
</p>
</div>
</div>

<div id="outline-container-orgaba2355" class="outline-4">
<h4 id="orgaba2355"><span class="cmd">||</span></h4>
<div class="outline-text-4" id="text-orgaba2355">
<p>
A double-vertical bar will perform both commands only if the first 
fails.  If the first fails, the second WILL be performed.
This also results in "short-circuiting".
</p>

<div class="org-src-container">
<pre class="src src-sh">$ echo <span style="color: #ffa07a;">"Hello"</span> || <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
Hello
$ eco <span style="color: #ffa07a;">"Hello"</span> || <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"World"</span>
-bash: eco: command not found
World
$ echo <span style="color: #ffa07a;">"Hello"</span> || eco <span style="color: #ffa07a;">"World"</span>
Hello
$
</pre>
</div>

<p>
Notice the first execution did not even echo "World" since the
first <span class="cmd">echo</span> succeeded.
</p>

<p>
In the second version, the first command failed so the second was
executed&#x2026;successfully. 
</p>

<p>
In the third version, since the first succeeded, the error in the
second command was never encountered!
</p>
</div>
</div>
</div>
<div id="outline-container-org207f6ef" class="outline-3">
<h3 id="org207f6ef">Basic Math in Bash<a id="org4145d06"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org207f6ef">
<p>
We can also do some basic math in Bash scripts.  However, it is not
as straightforward as in other languages since Bash will want to
parse the expression as a command by default. 
</p>

<p>
Simply put, perform the math expression inside parens,
<span class="cmd">()</span>, and then put the parenthetical expression inside a
command substitution <span class="cmd">$()</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">x</span>=5
<span style="color: #eedd82;">x</span>=$(($<span style="color: #eedd82;">x</span>+1))

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">x is now 6</span>
<span style="color: #b0c4de;">echo</span> $<span style="color: #eedd82;">x</span>
</pre>
</div>

<p>
Technically, we <i>are not</i> using parents and command substitution.
<span class="cmd">$((</span> and <span class="cmd">))</span> make up their own Bash syntax!
So <i><b>be sure not to have spaces in between the parens</b></i>, but you can have
spaces around the expression:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">x</span>=$(( $<span style="color: #eedd82;">x</span>+1 ))  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Ok</span>
<span style="color: #eedd82;">x</span>=$( ($<span style="color: #eedd82;">x</span>+1) )  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">NOT Ok</span>
</pre>
</div>
</div>
<div id="outline-container-org4c9a35c" class="outline-4">
<h4 id="org4c9a35c">Operators</h4>
<div class="outline-text-4" id="text-org4c9a35c">
<p>
There are several math operations Bash can deal with.  Here
are the commons ones you should know: 
</p>
<pre class="example" id="org66d82fa">
- +                 			   unary minus and plus
**     					   exponentiation
* / %  					   multiplication, division, remainder
+ -    					   addition, subtraction
</pre>

<p>
See "ARITMETHIC EVALUATION" for more in the Bash man page.
</p>
</div>
</div>
</div>
<div id="outline-container-orgd8e9596" class="outline-3">
<h3 id="orgd8e9596">Day 13 Summary<a id="org2362bd9"></a></h3>
<div class="outline-text-3" id="text-orgd8e9596">
</div>
<div id="outline-container-org90eaf3c" class="outline-4">
<h4 id="org90eaf3c">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org90eaf3c">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org0cda287" class="outline-4">
<h4 id="org0cda287">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org0cda287">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgcb1d52e" class="outline-2">
<h2 id="orgcb1d52e">Day 14 - Wed, October 8, 2025<a id="org5bd0a9c"></a></h2>
<div class="outline-text-2" id="text-orgcb1d52e">
</div>
<div id="outline-container-orgcac696d" class="outline-3">
<h3 id="orgcac696d">Day 14 Introduction<a id="org8deeb38"></a></h3>
<div class="outline-text-3" id="text-orgcac696d">
</div>
<div id="outline-container-orgecfce79" class="outline-4">
<h4 id="orgecfce79">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgecfce79">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgd59514d" class="outline-3">
<h3 id="orgd59514d">Find Files or Directories - <span class="cmd">find</span><a id="org9b8d188"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgd59514d">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org3b430e8">find</a></td></tr></table>
</p>

<p>
<span class="cmd">find</span> is a very complex command so here we introduce a
basic functionality.
</p>

<p>
In short, <span class="cmd">find</span> locates files or directories in a
directory tree. 
</p>

<p>
The syntax of <span class="cmd">find</span> is:
</p>

<pre class="example" id="org36be296">
find PATH [-type {f|d}] [-name|-iname] PATTERN
</pre>

<p>
<span class="cmd">PATH</span> is the location to start the search.
</p>

<p>
<span class="cmd">-type</span> takes (among others) <span class="fname">f</span> or
<span class="fname">d</span> to find either <b>f</b>iles or
<b>d</b>irectories. 
</p>

<p>
<span class="cmd">-name</span> searches for targets whose name matches the
provided pattern.
</p>

<p>
<span class="cmd">-iname</span> same as <span class="cmd">-name</span> but case-INsensitive
</p>

<p>
The PATTERN is similar to file globbing rules.  I say <i>similar</i>
because the newer GNU versions of <span class="cmd">find</span> use the same
library as Bash for file globbing.  However, early version of
<span class="cmd">find</span>, especially non-GNU versions on non-Linux Unix systems, do
not use the same library.  Those can have their own rules.
</p>
</div>

<div id="outline-container-org16cf776" class="outline-4">
<h4 id="org16cf776">Example</h4>
<div class="outline-text-4" id="text-org16cf776">
<p>
Find all <span class="fname">mp3</span> files within your home directory:
</p>
<pre class="example" id="orgacf7cb3">
$ find ~ -type f -name '*.mp3'
</pre>

<p>
We need to enclose the pattern in single quotes because
<span class="fname">*</span> has special meaning to Bash.
</p>

<p>
Alternatively, we <i>could</i> escape the <span class="fname">*</span>:
</p>

<pre class="example" id="org3658a66">
$ find ~ -type f -name \*.mp3
</pre>
</div>
</div>

<div id="outline-container-org1687475" class="outline-4">
<h4 id="org1687475">Example</h4>
<div class="outline-text-4" id="text-org1687475">
<p>
Find all <span class="fname">bin</span>, <span class="cmd">Bin</span>, <span class="cmd">BIn</span>,
<span class="cmd">BIN</span>, <span class="cmd">bIN</span>, and <span class="cmd">biN</span> directories on
the system :  
</p>

<pre class="example" id="org339100e">
$ find / -type d -iname bin
</pre>

<p>
Notice there are no pattern symbols since we want, <i>specifically</i>,
only 'bin'&#x2026;not entries <i>containing</i> 'bin'.
</p>
</div>
</div>

<div id="outline-container-org5ddfdab" class="outline-4">
<h4 id="org5ddfdab">Example</h4>
<div class="outline-text-4" id="text-org5ddfdab">
<p>
Find all files in the current directory <i>on down</i>:
</p>

<pre class="example" id="org37645ce">
$ find . -type f          # No pattern needed
</pre>
</div>
</div>

<div id="outline-container-orgb4ca933" class="outline-4">
<h4 id="orgb4ca933">Example</h4>
<div class="outline-text-4" id="text-orgb4ca933">
<p>
Find all items in your home directory tree structure which contain
the substring 'class':
</p>

<pre class="example" id="org22e1c88">
$ find ~ -name \*class\*
</pre>

<p>
If you prefer, you can change to your home directory first:
</p>

<pre class="example" id="orga067e34">
$ cd                               # Go to your home directory
$ find . -name \*class\*           # Notice '.' vs '~' from before
$ cd -                             # Go back to where you were
</pre>
</div>
</div>
</div>
<div id="outline-container-org23196ff" class="outline-3">
<h3 id="org23196ff">Pause the Script - <span class="cmd">sleep</span><a id="org454ff88"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org23196ff">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org1d71e4f">sleep</a></td></tr></table>
</p>

<p>
Sometimes we'll want to pause our script for a set amount of
time. To do so, use the <span class="cmd">sleep</span> command.
</p>

<p>
<span class="cmd">sleep</span> really only takes one parameter&#x2026;a number.  The
number, by default, is the number of seconds to pause:
</p>

<pre class="example" id="org274eda8">
# Pause for 1 second
sleep 1
</pre>

<p>
On some versions of <span class="cmd">sleep</span>, you can also use fractional numbers:
</p>

<pre class="example" id="org1a6c9a5">
# Pause for 30 seconds
sleep 0.5m
</pre>

<p>
If you want to <span class="cmd">sleep</span> longer, you may append
<span class="cmd">m</span>, <span class="cmd">h</span>, or <span class="cmd">d</span> for minutes, hours, or
days respectively: 
</p>

<pre class="example" id="orge27f18e">
# sleep for 30 minutes
sleep 0.5h

# sleep for 15 minutes
sleep 15m
</pre>

<p>
While not often used, you can even sleep for <span class="cmd">d</span>ays:
</p>

<pre class="example" id="org7197cfa">
# Sleep for 7 days
sleep 7d
</pre>
</div>



<div id="outline-container-org6ecf41b" class="outline-4">
<h4 id="org6ecf41b">Example</h4>
<div class="outline-text-4" id="text-org6ecf41b">
<p>
Sometimes, <span class="cmd">mkdir</span> takes longer than your script
execution.  So:
</p>

<pre class="example" id="orga5c371a">
mkdir subdir
cd subdir
</pre>

<p>
Results in the <span class="cmd">cd subdir</span> generating an error:
</p>

<pre class="example" id="org0819b69">
-bash: cd: subdir: No such file or directory
</pre>

<p>
One fix is to sleep a bit before changing into the direcotry:
</p>

<pre class="example" id="orgc2bde67">
mkdir subdir
sleep 1 
cd subdir
</pre>

<p>
One second is more than enough, but makes the script portable to
systems whose <span class="cmd">sleep</span> does not support fractions.
</p>
</div>
</div>
</div>
<div id="outline-container-org99b6be8" class="outline-3">
<h3 id="org99b6be8">Conditional Branching - <span class="cmd">if</span><a id="org3a82431"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org99b6be8">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgca9edf0">Bash 'if'</a></td></tr></table>
</p>

<p>
In Bash scripting, we also have an <span class="cmd">if</span> statement.  The
syntax of which is:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> CONDITION
<span style="color: #00ffff;">then</span>
    commands
<span style="color: #00ffff;">elif</span> CONDITION     <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Can have more than 1 'elif'</span>
<span style="color: #00ffff;">then</span>
    commands
<span style="color: #00ffff;">else</span>
    commands
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
If you prefer to have the <i>then</i> on the same line as the <i>if
condition</i>, include a semicolon after CONDITION:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> CONDITION; <span style="color: #00ffff;">then</span>
    commands
<span style="color: #00ffff;">elif</span> CONDITION; <span style="color: #00ffff;">then</span>
    commands
<span style="color: #00ffff;">else</span>
    commands
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Notice the "else if" in Bash is called <span class="cmd">elif</span>.  And like
other <span class="cmd">if</span> structures, the <span class="cmd">elif</span> and
<span class="cmd">else</span> portions are optional.
</p>
</div>

<div id="outline-container-org8f13f45" class="outline-4">
<h4 id="org8f13f45">CONDITION</h4>
<div class="outline-text-4" id="text-org8f13f45">
<p>
The CONDITION can be a variety of tests.  In traditional UNIXes,
they use a command called <span class="cmd">test</span>.  But the look of an
<span class="cmd">if</span> with <span class="cmd">test</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if </span><span style="color: #b0c4de;">test</span> blah blah; <span style="color: #00ffff;">then</span>
    commands
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Apparently didn't appeal to many people.  So, they came up with a
synonym called <span class="cmd">[</span>:
</p>

<pre class="example" id="org5dc07a8">
$ which [
/usr/bin/[

$ ls -alF /usr/bin/[
-rwxr-xr-x 1 root root 39464 Mar 14  2015 /usr/bin/[*
</pre>

<p>
So now our <span class="cmd">if</span> statements can look like:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [ blah blah; <span style="color: #00ffff;">then</span>
</pre>
</div>

<p>
And shells even allow us to close the bracket for better looks:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [ blah blah ]; <span style="color: #00ffff;">then</span>
</pre>
</div>

<p>
In modern Unixes, <span class="cmd">[</span> has much more functionality than
older systems.  However, for this class, we use <span class="cmd">[</span> for
basic tests.  For more robust testing, we'll use the Bash version:
</p>
</div>
</div>

<div id="outline-container-org3cc49d7" class="outline-4">
<h4 id="org3cc49d7">Bash Version</h4>
<div class="outline-text-4" id="text-org3cc49d7">
<p>
Bash went further to provide more tests/functionality.  So in
Bash, we use two '[' ([[) and two ']' (]]):
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #00ffff;">if</span> [[ blah blah ]]; then
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org6d13a8e" class="outline-3">
<h3 id="org6d13a8e"><span class="cmd">if</span> CONDITION Tests<a id="org045bc16"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6d13a8e">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgca9edf0">Bash 'if'</a></td></tr></table>
</p>

<p>
Testing within Bash <span class="cmd">if</span> statements can use a slew of
operators.  For this discussion let's review some unary operators
and binary operators.
</p>
</div>

<div id="outline-container-org785c3be" class="outline-4">
<h4 id="org785c3be">Unary Operators</h4>
<div class="outline-text-4" id="text-org785c3be">
<p>
Unary Operators are "switches" to <span class="cmd">test</span>/<span class="cmd">[[</span>
which perform checks of various kinds:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operator</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">-e file</td>
<td class="org-left">Does the 'file' exist?</td>
</tr>

<tr>
<td class="org-left">-f file</td>
<td class="org-left">Does the 'file' exist and is it a regular file?</td>
</tr>

<tr>
<td class="org-left">-r file</td>
<td class="org-left">Does the 'file' exist and is it readable?</td>
</tr>

<tr>
<td class="org-left">-w file</td>
<td class="org-left">Does the 'file' exist and is it writeable?</td>
</tr>

<tr>
<td class="org-left">-x file</td>
<td class="org-left">Does the 'file' exist and is it executable?</td>
</tr>

<tr>
<td class="org-left">-d file</td>
<td class="org-left">Does the 'file' exist and is it a directory?</td>
</tr>

<tr>
<td class="org-left">!</td>
<td class="org-left">Negation</td>
</tr>
</tbody>
</table>

<p>
For example: Write a script to edit a file, but if the file
doesn't exist create it first. 
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [[ -r mydata.txt ]]; <span style="color: #00ffff;">then</span>
    emacs mydata.txt
<span style="color: #00ffff;">else</span>
    touch mydata.txt
    emacs mydata.txt
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
or better yet:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [[ ! -r mydata.txt ]]; <span style="color: #00ffff;">then</span>
    touch mydata.txt
<span style="color: #00ffff;">fi</span>
emacs mydata.txt
</pre>
</div>

<p>
Challenge: <span class="cmd">-r</span> can tell you if something is <i>readable</i> -
including directories.  Had <span class="fname">mydata.txt</span> been a
directory name, things would not have gone the way we wanted.
Modify the logic to ensure <span class="fname">mydata.txt</span> is a file
before launching emacs.  Remember, you <i>can not</i> have a file with
the same name as a directory, <i>in the same location</i>.
</p>
</div>
</div>

<div id="outline-container-org8276667" class="outline-4">
<h4 id="org8276667">Binary Operators</h4>
<div class="outline-text-4" id="text-org8276667">
<p>
Binary operators can operate on either numbers or strings.  The
syntax is:
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #00ffff;">if</span> [[ OP1 <span style="color: #00ffff;">operator</span> <span style="color: #98fb98;">OP2</span> ]]; then
</pre>
</div>

<p>
The operators are
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operator</th>
<th scope="col" class="org-left">What</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">==</td>
<td class="org-left">Strings</td>
<td class="org-left">OP1 is equal to OP2 (alphanumerically)</td>
</tr>

<tr>
<td class="org-left">!=</td>
<td class="org-left">Strings</td>
<td class="org-left">OP1 is NOT equal to OP2 (alphanumerically)</td>
</tr>

<tr>
<td class="org-left">&lt;</td>
<td class="org-left">Strings</td>
<td class="org-left">OP1 is less than OP2 (alphanumerically)</td>
</tr>

<tr>
<td class="org-left">&gt;</td>
<td class="org-left">Strings</td>
<td class="org-left">OP1 is greater than OP2 (alphanumerically)</td>
</tr>

<tr>
<td class="org-left">-lt</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is less than OP2</td>
</tr>

<tr>
<td class="org-left">-le</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is less than or equal to OP2</td>
</tr>

<tr>
<td class="org-left">-eq</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is equal to OP2</td>
</tr>

<tr>
<td class="org-left">-ne</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is not equal to OP2</td>
</tr>

<tr>
<td class="org-left">-gt</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is greater than OP2</td>
</tr>

<tr>
<td class="org-left">-ge</td>
<td class="org-left">Numbers</td>
<td class="org-left">OP1 is greater than or equal to OP2</td>
</tr>
</tbody>
</table>

<p>
We also have logical operators &amp;&amp; and || along with ! for
negation.  &amp;&amp; and || perform the same as in other languages.
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [[ <span style="color: #ffa07a;">"$answer"</span> == <span style="color: #ffa07a;">"done"</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">do something</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">or</span>

<span style="color: #00ffff;">if</span> [[ $<span style="color: #eedd82;">y</span> -lt 100 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">do something</span>
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Negation also works with binary operators:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [[ ! ( <span style="color: #ffa07a;">"$answer"</span> == <span style="color: #ffa07a;">"done"</span> &amp;&amp; $<span style="color: #eedd82;">y</span> -ge 100 ) ]]; <span style="color: #00ffff;">then</span>
</pre>
</div>

<p>
Notice we need double quotes around our string variable <i>and</i> the string to
compare.  The reason for this is beyond the scope of the
curriculum.  It has to do with Bash's pattern matching engine.  So
for now, when you want to compare strings, whether in variables or
not, surround them in double quotes.  (Numbers do not need quotes
since they do not use the '<code>='/'!</code>' operators.)
</p>
</div>
</div>
</div>
<div id="outline-container-org0a8001d" class="outline-3">
<h3 id="org0a8001d"><span class="cmd">for</span> Loop<a id="orge2dfdd2"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org0a8001d">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org3bd2459">Bash 'for'</a></td></tr></table>
</p>

<p>
In Bash, we'll often want to loop over values.  The most common way
of doing this is using the <span class="cmd">for-in</span> structure of a
<span class="cmd">for</span> loop:
</p>

<pre class="example" id="orgb22a9ff">
for VARIABLE in VALUES
do
   {commands}
done
</pre>

<p>
Or, again, you may prefer the following form:
</p>

<pre class="example" id="org4c63a33">
for VARIABLE in VALUES; do   # 'do' on same line separated with ';'
  {commands}
done
</pre>

<p>
Example: print the values from 1 to 5:
</p>

<pre class="example" id="org3226e3a">
$ for X in 1 2 3 4 5; do
&gt;   echo $X
&gt; done
1
2
3
4
5
$
</pre>
</div>
<div id="outline-container-org2d75e8f" class="outline-4">
<h4 id="org2d75e8f">VARIABLE</h4>
<div class="outline-text-4" id="text-org2d75e8f">
<p>
The VARIABLE can be any standard Bash identifier.  Notice the
variable does not have the <span class="cmd">$</span> when "declared" in the
<span class="cmd">for</span> statement, but <b>does</b> have the <span class="cmd">$</span> when
you want to interpolate.
</p>
</div>
</div>

<div id="outline-container-org14f31c9" class="outline-4">
<h4 id="org14f31c9">VALUES</h4>
<div class="outline-text-4" id="text-org14f31c9">
<p>
The values are a whitespace delimited list of elements.  These elements
can be numbers, strings, file names, etc.
</p>

<p>
For example, perhaps our workflow has all <span class="cmd">.c</span> source
files starting with a comment containing the filename and the date the
file was last modified.  Display that information for all
<span class="cmd">.c</span> files in the current directory:
</p>

<pre class="example" id="org9a093f5">
$ for f in *.c; do
&gt;  head -n 1 $f
&gt; done
/* utilities.c : 2019/04/08 @ 2:45pm */
/* linked_list.c : 2020/11/14 @ 1:55am */
/* main.c : 1965/01/01 @ 12:00am */
$
</pre>

<p>
Notice this was done on the command line, <i>not</i> in a script.
Remember, scripts are just a collection of commands placed in a file to
help with automation and repeatable results.
</p>
</div>
</div>

<div id="outline-container-orgad1271d" class="outline-4">
<h4 id="orgad1271d">Command Output as VALUES</h4>
<div class="outline-text-4" id="text-orgad1271d">
<p>
You can even use a command output as the VALUES via command
substitution.  Consider a 
<i>file</i> called <span class="fname">content.txt</span> which contains a list of
<span class="cmd">.c</span> file names. 
</p>

<p>
Do the same as the previous example (list the first line), but
only for the files within <span class="cmd">content.txt</span>:
</p>

<pre class="example" id="orga0d7222">
for FILE in $(cat content.txt); do
  head -n 1 $FILE
done
</pre>

<p>
Notice the identifier was chosen as 'FILE' this time vs 'f'.  Loop
variables do not need to be a single char nor do they need to be
all caps.  Normal Bash variable identifier rules apply.
</p>

<p>
Here's another example: write the code to display each file name
and its size using <span class="cmd">stat</span>:
</p>

<p>
Remember, <span class="cmd">stat</span> has the <span class="cmd">-t</span> option where the
file size is the 2nd value.  One method may be:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">for</span> f<span style="color: #00ffff;"> in</span> *.c; <span style="color: #00ffff;">do</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"$f : $(</span><span style="color: #fa8072;">stat</span><span style="color: #ffa07a;"> -t $f | cut -d' ' -f2)"</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
However, since <span class="cmd">stat</span> allows us to use the
<span class="cmd">--format</span> switch to customize a format, we can actually
do this:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">for</span> f<span style="color: #00ffff;"> in</span> *.c; <span style="color: #00ffff;">do</span>
    stat --format=<span style="color: #ffa07a;">"%n : %s"</span> $<span style="color: #eedd82;">f</span>       <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">or: stat --format="$f : %s" $f</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb6a320b" class="outline-4">
<h4 id="orgb6a320b">WARNING: File Names with Spaces</h4>
<div class="outline-text-4" id="text-orgb6a320b">
<p>
File names with spaces may mess up your commands inside the
<span class="cmd">for</span> loop.  
</p>

<p>
Suppose we have a file called <span class="cmd">my file.txt</span>.  This is
what the <span class="cmd">stat</span> command would look like:
</p>

<pre class="example" id="org0e0d098">
$ stat -t my file.txt
</pre>

<p>
This results in Bash passing to <span class="cmd">stat</span>, a file called
<span class="fname">my</span> and another file called <span class="fname">file.txt</span>&#x2026;not correct.
</p>

<p>
To remedy this, surround the variable (file name) with double quotes for
safety:
</p>

<pre class="example" id="org9b26a23">
$ for f in *.c; do          # Notice the use of file globbing?
&gt; stat -t "$f"              #  Remember this.
&gt; done
{ cool output }
$
</pre>

<p>
Now, the <span class="cmd">stat</span> command would see:
</p>

<pre class="example" id="orgc6f53bf">
$ stat -t "my file.txt"
</pre>

<p>
and properly process the file.
</p>
</div>
</div>

<div id="outline-container-org6809f4b" class="outline-4">
<h4 id="org6809f4b">WARNING 2: File Names with Spaces version 2</h4>
<div class="outline-text-4" id="text-org6809f4b">
<p>
Remember, the VALUES of our <span class="cmd">for</span> loop are whitespace
delimited.  If a file name contains a space, it can still mess up what
<span class="cmd">for</span> assigns to VARIABLE <i>when file globbing is not involved</i>.
</p>

<p>
Consider a collection of files called <span class="fname">my file1.txt</span>,
<span class="fname">my file2.txt</span>, 
<span class="fname">my file3.txt</span>,&#x2026;, <span class="fname">my file5.txt</span>.
</p>

<div class="org-src-container">
<pre class="src src-sh">$ for f<span style="color: #00ffff;"> in</span> *.txt; <span style="color: #00ffff;">do</span>
&gt; stat -t $<span style="color: #eedd82;">f</span>                  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice the lack of double quotes!!</span>
&gt; done
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file1.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file2.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file3.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file4.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file5.txt'</span>: No such file or directory


$ for f<span style="color: #00ffff;"> in</span> *.txt; <span style="color: #00ffff;">do</span>     
&gt; stat -t <span style="color: #ffa07a;">"$f"</span>             <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now let's include double quotes</span>
&gt; done
my file1.txt 0 0 8180 1000 1000 fe01 524510 1 0 0 1569366947 1569366911 1569366911 0 4096
my file2.txt 0 0 8180 1000 1000 fe01 524511 1 0 0 1569366947 1569366911 1569366911 0 4096
my file3.txt 0 0 8180 1000 1000 fe01 524512 1 0 0 1569366947 1569366911 1569366911 0 4096
my file4.txt 0 0 8180 1000 1000 fe01 524513 1 0 0 1569366947 1569366911 1569366911 0 4096
my file5.txt 0 0 8180 1000 1000 fe01 524514 1 0 0 1569366947 1569366911 1569366911 0 4096

$ for f<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">ls</span> *.txt); <span style="color: #00ffff;">do</span>          <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Slightly different format!!</span>
&gt; stat -t <span style="color: #ffa07a;">"$f"</span>
&gt; done
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file1.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file2.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file3.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file4.txt'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'my'</span>: No such file or directory
stat: cannot stat <span style="color: #ffa07a;">'file5.txt'</span>: No such file or directory
</pre>
</div>

<p>
The reason is the <i>return value</i> of the command substitution
does not maintain the "space as part of a filename" integrity.
</p>

<p>
We'll see how to solve this in a little bit.
</p>
</div>
</div>
</div>
<div id="outline-container-orgf859d0d" class="outline-3">
<h3 id="orgf859d0d"><span class="cmd">while</span> Loop<a id="org392eb75"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf859d0d">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org7654b15">Bash 'while'</a></td></tr></table>
</p>

<p>
In Bash, there are two forms of the <span class="cmd">while</span> loop:
</p>

<pre class="example" id="org176e485">
while CONDITION; do            # As with "for", you can put 'do' on a line of
  # commands                     #    its own and ignore the ';'
done
</pre>

<p>
and
</p>

<pre class="example" id="org8467f24">
until CONDITION; do
  # commands
done
</pre>

<p>
The difference is the first will loop as long as the CONDITION
holds <i>true</i> while the second will loop as long as the
CONDITION holds <i>false</i>.
</p>

<p>
WARNING: The body of the loops must not be empty.  So if you have
nothing to do (just waiting on the condition to change, use
<span class="cmd">sleep 1</span> or a dummy variable assignment <span class="cmd">x=0</span>.
</p>
</div>
<div id="outline-container-org8253838" class="outline-4">
<h4 id="org8253838">CONDITION</h4>
<div class="outline-text-4" id="text-org8253838">
<p>
The CONDITION can be the result of a command or a logical
comparison using [[]] as in the <span class="cmd">if</span>
</p>

<pre class="example" id="org316e7db">
# Do commands as long as file.txt can not be read
while [[ ! -r file.txt ]]; do
   # commands
done
</pre>

<pre class="example" id="org51ec68f">
# Do commands until file.txt can be executed
#   i.e. loop as long as file.txt can NOT be executed
until [[ -x file.txt ]]; do
  # commands
done
</pre>

<p>
You can also have the mathematical tests:
</p>

<pre class="example" id="org89b0bd5">
# Loop while $x &lt;= 5
while [[ $x -le 5 ]]; do
   # commands
done
</pre>

<p>
Notice we are using <span class="cmd">$x</span> as a numeric value and not a
string&#x2026;so no need for double quotes.
</p>
</div>
</div>

<div id="outline-container-org5ef38b7" class="outline-4">
<h4 id="org5ef38b7">Truth in Bash</h4>
<div class="outline-text-4" id="text-org5ef38b7">
<p>
With <span class="cmd">[[]]</span>, there really is no <i>true</i> or <i>false</i> in
Bash.  There is only 
success or failure.  Success is usually an evaluated result of 0
and anything else is failure.  
</p>

<p>
This is contrary to what you already know about other languages.
Additionally, 0 is not success in and of itself:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ if [[ 0 ]]; <span style="color: #00ffff;">then</span>
&gt;   echo <span style="color: #ffa07a;">"Success"</span>           <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">This is not in a script, but typed straight</span>
&gt; else                       <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">into the Bash prompt. Hence the '&gt;' symbols</span>
&gt;   echo <span style="color: #ffa07a;">"Failure"</span>           <span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">waiting for more input until I reach the 'fi'</span>
&gt; fi
Success
$ if [[ 1 ]]; <span style="color: #00ffff;">then</span>
&gt;   echo <span style="color: #ffa07a;">"Success"</span>
&gt; else
&gt;   echo <span style="color: #ffa07a;">"Failure"</span>
&gt; fi
Success
</pre>
</div>

<p>
What the <span class="cmd">[[]]</span> conditions are checking are <i>return values</i>, not what
you're typing (i.e. not a 1 or 0).
</p>

<p>
To force <i>true</i> or <i>false</i>, you can either force the test to be
wrong (i.e. 0 -eq 1), or don't use <span class="cmd">[[]]</span> at all since
you don't want to 
test anything.  Instead, use the command <span class="cmd">true</span> and
<span class="cmd">false</span> which provide return values accordingly:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ if true; <span style="color: #00ffff;">then</span>
&gt;   echo <span style="color: #ffa07a;">"Success"</span>
&gt; else            
&gt;   echo <span style="color: #ffa07a;">"Failure"</span>
&gt; fi
Success
$ if false; <span style="color: #00ffff;">then</span>
&gt;   echo <span style="color: #ffa07a;">"Success"</span>
&gt; else
&gt;   echo <span style="color: #ffa07a;">"Failure"</span>
&gt; fi
Failure
</pre>
</div>
</div>
</div>
<div id="outline-container-orgcd91159" class="outline-4">
<h4 id="orgcd91159">Solution: Spaces in File Names - SIDEBAR</h4>
<div class="outline-text-4" id="text-orgcd91159">
<p>
<i>This portion is not on exams this semester.</i>
</p>

<p>
Remember the problem with spaces in file names when using command
substitution for the list of values in a <span class="cmd">for</span> loop?
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">for</span> FILE<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">ls</span> *.txt); <span style="color: #00ffff;">do</span>
    stat -t <span style="color: #ffa07a;">"$FILE"</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<pre class="example" id="orgeeb2345">
$ for FILE in $(ls *.txt); do          # Slightly different format!!
&gt; stat -t "$FILE"
&gt; done
stat: cannot stat 'my': No such file or directory
stat: cannot stat 'file1.txt': No such file or directory
stat: cannot stat 'my': No such file or directory
stat: cannot stat 'file2.txt': No such file or directory
stat: cannot stat 'my': No such file or directory
stat: cannot stat 'file3.txt': No such file or directory
stat: cannot stat 'my': No such file or directory
stat: cannot stat 'file4.txt': No such file or directory
stat: cannot stat 'my': No such file or directory
stat: cannot stat 'file5.txt': No such file or directory
</pre>

<p>
The way to solve this is using <span class="cmd">while</span> and
<span class="cmd">read</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh">ls *.txt | <span style="color: #00ffff;">while </span><span style="color: #b0c4de;">read</span> FILE; <span style="color: #00ffff;">do</span>
    stat -t <span style="color: #ffa07a;">"$FILE"</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<pre class="example" id="orgd1f9226">
$ ls *.txt | while read FILE; do
&gt; stat -t "$FILE"
&gt; done
my file1.txt 0 0 8180 1000 1000 fe01 524510 1 0 0 1569366947 1569366911 1569366911 0 4096
my file2.txt 0 0 8180 1000 1000 fe01 524511 1 0 0 1569366947 1569366911 1569366911 0 4096
my file3.txt 0 0 8180 1000 1000 fe01 524512 1 0 0 1569366947 1569366911 1569366911 0 4096
my file4.txt 0 0 8180 1000 1000 fe01 524513 1 0 0 1569366947 1569366911 1569366911 0 4096
my file5.txt 0 0 8180 1000 1000 fe01 524514 1 0 0 1569366947 1569366911 1569366911 0 4096
</pre>

<p>
Remember how <span class="cmd">read</span> works, it takes whatever the user
typed, up to but not including the newline, and assigned it to the
variable.  By using the pipe, we take advantage of that and the
entire line, in this case the file name with spaces, is assigned
to the variable <span class="cmd">FILE</span>.
</p>
</div>
</div>
</div>
<div id="outline-container-org141ed89" class="outline-3">
<h3 id="org141ed89">Day 14 Summary<a id="orgfe4c878"></a></h3>
<div class="outline-text-3" id="text-org141ed89">
</div>
<div id="outline-container-orgb18d2cd" class="outline-4">
<h4 id="orgb18d2cd">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orgb18d2cd">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org653c94e" class="outline-4">
<h4 id="org653c94e">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org653c94e">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org74a8ed5" class="outline-2">
<h2 id="org74a8ed5">Day 15 - Mon, October 13, 2025<a id="org05e67ac"></a></h2>
<div class="outline-text-2" id="text-org74a8ed5">
</div>
<div id="outline-container-org757b9bc" class="outline-3">
<h3 id="org757b9bc">Day 15 Introduction<a id="orga79e58b"></a></h3>
<div class="outline-text-3" id="text-org757b9bc">
</div>
<div id="outline-container-orga046eaf" class="outline-4">
<h4 id="orga046eaf">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orga046eaf">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2b57176" class="outline-3">
<h3 id="org2b57176"><span class="cmd">sed</span> - Stream Editor<a id="orgc1b3c56"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2b57176">
<ul class="org-ul">
<li>Makes basic changes to text</li>
<li>Can operate on files or STDIN</li>
<li>Uses "scripting syntax" on command line or from a file</li>
</ul>
</div>

<div id="outline-container-org0785536" class="outline-4">
<h4 id="org0785536">Switches</h4>
<div class="outline-text-4" id="text-org0785536">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Switch</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">i[suffix]</td>
<td class="org-left">Perform work in-line; backup file using suffix (no space!)</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orge8c04af" class="outline-4">
<h4 id="orge8c04af">Syntax</h4>
<div class="outline-text-4" id="text-orge8c04af">
<pre class="example" id="orgf0f0cbf">
$ sed [ -i[suffix] ] 'sed script' filename

$ &lt;pipeline&gt; | sed 'sed script'

</pre>

<p>
Note: Make sure there is no <i>space</i> between the <span class="cmd">-i</span> and
the suffix!
</p>

<p>
Example:
</p>

<pre class="example" id="org2872768">
$ echo hello
hello
$ echo hello | sed 's/h/H/'
Hello
$
</pre>
</div>
</div>

<div id="outline-container-org69dd07e" class="outline-4">
<h4 id="org69dd07e"><span class="cmd">sed</span> Script Basics<a id="org6da4d55"></a></h4>
<div class="outline-text-4" id="text-org69dd07e">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Command</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">s/RE/text/[g]</td>
<td class="org-left">Substitute RE with text, optionally global (without [])</td>
</tr>

<tr>
<td class="org-left">y/src/dst/</td>
<td class="org-left">Replace char in src with char in dst, position by position</td>
</tr>

<tr>
<td class="org-left">/RE/ cmd</td>
<td class="org-left">Perform cmd only on lines matching RE; / / required</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org3e648c9" class="outline-4">
<h4 id="org3e648c9">Examples</h4>
<div class="outline-text-4" id="text-org3e648c9">
</div>
<div id="outline-container-org1c9f7b6" class="outline-5">
<h5 id="org1c9f7b6">Example #1</h5>
<div class="outline-text-5" id="text-org1c9f7b6">
<p>
Replace 'o' with 'O':
</p>

<pre class="example" id="org1b5e2b4">
$ cat file.txt
Hollo
World
$ sed 's/o/O/' file.txt
HOllo
WOrld
$
</pre>

<p>
Notice only the 1st 'o' in "Hollo" was changed.
</p>

<p>
So to change all 'o's in a line, we use the <span class="cmd">g</span> modifier
</p>
<pre class="example" id="org18467d6">
$ cat file.txt
Hollo
World
$ sed 's/o/O/g' file.txt
HOllO
WOrld
$
</pre>
</div>
</div>

<div id="outline-container-org31c6727" class="outline-5">
<h5 id="org31c6727">Example 2</h5>
<div class="outline-text-5" id="text-org31c6727">
<p>
Consider the file:
</p>

<pre class="example" id="org5dec134">
Line #1
Line #2
Line #3
</pre>

<p>
Replace line 2 with "&#x2014;":
</p>

<pre class="example" id="org1881ed7">
$ cat file.txt 
Line #1
Line #2
Line #3
$ cat file.txt | sed '/2/ s/Line #2/---/'
Line #1
---
Line #3
$ 
</pre>
</div>
</div>

<div id="outline-container-orge665276" class="outline-5">
<h5 id="orge665276">Example 3</h5>
<div class="outline-text-5" id="text-orge665276">
<p>
Presume you have a letter template in a file called
<span class="cmd">template.txt</span>.  Within that template are keywords meant
to be replaced with a specific value:
</p>

<pre class="example" id="org5138a02">
Dear USER,

Your account is created and your password is PASSWORD.

--Admin
</pre>

<p>
Presuming the user is 'bdorf' and their password is 'password123',
we can use <span class="cmd">sed</span> to replace the values accordingly and
save the result in a new file:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ sed <span style="color: #ffa07a;">'s/USER/bdorf/'</span> template.txt | sed <span style="color: #ffa07a;">'s/PASSWORD/password123/'</span> &gt; bdorf_email.txt
$ cat bdorf_email.txt
Dear bdorf,

Your account is created and your password is password123.

--Admin
$
</pre>
</div>

<p>
Alternatively, since <span class="cmd">sed</span> can get input via pipe:
</p>

<pre class="example" id="orgc43d01f">
$ cat template.txt | sed 's/USER/bdorf/' | sed 's/PASSWORD/password123/' &gt; bdorf_email.txt
</pre>

<p>
Or, we can even do this:
</p>
<pre class="example" id="org82eee81">
$ cp template.txt bdorf_email.txt
$ sed -i 's/USER/bdorf/' bdorf_email.txt
$ sed -i 's/PASSWORD/password123/' bdorf_email.txt
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org742e0cd" class="outline-3">
<h3 id="org742e0cd"><span class="cmd">awk</span> - Pattern Scanning and Processing Language<a id="org11cd693"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org742e0cd">
<ul class="org-ul">
<li>Similar to <span class="cmd">sed</span>
<ul class="org-ul">
<li>Line oriented</li>
<li><i>pattern</i> { <i>action</i> }</li>
<li>Missing <i>pattern</i>, <i>action</i> is performed on every line</li>
</ul></li>
<li>Splits lines on fields using whitespace as delimiter (by default)
<ul class="org-ul">
<li>Print selected fields.</li>
</ul></li>
</ul>
</div>

<div id="outline-container-org098036c" class="outline-4">
<h4 id="org098036c">Syntax</h4>
<div class="outline-text-4" id="text-org098036c">
<pre class="example" id="org323c885">
$ &lt;input&gt; | awk 'awk_code'

$ awk 'awk_code' filename
</pre>

<p>
Where <i>awk_code</i> is:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">{}</td>
<td class="org-left">Code block</td>
</tr>

<tr>
<td class="org-left">print VAR[,VAR]</td>
<td class="org-left">Print (list of) VAR</td>
</tr>

<tr>
<td class="org-left">/RE/ {cmd}</td>
<td class="org-left">Perform cmd only on lines matching RE; / / required</td>
</tr>
</tbody>
</table>
</div>
</div>



<div id="outline-container-orgeac7816" class="outline-4">
<h4 id="orgeac7816">Switches</h4>
<div class="outline-text-4" id="text-orgeac7816">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Switch</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">-F 'c'</td>
<td class="org-left">Field separator (default is whitespace)</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orgbdb0ac3" class="outline-4">
<h4 id="orgbdb0ac3">Positions</h4>
<div class="outline-text-4" id="text-orgbdb0ac3">
<p>
When a line is split, the first positions can be accessed via $1,
$2, etc.
</p>

<ul class="org-ul">
<li>Not limited to $9 like Bash</li>
</ul>
</div>
</div>


<div id="outline-container-orgdb9c4cb" class="outline-4">
<h4 id="orgdb9c4cb">Example</h4>
<div class="outline-text-4" id="text-orgdb9c4cb">
<p>
Given the sentence "Hello, my name is Bob.", print the 3rd word:
</p>

<pre class="example" id="orgd27e95f">
$ # Since default field separate is space/tab, no need for -F
$ echo "Hello, my name is Bob." | awk '{print $3}'
name
$
</pre>

<p>
Repeat, but print the 2<sup>nd</sup> and 4<sup>th</sup> words.  Use a comma to
separate values via a space (or more specifically, the Field Separator):
</p>

<pre class="example" id="org6718a9c">
$ echo "Hello, my name is Bob." | awk '{print $2,$4}'
my is
$ 
</pre>

<p>
What if ',' is the FS?
</p>

<pre class="example" id="orgf0153d6">
$ echo "Hello, my name is Bob." | awk -F ',' '{print $1}'
Hello
$ echo "Hello, my name is Bob." | awk -F ',' '{print $2}'
 my name is Bob.
$
</pre>

<p>
Notice this last example included the space after the comma within
field #2.
</p>

<p>
As another example, users are stored in
<span class="cmd">/etc/passwd</span> separated by colons.  Use <span class="cmd">awk</span> to
print out only usernames (field 1):
</p>

<pre class="example" id="org1288402">
$ awk -F ':' '{print $1}' /etc/passwd
</pre>

<p>
Finally, take a look when there are multiple spaces in your lines:
</p>

<pre class="example" id="org2b80f7e">
$ ls -laF
total 64
drwx------  2 instructor instructor  4096 Oct 21 11:26 ./
drwxrwxrwt 22 root     root     57344 Oct 21 11:26 ../
-rw-------  1 instructor instructor    24 Oct 21 11:26 file.txt
$
$ ls -laF | awk '{print $3}'

instructor
root
instructor
$ ls -laF | cut -d' ' -f3        # Compare with 'cut'

2
root
1
$
</pre>

<p>
No more need for <span class="cmd">tr -s ' '</span>.
</p>
</div>
</div>
</div>
<div id="outline-container-orgb5c4c35" class="outline-3">
<h3 id="orgb5c4c35">Processes<a id="orgc7a7da1"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb5c4c35">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgc7a9425">Processes</a></td></tr></table>
</p>

<p>
Every program in Unix is a "process".  Processes are tasks the OS
needs to work on.
</p>

<p>
In Unix, when a program runs and becomes a process, it gets assigned
a "process identifier" or PID
</p>
<ul class="org-ul">
<li>Happens if program is run in "foreground" or "background".</li>
</ul>
</div>
</div>
<div id="outline-container-org847d96a" class="outline-3">
<h3 id="org847d96a">Viewing Current Processes<a id="org8c4ea74"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org847d96a">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgc7a9425">Processes</a></td></tr></table>
</p>

<p>
To view current processes, we use the <span class="cmd">ps</span> command:
</p>

<pre class="example" id="org4814413">
$ ps
  PID TTY          TIME CMD
 6339 pts/5    00:00:00 bash
 6544 pts/5    00:00:00 ps
$ 
</pre>

<p>
By default, <span class="cmd">ps</span> only shows current processes tied
to the current terminal device (pts/5 above).
</p>
</div>

<div id="outline-container-org4aa9ad8" class="outline-4">
<h4 id="org4aa9ad8">Viewing All Processes</h4>
<div class="outline-text-4" id="text-org4aa9ad8">
<p>
To view all of your processes associated with a terminal
users, add <span class="cmd">-a</span> to the <span class="cmd">ps</span>
command:
</p>

<pre class="example" id="orgacc6c42">
$ ps -a
6923 pts/0    00:00:00 tmux: client
7101 pts/3    00:00:00 sleep
7154 pts/4    00:00:00 su
7155 pts/4    00:00:00 bash
7162 pts/4    00:00:00 su
7163 pts/4    00:00:00 bash
7214 pts/4    00:00:00 sleep
7381 pts/2    00:00:00 ps
$
</pre>

<p>
Note: These are not (a)ll processes on the system.  Just your processes
tied to any terminal device (pts/X above).
</p>
</div>
</div>
<div id="outline-container-org5b01665" class="outline-4">
<h4 id="org5b01665">Print Process Hierarchy</h4>
<div class="outline-text-4" id="text-org5b01665">
<p>
Add the <span class="cmd">-H</span> switch to see the hierarchy of the
processes:
</p>

<pre class="example" id="org801f0e3">
$ ps -aH
  PID TTY          TIME CMD
 7154 pts/4    00:00:00 su
 7155 pts/4    00:00:00   bash
 7162 pts/4    00:00:00     su
 7163 pts/4    00:00:00       bash
 7214 pts/4    00:00:00         sleep
 7101 pts/3    00:00:00 sleep
 7406 pts/2    00:00:00 ps
 6923 pts/0    00:00:00 tmux: client
$ 
</pre>

<p>
Instead of <span class="cmd">-H</span>, use <span class="cmd">--forest</span> to see the
connections:
</p>

<pre class="example" id="org0a3ca30">
$ ps -a --forest
  PID TTY          TIME CMD
 7154 pts/4    00:00:00 su
 7155 pts/4    00:00:00  \_ bash
 7162 pts/4    00:00:00      \_ su
 7163 pts/4    00:00:00          \_ bash
 7214 pts/4    00:00:00              \_ sleep
 7101 pts/3    00:00:00 sleep
 7491 pts/2    00:00:00 ps
 6923 pts/0    00:00:00 tmux: client
$ 
</pre>
</div>
</div>

<div id="outline-container-org4486a9e" class="outline-4">
<h4 id="org4486a9e">Remove TTY Characteristic</h4>
<div class="outline-text-4" id="text-org4486a9e">
<p>
To include processes <b>not</b> bound to a tty, include <span class="cmd">x</span>:
</p>

<pre class="example" id="org62ea386">
$ ps -ax
 PID TTY      STAT   TIME COMMAND
    1 ?        Ss     0:01 /sbin/init
    2 ?        S      0:00 [kthreadd]
    3 ?        I&lt;     0:00 [rcu_gp]
    4 ?        I&lt;     0:00 [rcu_par_gp]
    6 ?        I&lt;     0:00 [kworker/0:0H-kblockd]
    8 ?        I&lt;     0:00 [mm_percpu_wq]
    9 ?        S      0:00 [ksoftirqd/0]
   10 ?        I      0:11 [rcu_sched]
   11 ?        I      0:00 [rcu_bh]
   12 ?        S      0:00 [migration/0]
   13 ?        I      0:01 [kworker/0:1-mm_percpu_wq]
   14 ?        S      0:00 [cpuhp/0]
   15 ?        S      0:00 [cpuhp/1]
   16 ?        S      0:00 [migration/1]
   17 ?        S      0:00 [ksoftirqd/1]
   19 ?        I&lt;     0:00 [kworker/1:0H-kblockd]
   20 ?        S      0:00 [cpuhp/2]
[...]
$
</pre>

<p>
However, this includes processes <i>you don't own</i>.
</p>
</div>
</div>

<div id="outline-container-orgb423385" class="outline-4">
<h4 id="orgb423385">Make Output User Friendly</h4>
<div class="outline-text-4" id="text-orgb423385">
<p>
To make the output user friendly (more info and easier to read),
add <span class="cmd">u</span>:
</p>

<pre class="example" id="orgdfef8a0">
$ ps -aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 169792 10456 ?        Ss   11:15   0:01 /sbin/init
root         2  0.0  0.0      0     0 ?        S    11:15   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        I&lt;   11:15   0:00 [rcu_gp]
root         4  0.0  0.0      0     0 ?        I&lt;   11:15   0:00 [rcu_par_gp]
root         6  0.0  0.0      0     0 ?        I&lt;   11:15   0:00 [kworker/0:0H-kblockd]
root         8  0.0  0.0      0     0 ?        I&lt;   11:15   0:00 [mm_percpu_wq]
root         9  0.0  0.0      0     0 ?        S    11:15   0:00 [ksoftirqd/0]
root        10  0.0  0.0      0     0 ?        I    11:15   0:11 [rcu_sched]
root        11  0.0  0.0      0     0 ?        I    11:15   0:00 [rcu_bh]
root        12  0.0  0.0      0     0 ?        S    11:15   0:00 [migration/0]
root        13  0.0  0.0      0     0 ?        I    11:15   0:01 [kworker/0:1-events]
root        14  0.0  0.0      0     0 ?        S    11:15   0:00 [cpuhp/0]
root        15  0.0  0.0      0     0 ?        S    11:15   0:00 [cpuhp/1]
root        16  0.0  0.0      0     0 ?        S    11:15   0:00 [migration/1]
root        17  0.0  0.0      0     0 ?        S    11:15   0:00 [ksoftirqd/1]
root        19  0.0  0.0      0     0 ?        I&lt;   11:15   0:00 [kworker/1:0H-kblockd]
root        20  0.0  0.0      0     0 ?        S    11:15   0:00 [cpuhp/2]
root        21  0.0  0.0      0     0 ?        S    11:15   0:00 [migration/2]
root        22  0.0  0.0      0     0 ?        S    11:15   0:00 [ksoftirqd/2]
[...]
$
</pre>
</div>
</div>

<div id="outline-container-org9346aba" class="outline-4">
<h4 id="org9346aba">More Command Info</h4>
<div class="outline-text-4" id="text-org9346aba">
<p>
Add <span class="cmd">w</span> if you want even more command information, if it
exists (notice I changed to 'root' access):
</p>

<pre class="example" id="org436ecb8">
$ ps -auxw
{output too long for display}
$
</pre>
</div>
</div>

<div id="outline-container-org674f377" class="outline-4">
<h4 id="org674f377">Heirarchy Info</h4>
<div class="outline-text-4" id="text-org674f377">
<p>
When using <span class="cmd">u</span> and/or <span class="cmd">x</span>, <span class="cmd">H</span> will not
generate the hierarchy, you'll need <span class="cmd">--forest</span>:
</p>

<pre class="example" id="org77a8cd7">

$ ps -auH
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND                                         
root      1051  3.9  2.0 742488 340624 tty7    Ssl+ 11:15  13:41 /usr/lib/xorg/Xorg :0 -seat seat0 -auth /var/run/
root      1051  0.0  2.0 742488 340624 tty7    Ssl+ 11:15   0:00 /usr/lib/xorg/Xorg :0 -seat seat0 -auth /var/run/
root      1051  0.0  2.0 742488 340624 tty7    Ssl+ 11:15   0:00 /usr/lib/xorg/Xorg :0 -seat seat0 -auth /var/run/
root      1051  0.0  2.0 742488 340624 tty7    Ssl+ 11:15   0:19 /usr/lib/xorg/Xorg :0 -seat seat0 -auth /var/run/
root      1052  0.0  0.0   5612  1652 tty1     Ss+  11:15   0:00 /sbin/agetty -o -p -- \u --noclear tty1 linux   
bdorf  4917  0.0  0.0   8536  5372 pts/0    Ss   15:48   0:00 bash                                            
bdorf  6923  0.0  0.0  10872  3236 pts/0    S+   16:51   0:00 tmux                                            
bdorf  6926  0.0  0.0   8120  4876 pts/2    Ss   16:51   0:00 -bash                                           
bdorf  7049  0.0  0.0   7988  4812 pts/3    Ss   16:52   0:00 -bash                                           
bdorf  7101  0.0  0.0   5260   748 pts/3    S+   16:52   0:00 sleep 5555                                      
bdorf  7102  0.0  0.0   7988  4808 pts/4    Ss   16:52   0:00 -bash                                           
root      7154  0.0  0.0   9952  3540 pts/4    S    16:52   0:00 su -                                            
root      7155  0.0  0.0   7916  4696 pts/4    S    16:52   0:00 -bash                                           
root      7162  0.0  0.0   9820  3412 pts/4    S    16:52   0:00 su - bdorf                                   
bdorf  7163  0.0  0.0   8048  4720 pts/4    S    16:52   0:00 -bash                                           
bdorf  7214  0.0  0.0   5260   744 pts/4    S+   16:53   0:00 sleep 7777                                      
bdorf  7536  0.0  0.0  10916  3200 pts/2    R+   17:03   0:00 ps -auH                                         
$ 
</pre>

<p>
Notice, no hierarchy.  So&#x2026;
</p>

<pre class="example" id="org6a80ff8">

$ ps -au --forest
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
bdorf  7102  0.0  0.0   7988  4808 pts/4    Ss   16:52   0:00 -bash
root      7154  0.0  0.0   9952  3540 pts/4    S    16:52   0:00  \_ su -
root      7155  0.0  0.0   7916  4696 pts/4    S    16:52   0:00      \_ -bash
root      7162  0.0  0.0   9820  3412 pts/4    S    16:52   0:00          \_ su - bdorf
bdorf  7163  0.0  0.0   8048  4720 pts/4    S    16:52   0:00              \_ -bash
bdorf  7214  0.0  0.0   5260   744 pts/4    S+   16:53   0:00                  \_ sleep 7777
bdorf  7049  0.0  0.0   7988  4812 pts/3    Ss   16:52   0:00 -bash
bdorf  7101  0.0  0.0   5260   748 pts/3    S+   16:52   0:00  \_ sleep 5555
bdorf  6926  0.0  0.0   8120  4876 pts/2    Ss   16:51   0:00 -bash
bdorf  7550  0.0  0.0  10916  3160 pts/2    R+   17:04   0:00  \_ ps -au --forest
bdorf  4917  0.0  0.0   8536  5372 pts/0    Ss   15:48   0:00 bash
bdorf  6923  0.0  0.0  10872  3236 pts/0    S+   16:51   0:00  \_ tmux
root      1051  4.0  2.0 742128 340660 tty7    Ssl+ 11:15  14:02 /usr/lib/xorg/Xorg :0 -seat seat0 -auth /var/run/
root      1052  0.0  0.0   5612  1652 tty1     Ss+  11:15   0:00 /sbin/agetty -o -p -- \u --noclear tty1 linux
$ 
</pre>

<p>
NOTE: Apparently newer versions of <span class="cmd">ps</span> will generate the
hierarchy via <span class="cmd">H</span>, but using only indentations.  You'll
need to test the machine's version to find out.
</p>
</div>
</div>
</div>
<div id="outline-container-orgbf82b32" class="outline-3">
<h3 id="orgbf82b32">Killing a Process<a id="org7687db3"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgbf82b32">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#orgc7a9425">Processes</a></td></tr></table>
</p>

<p>
Often a program stalls or enters a state where Control-C may  not
work.  Or, the process is in the backround and we're not able to
interact with it.
</p>

<p>
To terminate a process, use the <span class="cmd">kill</span> command followed by
the PID to terminate:
</p>

<pre class="example" id="org38bcf59">
$ kill 1514
$
</pre>

<p>
This tells the process to terminate nicely/properly.
</p>
</div>

<div id="outline-container-org1a30eb9" class="outline-4">
<h4 id="org1a30eb9">Reread Config Files</h4>
<div class="outline-text-4" id="text-org1a30eb9">
<p>
<span class="cmd">kill</span> can be used to virtually restart a process by
passing <span class="cmd">kill</span> a <span class="cmd">-HUP</span> switch, or <i>signal</i>, to
a PID.  Shown below, <span class="cmd">kill</span> is telling the process to reinitialize
itself. 
</p>

<pre class="example" id="orge437b7d">
# kill -HUP 721
#
</pre>

<p>
Note: This requires the process having been programmed to support
this signal.
</p>
</div>
</div>
<div id="outline-container-org90421f5" class="outline-4">
<h4 id="org90421f5">Normal Termination</h4>
<div class="outline-text-4" id="text-org90421f5">
<p>
The killing of a process described above <span class="cmd">kill PID</span> uses
a default signal called <span class="cmd">-TERM</span>.  If we wanted we could
send this signal explicitly:
</p>

<pre class="example" id="orgdd0d090">
# kill -TERM 721
#
</pre>

<p>
This is the same as
</p>

<pre class="example" id="org97e2f98">
# kill 721
#
</pre>
</div>
</div>

<div id="outline-container-org52fb49a" class="outline-4">
<h4 id="org52fb49a">Harsh Termination</h4>
<div class="outline-text-4" id="text-org52fb49a">
<p>
Sometimes a process will not terminate nicely.  In this case, we
can pass the <span class="cmd">-KILL</span> signal which has the OS terminate
the process without letting the process end nicely. 
</p>

<pre class="example" id="orgb650b96">
# kill -KILL 721
#
</pre>

<p>
WARNING: Terminating a process does not allow the process to flush
buffers and close files properly.  This can result in lost data or
damaged files.
</p>
</div>
</div>
</div>
<div id="outline-container-orgad6ff1a" class="outline-3">
<h3 id="orgad6ff1a">Jobs and Job Control&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span>&#xa0;<span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgad6ff1a">
<p>
In Unix, a "job" is like a process but its context is only within
the session you're in (processes exist outside of sessions).
(Sessions ~= current shell)
</p>

<pre class="example" id="org67e9407">
$ sleep 5555
</pre>

<p>
This job is running (in the foreground) in a terminal and will end
if the terminal ends.
</p>
</div>

<div id="outline-container-org4705da5" class="outline-4">
<h4 id="org4705da5">Background Jobs</h4>
<div class="outline-text-4" id="text-org4705da5">
<p>
In the previous example, our terminal is held up until the job
ends.
</p>

<p>
To launch a job and give the shell prompt back so you can do more
("put the job in the background"), add <span class="cmd">&</span> to the
command:
</p>

<pre class="example" id="org94dc373">
$ sleep 5555&amp;
[1] 7767
$
</pre>

<p>
The [1] is the job number within the shell and 7767 is
the PID.  
</p>

<p>
Alternatively, had the job already been started:
</p>

<pre class="example" id="org4037610">
$ sleep 5555
</pre>

<p>
we can place it in the background by pressing Control-z and typing <span class="cmd">bg</span>:
</p>
<pre class="example" id="orgafcd9a9">
$ sleep 5555
{C-z}
[1]+  Stopped                 sleep 5555
$ bg
[1]+ sleep 5555 &amp;
$

</pre>

<p>
If you have a pipeline and want the whole thing put in the
background, put your pipeline in parens followed by the
<span class="cmd">&</span>.
</p>

<p>
Compare this example:
</p>
<pre class="example" id="org4efbd9f">
$ echo "dog" ; sleep 5 ; echo "cat" &amp;
dog
{waiting 5 secs...}
[1] NNNN                 # NNNN is PID of 'echo "cat"'
cat
[1]+  Done  
$
</pre>

<p>
with this one:
</p>

<pre class="example" id="orgb4a15eb">
$ ( echo "dog" ; sleep 5 ; echo "cat" )&amp;
[1] 9114
dog
$ {Waiting 5 secs...}cat
{cursor here waiting from last prompt} &lt;ENTER&gt;
[1]+  Done                    ( echo "dog"; sleep 5; echo "cat" )                                                           
$
</pre>
</div>
</div>

<div id="outline-container-org22529d2" class="outline-4">
<h4 id="org22529d2">Listing and Killing Jobs</h4>
<div class="outline-text-4" id="text-org22529d2">
<p>
To list currently backgrounded jobs, use the <span class="cmd">jobs</span>
command.  To terminate them, use <span class="cmd">kill</span>.  By using <span class="cmd">%</span>
with the job number, <span class="cmd">kill</span> will work the same as with
PID (without signals):
</p>

<pre class="example" id="org1075a82">
$ sleep 1111&amp;
$ sleep 2222&amp;
$ sleep 3333&amp;
$ jobs
[1]   Running                 sleep 11111 &amp;
[2]-  Running                 sleep 22222 &amp;
[3]+  Running                 sleep 33333 &amp;
$ kill %2
[2] Terminated
$ jobs
[1]-  Running                 sleep 11111 &amp;
[3]+  Running                 sleep 33333 &amp;
</pre>
</div>
</div>
</div>
<div id="outline-container-org5f5c58e" class="outline-3">
<h3 id="org5f5c58e">Day 15 Summary<a id="orgcf58803"></a></h3>
<div class="outline-text-3" id="text-org5f5c58e">
</div>
<div id="outline-container-org006434f" class="outline-4">
<h4 id="org006434f">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org006434f">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org67977e0" class="outline-4">
<h4 id="org67977e0">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org67977e0">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org329354c" class="outline-2">
<h2 id="org329354c">Day 16 - Wed, October 15, 2025<a id="org026f7ea"></a></h2>
<div class="outline-text-2" id="text-org329354c">
</div>
<div id="outline-container-orgcfbd5a8" class="outline-3">
<h3 id="orgcfbd5a8">Day 16 Introduction<a id="orgbd16777"></a></h3>
<div class="outline-text-3" id="text-orgcfbd5a8">
</div>
<div id="outline-container-orgc495ff9" class="outline-4">
<h4 id="orgc495ff9">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgc495ff9">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org735251c" class="outline-3">
<h3 id="org735251c">C Compiler/Compiling<a id="orgc923746"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org735251c">
</div>
<div id="outline-container-orgebfdfd3" class="outline-4">
<h4 id="orgebfdfd3">C Development Process</h4>
<div class="outline-text-4" id="text-orgebfdfd3">
<p>
Developing a C program is the same as you (should have) learned with Java:
</p>

<ol class="org-ol">
<li>Edit your code.</li>
<li>Compile your code.
This requires the <span class="cmd">cc</span> compiler.</li>
<li>Link your code to supporting libraries.</li>
<li>Execute (test) your program.</li>
</ol>
</div>

<div id="outline-container-org4cd5541" class="outline-5">
<h5 id="org4cd5541">Edit Your Code</h5>
<div class="outline-text-5" id="text-org4cd5541">
<p>
This is easy using the editor of your choice: Emacs, VI, Nano,
etc.
</p>
</div>
</div>

<div id="outline-container-orgd9104f7" class="outline-5">
<h5 id="orgd9104f7">Compile Your Code</h5>
<div class="outline-text-5" id="text-orgd9104f7">
<p>
To compile a C program requires a C compiler.  The <i>typical</i> Unix C
compiler is called <span class="cmd">cc</span>.  On 
most Linux systems, <span class="cmd">cc</span> is a link to the Gnu C
Compiler (gcc).  So in this class, while we'll type
<span class="cmd">cc</span>, we're actually using the Gnu C compiler.
</p>

<p>
Note: Compiled C programs are <i>native</i> binary files.  In other
words, the compiler creates a <i>machine-specific set of
instructions</i> from your source code.  This is different from what
you're used to with Java which 'byte-compiles' and requires a
"Java Virtual Machine" interpreter (java).  No such interpreter
is required for natively-compiled binaries.
</p>
</div>
</div>
<div id="outline-container-orgc37365e" class="outline-5">
<h5 id="orgc37365e">Linking Your Code</h5>
<div class="outline-text-5" id="text-orgc37365e">
<p>
This step is commonly done at the same time you compile your
program.  Modern versions of <span class="cmd">cc</span> and <span class="cmd">gcc</span>
will strictly compile <i>only</i> if you tell it to <i>only</i> compile.
Otherwise, if your code compiles with no errors, the linking is
done for you.
</p>

<p>
Note: This does <i>not</i> mean linking happens without problems.  If
an error occurs during linking, you'll see an error from
<span class="cmd">ld</span>, not <span class="cmd">cc</span>.
</p>
</div>
</div>

<div id="outline-container-orge8af880" class="outline-5">
<h5 id="orge8af880">Execute (test) Your Program</h5>
<div class="outline-text-5" id="text-orge8af880">
<p>
Executing your program is similar to executing scripts.  You'll
still need the "./" in front of your executable program's name
unless the current directory is in your $PATH (which I doubt it
will be).
</p>

<p>
As for the name of the compiled binary executable, read on&#x2026;
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org616f6b6" class="outline-3">
<h3 id="org616f6b6">Hello World<a id="orgcb3e82a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org616f6b6">
</div>
<div id="outline-container-orgd46e7d4" class="outline-4">
<h4 id="orgd46e7d4">Create the C file</h4>
<div class="outline-text-4" id="text-orgd46e7d4">
<p>
C code is just a text file like .java or Bash scripts.  So use
whatever editor you like and create a file called
<span class="cmd">helloworld.c</span> containing:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #87cefa;">main</span>() {                     
  printf( <span style="color: #ffa07a;">"Hello World\n"</span> );
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orga9ea7ce" class="outline-4">
<h4 id="orga9ea7ce">Compile Program</h4>
<div class="outline-text-4" id="text-orga9ea7ce">
<p>
To compile our code, the minimum needed is to provide our source
code file name <span class="fname">helloworld.c</span> to the <span class="cmd">cc</span>
compiler (Hint: <span class="cmd">cc</span> <i>requires</i> your source code file
end in <span class="fname">.c</span>:
</p>

<pre class="example" id="orgef41b20">
$ cc sample.c 2&gt;&amp;1 | cat -n
     1  sample.c:1:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
     2   main() {
     3   ^~~~
     4  sample.c: In function ‘main’:
     5  sample.c:2:3: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
     6     printf( "Hello World\n" );
     7     ^~~~~~
     8  sample.c:2:3: warning: incompatible implicit declaration of built-in function ‘printf’
     9  sample.c:2:3: note: include ‘&lt;stdio.h&gt;’ or provide a declaration of ‘printf’
    10  +#include &lt;stdio.h&gt;
    11   main() {
    12     printf( "Hello World\n" );
    13     ^~~~~~
$
</pre>

<p>
First, notice the command line I used.  For lecturing, I wanted
line numbers so I could reference them here in this text.  But the
output from the compiler is from STDERR, not STDOUT.  So by
redirecting STDERR to the same stream as STDOUT, I could then pipe
the output to <span class="cmd">cat -n</span> to get line numbers. <i>This is only for lecture/demo purposes.</i>
</p>

<p>
As you can see, the compiler had a lot to say, BUT they are only
warnings.  
</p>

<ul class="org-ul">
<li>Line #1: Warning 1 - return type defaults to 'int'</li>
<li>Line #5: Warning 2 - implicit declaration of function ‘printf’</li>
<li>Line #8: Warning 3 - incompatible implicit declaration of built-in
function ‘printf’</li>
</ul>

<p>
Typically, warnings can be ignored.  However, there are some
better programming practices we should implement:
</p>

<ul class="org-ul">
<li>For Warning #1: Always define a return type for <i>main</i></li>
<li>For Warning #2: Always explicitly include any libraries needed for functions
(i.e. <i>printf</i>)</li>
<li>For Warning #3: See solution for Warning #2</li>
</ul>

<p>
But did the program compile?
</p>

<pre class="example" id="org9d82351">
$ ls -laF
total 44
drwx------  2 instructor instructor  4096 Oct 26 16:31 ./
drwx------ 25 instructor instructor 16384 Oct 26 16:31 ../
-rwx------  1 instructor instructor 16608 Oct 26 16:31 a.out*
-rw-------  1 instructor instructor   103 Oct 26 16:31 helloworld.c
$ 
</pre>

<p>
The answer is 'yes'.  Notice we have a new file called
<span class="fname">a.out</span>.  <span class="fname">a.out</span> is the default file name
used for a compiled program (the executable) when we <i>do not</i> provide one to the
<span class="cmd">cc</span> compiler.
</p>
</div>
</div>
<div id="outline-container-org1352444" class="outline-4">
<h4 id="org1352444">Executing the Program</h4>
<div class="outline-text-4" id="text-org1352444">
<p>
Notice the newly compiled program <span class="fname">a.out</span> has the 'x'
permission for us.  We can execute now, but will need "./" to tell
Bash where to find the executable (unless you're developing in a
directory which is also in your $PATH environment variable):
</p>

<pre class="example" id="org52ff7c6">
$ ./a.out 
Hello World
$
</pre>
</div>
</div>

<div id="outline-container-org2aad8de" class="outline-4">
<h4 id="org2aad8de">Implementing the Good Programming Practices</h4>
<div class="outline-text-4" id="text-org2aad8de">
<p>
Let's fix the code a bit by including a return type and the
library which provides the <i>printf</i> function:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Library which provides 'printf'                                               </span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Main entry point with no return type                                          </span>
  printf( <span style="color: #ffa07a;">"Hello World\n"</span> );    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Print message                                                                 </span>
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org2543aab" class="outline-4">
<h4 id="org2543aab">Specifying a Filename for Compiled Code</h4>
<div class="outline-text-4" id="text-org2543aab">
<p>
While we're at it, let's avoid the <span class="fname">a.out</span> file name
and provide one to <span class="cmd">cc</span>, via the <span class="cmd">-o</span> switch,
when we compile the program. 
</p>

<pre class="example" id="orgc3ef8a9">
$ rm a.out                           # let's remove the old executable just to be safe
$ cc -o helloworld helloworld.c      # Now compile a new one
$
</pre>

<p>
Notice no more warnings.  The string given after <span class="cmd">-o</span> is
the name of the executable file we'd like:
</p>

<pre class="example" id="orgd07d59f">
$ ls -laF
total 64
drwx------  2 instructor instructor  4096 Oct 26 16:40 ./
drwx------ 25 instructor instructor 16384 Oct 26 16:40 ../
-rwx------  1 instructor instructor 16608 Oct 26 16:40 helloworld*
-rw-------  1 instructor instructor   191 Oct 26 16:39 helloworld.c
$
</pre>

<p>
Now run it as before but with our new file name:
</p>

<pre class="example" id="orgb21c7e5">
$ ./helloworld 
Hello World
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org355968f" class="outline-3">
<h3 id="org355968f">C Comments<a id="org3facc6b"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org355968f">
<p>
Comments in C have 2 types:
</p>

<ul class="org-ul">
<li>Single line comments</li>
<li>Multi-line comments</li>
</ul>
</div>

<div id="outline-container-orgbaa693a" class="outline-4">
<h4 id="orgbaa693a">Single Line Comments</h4>
<div class="outline-text-4" id="text-orgbaa693a">
<p>
Any comment which is only 1 line, can simply start with
<span class="cmd">//</span>.  There may or may not be whitespace before the
<span class="cmd">//</span>.  Everything after the <span class="cmd">//</span> will be ignored
by the compiler.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">sample.c : Program to print 'Hello World' and demonstrate the use</span>
<span style="color: #ff7f24;">//            </span><span style="color: #ff7f24;">of single line comments.</span>
<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>

<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Here is a single line comment after code</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Here is a single line comment on a line of its own w/o leading whitespace.</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Here is a single line comment on line of its own w/leading whitespace.</span>
  printf( <span style="color: #ffa07a;">"Hello World"</span> );
}

<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">End of Program</span>
<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
</pre>
</div>

<p>
Notice:
</p>
<ol class="org-ol">
<li>Only the first 2 <span class="cmd">//</span> matter, everything else is a comment.</li>
<li>Multi-line comments can be simulated by simply putting
<span class="cmd">//</span> in front of every line you want commented.</li>
</ol>
</div>
</div>


<div id="outline-container-orgf9d828b" class="outline-4">
<h4 id="orgf9d828b">Multi-Line Comments</h4>
<div class="outline-text-4" id="text-orgf9d828b">
<p>
Multi-line comments are comments made up of multiple lines but
only the first line and the last line have comment markers.
</p>

<p>
For multi-line comments, these markers are <span class="cmd">/*</span> to start
the comment and <span class="cmd">*/</span> to close the comment:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">/*</span>
<span style="color: #ff7f24;">   sample.c : Program to print 'Hello World' and demonstrate the use</span>
<span style="color: #ff7f24;">              of single and multi-line comments.</span>
<span style="color: #ff7f24;">*/</span>

<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Here is a single line comment after code</span>

<span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">Here is a single, multi-line comment on a line of its own w/o leading whitespace.</span><span style="color: #ff7f24;"> */</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">Here is a single, multi-line comment on a line of its own w/leading whitespace.</span><span style="color: #ff7f24;"> */</span>
  printf( <span style="color: #ffa07a;">"Hello World"</span> );
}

<span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">End of Program</span><span style="color: #ff7f24;"> */</span>
</pre>
</div>

<p>
Notice:
</p>
<ol class="org-ol">
<li>Multi-line comment markers do not have to be on lines of their own.</li>
<li>Multi-line comment markers work for single lines as well as
long as you use the open <i>and</i> closing markers.</li>
</ol>

<p>
Multi-line comment markers are useful when you need to comment out
a block of code all at once, or if you know your comment
(documentation perhaps) will be several lines.
</p>

<p>
Note: Emacs's <i>comment-region</i> and <i>uncomment-region</i> functions
use single-line markers by default.
</p>
</div>
</div>
</div>
<div id="outline-container-org40d184b" class="outline-3">
<h3 id="org40d184b">Day 16 Summary<a id="org2230960"></a></h3>
<div class="outline-text-3" id="text-org40d184b">
</div>
<div id="outline-container-org362a11a" class="outline-4">
<h4 id="org362a11a">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org362a11a">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orga362567" class="outline-4">
<h4 id="orga362567">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orga362567">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org62cfe76" class="outline-2">
<h2 id="org62cfe76">Day 17 - Mon, October 20, 2025<a id="org605e593"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></h2>
<div class="outline-text-2" id="text-org62cfe76">
</div>
<div id="outline-container-org22a36ab" class="outline-3">
<h3 id="org22a36ab">Day 17 Introduction<a id="org835614d"></a></h3>
<div class="outline-text-3" id="text-org22a36ab">
</div>
<div id="outline-container-org082d018" class="outline-4">
<h4 id="org082d018">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org082d018">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2b00e65" class="outline-3">
<h3 id="org2b00e65">Quiz #2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q2">Q2</span></span></h3>
<div class="outline-text-3" id="text-org2b00e65">
<p>
Due to scheduling issues, there is no need to take quiz #2.
</p>
</div>
</div>
<div id="outline-container-org49c4308" class="outline-3">
<h3 id="org49c4308">Day 17 Summary<a id="orgd3325d4"></a></h3>
<div class="outline-text-3" id="text-org49c4308">
</div>
<div id="outline-container-org04d7214" class="outline-4">
<h4 id="org04d7214">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org04d7214">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org51ee5d2" class="outline-4">
<h4 id="org51ee5d2">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org51ee5d2">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org73bb17f" class="outline-2">
<h2 id="org73bb17f">Day 18 - Wed, October 22, 2025<a id="org5084c12"></a></h2>
<div class="outline-text-2" id="text-org73bb17f">
</div>
<div id="outline-container-orgf49f5a1" class="outline-3">
<h3 id="orgf49f5a1">Day 18 Introduction<a id="orgd8e8fe5"></a></h3>
<div class="outline-text-3" id="text-orgf49f5a1">
</div>
<div id="outline-container-orgb0b6ad7" class="outline-4">
<h4 id="orgb0b6ad7">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgb0b6ad7">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org70c8f19" class="outline-3">
<h3 id="org70c8f19">Printing Output to Screen - <span class="cmd">printf()</span><a id="orgc08461f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org70c8f19">
<p>
<span class="cmd">printf()</span> is the main way we get output to the screen
(actually, to STDOUT).  It
resides in the <span class="fname">stdio.h</span> library so you must
<span class="cmd">#include</span> that library (in surrounding '&lt;&gt;') at the top 
of your source code.
</p>

<p>
<span class="cmd">printf()</span> takes 1 or more arguments:
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"format string"</span>, optvar1, optvar2, ..., optvarN );
</pre>
</div>

<ul class="org-ul">
<li>A double quoted string containing a format specification</li>
<li>Optional values for insertion into the format specification.</li>
</ul>

<p>
&#x2026;and does <i>not</i> put a newline at the end automatically.
</p>
</div>

<div id="outline-container-org77bf7a9" class="outline-4">
<h4 id="org77bf7a9">Escape Characters</h4>
<div class="outline-text-4" id="text-org77bf7a9">
<p>
As in other languages, <span class="cmd">printf()</span> format strings understand
escape characters: characters with a '\' in front to give them
special meaning.
</p>

<p>
For example: 
</p>
<ul class="org-ul">
<li><span class="cmd">\n</span> for newline</li>
<li><span class="cmd">\t</span> for tab</li>
<li><span class="cmd">\r</span> for carriage return</li>
</ul>
</div>
</div>

<div id="outline-container-org25939e9" class="outline-4">
<h4 id="org25939e9">Format Specification</h4>
<div class="outline-text-4" id="text-org25939e9">
<p>
The double quoted string can contain anything you want to print but
also include placeholders which get replaced  with values of
arguments listed after the quoted string in the function call.
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"The sum is %i.\n"</span>, sum );
</pre>
</div>

<p>
When executed, the function <span class="cmd">printf()</span> will replace the
"%i" with the value of <i>sum</i> as an <b>integer</b>.
</p>

<p>
You may also use more than one value, or expression, in a <span class="cmd">printf()</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Required library for 'printf'</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;

  x = 5;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">spaces optional</span>
  y = 6;
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is %i.\n"</span>, x, y, x + y );
}
</pre>
</div>

<p>
We'll learn about the data types shortly.
</p>
</div>
</div>

<div id="outline-container-orgd66be1e" class="outline-4">
<h4 id="orgd66be1e">Placeholders</h4>
<div class="outline-text-4" id="text-orgd66be1e">
<p>
There are several format placeholders you may use, but they all
start with a '%' (to print a '%', use '%%'):
</p>

<ul class="org-ul">
<li>c : a single character</li>
<li>h : short integer</li>
<li>i or d : integer</li>
<li>l : long integer</li>
<li>u : unsigned integer</li>
<li>f : float or double</li>
<li>L : long double</li>
<li>o : octal number</li>
<li>x : hex number (lower case)</li>
<li>X : hex number (upper case)</li>
<li>s : null-terminated string</li>
</ul>

<p>
There are a few more, but we'll be sticking with these for our class.
</p>
</div>
</div>

<div id="outline-container-org1cee85b" class="outline-4">
<h4 id="org1cee85b">Example: Print PI.</h4>
<div class="outline-text-4" id="text-org1cee85b">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( <span style="color: #ffa07a;">"PI is %f\n"</span>, 3.141592654 );
}
</pre>
</div>

<pre class="example" id="org270ded5">
$ cc sample.c -o sample
$ ./sample
Value is 3.141593
$ 
</pre>

<p>
NOTICE:
</p>
<ol class="org-ol">
<li>The <span class="cmd">-o sample</span> can be placed after the
<span class="fname">.c</span> file name to compile, or before.</li>
<li>Floating point numbers only print out 6 decimal places by default.</li>
<li>We had to manually include the <span class="cmd">\n</span> to move the cursor
to a new line.</li>
<li>Having a <span class="cmd">void</span> return type for <span class="cmd">main()</span>
means we do not need a <span class="cmd">return</span> statement (to be
discussed with functions).</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orge146591" class="outline-3">
<h3 id="orge146591">Segmentation Faults<a id="orgc216e9b"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orge146591">
<p>
Program crashes during C development are inevitable.  However,
unlike newer languages, C does not "throw an exception" nor does it
give a "traceback".  It just crashes with a "Segmentation fault".
</p>

<p>
<i>Segmentation Faults</i>, or more commonly called <i>SegFaults</i>, are what happen when a C program crashes.
Usually, for beginners, this is caused by trying to access memory
locations you're not allowed to.
</p>

<p>
Consider the following code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Include library for 'printf'; no space between '#' and 'include'</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( 5 );
}
</pre>
</div>

<p>
When we compile and run it:
</p>

<pre class="example" id="org8780a36">
$ cc sample.c -o sample
$ ./sample
Segmentation fault
$ 
</pre>

<p>
It crashes&#x2026;i.e. a <i>segmentation fault</i>.  In this case, the cause is because
<span class="cmd">printf()</span> requires a string, not an integer.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( <span style="color: #ffa07a;">"5"</span> );

} 
</pre>
</div>

<pre class="example" id="orgc1fca3e">
$ cc sample.c -o sample
$ ./sample                                                                                                       
5$
</pre>

<p>
You should already understand why our prompt "$" is immediately
after the '5'.  Yes?
</p>


<p>
FORESHADOW: I said SegFaults commonly occur when you try to access
memory you're not allowed to.  So why did an integer vs a string
cause the SegFault? Later, we're going to learn a "string" is
actually a dynamically allocated area of memory and what 
gets passed to functions like <span class="cmd">printf()</span> is a <i>pointer</i> to
the string of characters - a pointer is a memory location.  So, the 5 
was interpreted by <span class="cmd">printf()</span> as memory location number
5&#x2026;a memory location our program was not allowed to access.
</p>
</div>
</div>
<div id="outline-container-org2107b0f" class="outline-3">
<h3 id="org2107b0f">Safety Belts Off!<a id="orgd61e3bc"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2107b0f">
<p>
C is not a hand-holding, protective language like others.  If
you're not careful, you get odd results.
</p>

<p>
You've already seen the 'segfault':
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( 5 );
}
</pre>
</div>

<pre class="example" id="orgec176d5">
$ cc sample.c -o sample
$ ./sample
Segmentation fault
$ 
</pre>

<p>
However, you may <i>not</i> crash.  You may just get unexpected results:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( <span style="color: #ffa07a;">"The value of x is %i.\n"</span> );
}
</pre>
</div>

<pre class="example" id="org00428fc">
$cc sample.c -o sample
$ ./sample
The value of x is -1699522328.
$ 
</pre>

<p>
Notice we didn't give a variable to <span class="cmd">printf()</span> to populate the
"%i" but the compiler did <i>not</i> complain!
</p>

<p>
This means your program may "work" but produce invalid results.
</p>

<p>
Here is another example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">pi</span>;

  pi = 3.141592654;
  printf( <span style="color: #ffa07a;">"The value of x is %i.\n"</span>, pi );
}
</pre>
</div>

<pre class="example" id="org9a6f089">
$ cc sample.c -o sample
$ ./sample
The value of x is -952946632.
$
</pre>

<p>
We passed a <i>float</i> to <span class="cmd">printf()</span>, but told <span class="cmd">printf()</span> to format an integer.
</p>

<p>
C gives the coder much more flexibility and power, so remember Uncle
Ben's advice: "With great power, comes great responsibility."
</p>

<p>
WARNING: If you're new to C, <i>expect</i> failing programs but don't be
discouraged.  As I've said, you've had your hand held by other
languages.  
</p>
</div>
</div>
<div id="outline-container-orgddeb9a9" class="outline-3">
<h3 id="orgddeb9a9">Data Types<a id="org7f129c8"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgddeb9a9">
</div>
<div id="outline-container-org2b1acc0" class="outline-4">
<h4 id="org2b1acc0">Data Types</h4>
<div class="outline-text-4" id="text-org2b1acc0">
<p>
In C, there are several data types to use and many you've probably
heard of while learning other languages:
</p>

<ul class="org-ul">
<li><span class="cmd">int</span> : A signed integer</li>
<li><span class="cmd">float</span> : A signed floating point decimal</li>
<li><span class="cmd">double</span> : A signed floating point decimal twice the
size of <span class="cmd">float</span> in terms of the number of bytes used to
store the value.</li>
<li><span class="cmd">char</span> : A character value, usually an ASCII value
between 0 and 255.  However, if treated as a number may have the
range -128 to 127, depends on the machine/compiler.  Best to use
<span class="cmd">signed</span>/<span class="cmd">unsigned</span> (see below) to ensure
proper results.</li>
</ul>
</div>
</div>
<div id="outline-container-orge5d5354" class="outline-4">
<h4 id="orge5d5354">Qualifiers</h4>
<div class="outline-text-4" id="text-orge5d5354">
<p>
Several of the types mentioned above can have <i>qualifiers</i> placed in
front of them:
</p>

<ul class="org-ul">
<li><span class="cmd">long</span> : used in front to increase the range of values by
increasing the number of bytes used. (Not applicable to <span class="cmd">char</span>.)</li>
<li><span class="cmd">short</span> : used in front to decrease the range of values
(and number of bytes used)</li>
<li><span class="cmd">unsigned</span> : Used in front to change the range of values to only
positive numbers (and 0).</li>
<li><span class="cmd">signed</span> : Used in front to change/ensure the range of values
supports both positive and negative values.</li>
</ul>
</div>
</div>

<div id="outline-container-orgac5e169" class="outline-4">
<h4 id="orgac5e169">Allowed Combinations</h4>
<div class="outline-text-4" id="text-orgac5e169">
<ul class="org-ul">
<li><span class="cmd">float</span> does not support qualifiers.</li>
<li><span class="cmd">signed</span> and <span class="cmd">unsigned</span> only apply to integer
types (including <span class="cmd">char</span>).</li>
</ul>

<p>
Examples:
</p>
<ul class="org-ul">
<li>short int</li>
<li>unsigned short int</li>
<li>unsigned int</li>
<li>long int</li>
<li>unsigned long int</li>
<li>long double</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc3c7d32" class="outline-3">
<h3 id="orgc3c7d32"><span class="cmd">sizeof()</span><a id="org3c30c20"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgc3c7d32">
<p>
The number of bytes each data type uses depends on the operating
system we're compiling for.  An <span class="cmd">int</span> in a 32-bit OS is
different than a 64-bit OS.
</p>

<p>
To find the size of a data type, we can pass the <i>data type</i> to
the <span class="cmd">sizeof()</span> function.  This function returns the
number of bytes used for <i>that</i> data type, as an integer:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  printf( <span style="color: #ffa07a;">"Size of char: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">char</span> ) );
  printf( <span style="color: #ffa07a;">"Size of short int: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">short</span> <span style="color: #98fb98;">int</span> ) );
  printf( <span style="color: #ffa07a;">"Size of unsigned short int: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">short</span> <span style="color: #98fb98;">int</span> ) );
  printf( <span style="color: #ffa07a;">"Size of int: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">int</span> ) );
  printf( <span style="color: #ffa07a;">"Size of long int: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">long</span> <span style="color: #98fb98;">int</span> ) );
  printf( <span style="color: #ffa07a;">"Size of unsigned long int: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #98fb98;">int</span> ) );
  printf( <span style="color: #ffa07a;">"Size of double: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">double</span> ) );
  printf( <span style="color: #ffa07a;">"Size of long double: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">long</span> <span style="color: #98fb98;">double</span> ) );
}
</pre>
</div>

<p>
On my system, these are the sizes for some various types:
</p>

<pre class="example" id="org1c4369e">
$ ./sample
Size of char: 1
Size of short int: 2
Size of unsigned short int: 2
Size of int: 4
Size of long int: 8
Size of unsigned long int: 8
Size of double: 8
Size of long double: 16
$
</pre>
</div>
<div id="outline-container-orgd8847d4" class="outline-4">
<h4 id="orgd8847d4">Why Do We Care?  RAM Usage</h4>
<div class="outline-text-4" id="text-orgd8847d4">
<p>
C is a very old language.  It was commonly used back on systems
where RAM was very limited, i.e. 64 kilobytes.  Using 4 bytes to
store an integer between 1 and 10 wastes 3 bytes.  Put this in an
array of 100 integers and you waste 300 bytes!
</p>

<p>
Now, computers have tons of RAM, 8, 16, 32G or more.  However,
people still complain when, for example, Chrome takes up so much
RAM the system slows down.  
</p>

<p>
While the need to conserve memory is less, it is still good
practice to ensure your programs run smooth and lean.
</p>
</div>
</div>
<div id="outline-container-org51be955" class="outline-4">
<h4 id="org51be955">Why Do We Care?  Portability</h4>
<div class="outline-text-4" id="text-org51be955">
<p>
C code is meant to be portable across operating systems and
bus-widths (16 vs 32 vs 64 bits, etc.).  A program which <i>expects</i>
a 64-bit system may either fail to compile, crash, or give invalid
results on a 32-bit system.  By using <span class="cmd">sizeof()</span>, the
developer can account for the varying systems.
</p>
</div>
</div>
</div>
<div id="outline-container-org4f26365" class="outline-3">
<h3 id="org4f26365">Day 18 Summary<a id="orga358655"></a></h3>
<div class="outline-text-3" id="text-org4f26365">
</div>
<div id="outline-container-org11e496a" class="outline-4">
<h4 id="org11e496a">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org11e496a">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org4aba046" class="outline-4">
<h4 id="org4aba046">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org4aba046">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgb4789e7" class="outline-2">
<h2 id="orgb4789e7">Day 19 - Mon, October 27, 2025<a id="org4bcb8e0"></a></h2>
<div class="outline-text-2" id="text-orgb4789e7">
</div>
<div id="outline-container-org39e656d" class="outline-3">
<h3 id="org39e656d">Day 19 Introduction<a id="org66458d7"></a></h3>
<div class="outline-text-3" id="text-org39e656d">
</div>
<div id="outline-container-org5398786" class="outline-4">
<h4 id="org5398786">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org5398786">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org2652eb4" class="outline-3">
<h3 id="org2652eb4">Variables<a id="org62edcc4"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2652eb4">
<p>
A variable is the same as what you learned in CS 1400.  The
identifier rules are also similar:
</p>

<ul class="org-ul">
<li>Must start with a letter or '_'</li>
<li>Must be comprised of only letters, numbers, and '_'.</li>
<li>Can not be a <i>reserved word</i> (a keyword of the language like
<span class="cmd">if</span> or <span class="cmd">while</span>)</li>
</ul>
</div>
<div id="outline-container-org435fef8" class="outline-4">
<h4 id="org435fef8">Declaring Variables</h4>
<div class="outline-text-4" id="text-org435fef8">
<p>
In C, all variables must be declared prior to use.  While you can
declare a variable at anytime prior to use, it is <i>good programming
practice</i> to declare all variables at the top of your code, whether
that be global or local within a function:
</p>

<p>
Here is an example of bad programming practice:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  x = 4;
  printf( <span style="color: #ffa07a;">"Program started.\n"</span> );
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
  y = 5;
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is "</span>, x, y );
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sum</span>;
  sum = x + y;
  printf( <span style="color: #ffa07a;">"%i\n"</span>, sum );
}
</pre>
</div>

<pre class="example" id="org99968f6">
$ ./sample 
Program started.
The sum of 4 and 5 is 9
$
</pre>

<p>
Good programming practice is to declare all variables at the top of
a function or code file whenever possible:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sum</span>;

  x = 4;
  printf( <span style="color: #ffa07a;">"Program started.\n"</span> );
  y = 5;
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is "</span>, x, y );
  sum = x + y;
  printf( <span style="color: #ffa07a;">"%i\n"</span>, sum );
}
</pre>
</div>

<p>
It has to do with <i>readability</i>.  When a program must be reviewed
by someone other than the author, the initial declarations are
like a Table of Contents, giving the reader a preview of what's to
come.
</p>
</div>
</div>

<div id="outline-container-orgfe9ce67" class="outline-4">
<h4 id="orgfe9ce67">Combining Common Variables</h4>
<div class="outline-text-4" id="text-orgfe9ce67">
<p>
When declaring multiple variables of the same type, you may
combine them in a single line separated by commas:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>, <span style="color: #eedd82;">y</span>, <span style="color: #eedd82;">sum</span>;
</pre>
</div>
</div>
</div>
<div id="outline-container-org4dc88b6" class="outline-4">
<h4 id="org4dc88b6">Initialization</h4>
<div class="outline-text-4" id="text-org4dc88b6">
<p>
You can also assign variables a value during declaration:
</p>

<p>
On individual lines like this:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 5;
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span> = 6;
<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sum</span> = 0;
</pre>
</div>

<p>
Or on the same line like so:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 5, <span style="color: #eedd82;">y</span> = 5, <span style="color: #eedd82;">sum</span> = x + y;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice the assignments are within commas.</span>

  printf( <span style="color: #ffa07a;">"Program started.\n"</span> );
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is "</span>, x, y );
  printf( <span style="color: #ffa07a;">"%i\n"</span>, sum );
}
</pre>
</div>

<p>
Note: Good programming practice requires code to be easily
readable.  The previous example is fine, but as more declarations
are made and assigned with more complex expressions, it is
probably better to put them on separate lines even if they're part of the same
declaration statement:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 5,
    <span style="color: #eedd82;">y</span> = 5,
    <span style="color: #eedd82;">sum</span> = x + y;

  printf( <span style="color: #ffa07a;">"Program started.\n"</span> );
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is "</span>, x, y );
  printf( <span style="color: #ffa07a;">"%i\n"</span>, sum );
}
</pre>
</div>

<p>
Notice the variables are still comma delimited and the statement
still ends with a ';'.  However, notice the 'x' doesn't line up
with 'y' and 'sum'.  Some coders do the following to make things neater:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span>
    <span style="color: #eedd82;">x</span> = 5,
    <span style="color: #eedd82;">y</span> = 5,
    <span style="color: #eedd82;">sum</span> = x + y;

  printf( <span style="color: #ffa07a;">"Program started.\n"</span> );
  printf( <span style="color: #ffa07a;">"The sum of %i and %i is "</span>, x, y );
  printf( <span style="color: #ffa07a;">"%i\n"</span>, sum );
}
</pre>
</div>

<p>
The choice is personal preference of what is pleasing to the eyes
and "readable".  Also, an editor which performs "auto-indentation"
helps! 
</p>
</div>
</div>
<div id="outline-container-org5e6164e" class="outline-4">
<h4 id="org5e6164e">Must We Initialize?</h4>
<div class="outline-text-4" id="text-org5e6164e">
<p>
Honestly, no.  However, if you do not initialize, the initial
value of a variable is <b>indeterminate</b>.  C does not automatically
initialize variables like some other languages.
</p>

<p>
This can result in unexpected output.  So be wise, initialize!
</p>
</div>
</div>
</div>
<div id="outline-container-org0be374e" class="outline-3">
<h3 id="org0be374e">Variable Scope<a id="orga0d867e"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org0be374e">
<p>
The rules regarding scope of variables is fairly common across
languages.  For now, we'll keep it simple:
</p>

<ul class="org-ul">
<li>Variables declared outside <span class="cmd">main</span> (and other functions)
are <i>global</i>.</li>
<li>Variables declared inside <span class="cmd">main</span> (or another function)
are <i>local</i>.</li>
</ul>

<p>
Here is an example of a <i>global</i> variable:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Outside functions, thus global</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  x = 5;
  printf( <span style="color: #ffa07a;">"X is %i\n"</span>, x );
}
</pre>
</div>

<pre class="example" id="org4d97246">
$ cc sample.c -o sample
$ ./sample 
X is 5
$ 
</pre>

<p>
For a local variable, inside the function:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">inside the functions, thus local</span>
  x = 5;
  printf( <span style="color: #ffa07a;">"X is %i\n"</span>, x );
}
</pre>
</div>

<pre class="example" id="org107693c">
$ cc sample.c -o sample
$ ./sample 
X is 5
$ 
</pre>

<p>
And as usual, local variables get precedence over global variables:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 5;

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 6;
  printf( <span style="color: #ffa07a;">"X is %i\n"</span>, x );
}
</pre>
</div>

<pre class="example" id="org285fd15">
$ cc sample.c -o sample
$ ./sample 
X is 6
$
</pre>
</div>
</div>
<div id="outline-container-org9b31b77" class="outline-3">
<h3 id="org9b31b77">Operators<a id="org2f547d7"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9b31b77">
<p>
Most of the operators we'll use in this class are common to other
languages you're familiar with:
</p>

<p>
Math Operators:
</p>
<ul class="org-ul">
<li>+ : Addition</li>
<li>- : Substraction</li>
<li>* : Multiplication</li>
<li>/ : Division</li>
<li>++ : Increment by 1</li>
<li>-- : Decrement by 1</li>
<li>% : Modulus</li>
</ul>

<p>
<i>Logical</i> Operators:
</p>
<ul class="org-ul">
<li>== : equal to</li>
<li>!= : not equal to</li>
<li>&lt; : less than ( and &lt;= )</li>
<li>&gt; : greater than ( and &gt;= )</li>
<li>! : not</li>
<li>&amp;&amp; : and</li>
<li>|| : or</li>
</ul>

<p>
Any other operator we encounter in this class will be explained as
we come to it.
</p>
</div>
</div>
<div id="outline-container-org82ce953" class="outline-3">
<h3 id="org82ce953">Branching - <span class="cmd">if</span><a id="org590f0ba"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org82ce953">
<p>
Branching in C is pretty similar to languages your familiar with.
The only difference to some other languages is the "else if".
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">if</span>
<span style="color: #00ffff;">if</span> ( condition ) {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">True code block</span>
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If-else</span>
<span style="color: #00ffff;">if</span> ( condition ) {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">True code block</span>
} <span style="color: #00ffff;">else</span> {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">False code block</span>
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">if-else if (indentation is author/editor dependent)</span>
<span style="color: #00ffff;">if</span> ( condition ) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This True condition's code block</span>
 } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> ( condition ) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This True condition's code block</span>
 } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> ( condition ) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This True condition's code block</span>
 } <span style="color: #00ffff;">else</span> {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">all conditions false code block (optional)</span>
}
</pre>
</div>

<p>
If the code block is made up of a single statement, the braces "{}"
are not required:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">if</span> ( x == 5 )
  x++;
</pre>
</div>
</div>
<div id="outline-container-orga08df11" class="outline-4">
<h4 id="orga08df11">Conditions in C</h4>
<div class="outline-text-4" id="text-orga08df11">
<p>
In C, there is no <i>boolean</i> data type.  Instead, "false" is any
value of 0 or null (for pointers).  All other values are
considered "true".
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">if</span> ( x == 0 )
  printf( <span style="color: #ffa07a;">"X is 0\n"</span> );
</pre>
</div>

<p>
can be simplified to:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">if</span> ( ! x )
  printf( <span style="color: #ffa07a;">"X is 0\n"</span> );
</pre>
</div>

<p>
Likewise, the following loop:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 5; i &gt; 0; i-- )
  printf( <span style="color: #ffa07a;">"%i\n"</span>,i );
</pre>
</div>

<p>
Could be written:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 5; i; i-- )
  printf( <span style="color: #ffa07a;">"%i\n"</span>,i );
</pre>
</div>

<p>
or even:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 5;
<span style="color: #00ffff;">while</span> ( i )
  printf( <span style="color: #ffa07a;">"%i\n"</span>, i-- );
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org9ba17f9" class="outline-3">
<h3 id="org9ba17f9">Loops - <span class="cmd">for</span>, <span class="cmd">while</span>, <span class="cmd">do-while</span><a id="org80e7620"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9ba17f9">
<p>
Loops, too, will seem familiar (Java, C++, Perl, etc. were all
modeled after C):
</p>
</div>

<div id="outline-container-org78da86a" class="outline-4">
<h4 id="org78da86a"><span class="cmd">for</span> Loop</h4>
<div class="outline-text-4" id="text-org78da86a">
<p>
C's <span class="cmd">for</span> loop is the traditional style and not like
Bash, Perl, or Python's:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">for</span> ( initialization; condition; increment ) {   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice the ';'</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">code to iterate</span>
}
</pre>
</div>

<p>
For example, to print the numbers from 1 to 1000 with 10 numbers
on a line separated by spaces:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Initialize; Condition; Increment</span>
  <span style="color: #00ffff;">for</span> ( i = 1; i &lt;= 1000; i++ ) {    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Need {} since more than one statement in code block</span>
    printf( <span style="color: #ffa07a;">"%i "</span>, i );              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice the ' ' after "%i"</span>
    <span style="color: #00ffff;">if</span> ( i % 10 == 0 )
      printf( <span style="color: #ffa07a;">"\n"</span> );                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice no {} for this 'if' - OPTIONAL!</span>
  }  
}
</pre>
</div>

<p>
Notice 'i' is declared and initialized, then immediately re-initialized in the
<span class="cmd">for</span> loop header.  The "= 0" seems pointless&#x2026;and <i>in this case</i>
it is.  Nevertheless, it is still good programming practice to
initialize all variables.
</p>

<pre class="example" id="orgbedfe0a">
$ # Notice the '&amp;&amp;' below to allow a single command line, but prevent execution if compiler errors
$
$ cc sample.c -o sample &amp;&amp; ./sample       
1 2 3 4 5 6 7 8 9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
[...]
971 972 973 974 975 976 977 978 979 980
981 982 983 984 985 986 987 988 989 990
991 992 993 994 995 996 997 998 999 1000
$
</pre>

<p>
As an alternative, if a variable's <i><b>only use</b></i> is going to be inside
a <span class="cmd">for</span> loop (i.e. a control variable), you can
declare/initialize it in the <span class="cmd">for</span> loop header only:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 1; i &lt;= 1000; i++ ) {   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Declaration and initialization</span>
    printf( <span style="color: #ffa07a;">"%i "</span>, i );                 
    <span style="color: #00ffff;">if</span> ( i % 10 == 0 )
      printf( <span style="color: #ffa07a;">"\n"</span> );
  }                                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">i's scope ends and no longer exists.</span>
}
</pre>
</div>

<p>
This is also acceptable and often preferred since it communicates
to the reader "i" is <b>only</b> being used within the <span class="cmd">for</span>
loop. i.e. its scope is restricted inside the loop body.  "i" does
not exist outside the loop.
</p>
</div>
</div>

<div id="outline-container-orgd8d66a5" class="outline-4">
<h4 id="orgd8d66a5"><span class="cmd">while</span> Loop</h4>
<div class="outline-text-4" id="text-orgd8d66a5">
<p>
The <span class="cmd">while</span> loop is a "pre-check" loop and should also
look familiar.  A "pre-check" loop is one where the condition is
checked <i>before</i> the loop is ever entered.  This means your program
may never execute the code in the loop's code block.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">while</span> ( condition ) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">iterative code block</span>
}
</pre>
</div>

<p>
Example: Print the numbers from 1 to 1000 with 10 on a line using
a <span class="cmd">while</span> loop.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 1;

  <span style="color: #00ffff;">while</span> ( i &lt;= 1000 ) {
    printf( <span style="color: #ffa07a;">"%i "</span>, i );
    <span style="color: #00ffff;">if</span> ( i % 10 == 0 )
      printf( <span style="color: #ffa07a;">"\n"</span> );
    i++;                 
  }  
}
</pre>
</div>

<pre class="example" id="org4097936">
$ cc sample.c -o sample
$ ./sample | less                          # Side note: Can we use '&amp;&amp;" as before??
$                                          #            What if our code had an error?
</pre>

<p>
Notice you can pipe the output of your program just like other
commands/programs!  (The magic of STDOUT.)
</p>
</div>
</div>

<div id="outline-container-org2611e9e" class="outline-4">
<h4 id="org2611e9e"><span class="cmd">do-while</span> Loop</h4>
<div class="outline-text-4" id="text-org2611e9e">
<p>
C's "post-check" loop is the <span class="cmd">do-while</span> loop.  A
"post-check" loop is one where the condition is 
checked <i>after</i> the loop is entered.  This means your program
will execute the loop's code block <i>at least one time</i>.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">do</span> {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">code block</span>
} <span style="color: #00ffff;">while</span> ( condition );
</pre>
</div>

<p>
Repeat the previous example using the <span class="cmd">do-while</span> loop:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 1;

  <span style="color: #00ffff;">do</span> {
    printf( <span style="color: #ffa07a;">"%i "</span>, i );
    <span style="color: #00ffff;">if</span> ( i % 10 == 0 )
      printf( <span style="color: #ffa07a;">"\n"</span> );
    i++;
  } <span style="color: #00ffff;">while</span> ( i &lt;= 1000 );
} 
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org17a96b2" class="outline-3">
<h3 id="org17a96b2">Arrays<a id="orgea5e30f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org17a96b2">
<p>
You should already be familiar with the concept of Arrays: linear homogeneous collections
of data (i.e. all of the same type) with indexes starting at 0.
</p>

<p>
To declare arrays in C, use the format:
</p>

<div class="org-src-container">
<pre class="src src-sh">data_type  variable_identifier[ size_of_array ];
</pre>
</div>

<p>
For example:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 50 ];

  printf( <span style="color: #ffa07a;">"Size of int : %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">int</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">remember, on CPP you'll need %li</span>
  printf( <span style="color: #ffa07a;">"Size of list: %i\n"</span>, <span style="color: #00ffff;">sizeof</span>( list ) );
}
</pre>
</div>

<p>
This will declare <i>list</i> as 50 <span class="cmd">int</span>s whose indexes range
from 0 to 49.
</p>

<p>
On my system, the output is:
</p>

<pre class="example" id="orgfd6fa19">
$ ./sample
Size of int : 4
Size of list: 200
$
</pre>

<p>
Notice we can give <span class="cmd">sizeof()</span> a variable instead of a
type.  When we do, we find out how many bytes <i>the variable</i> is
taking up, not just 1 variable of the type.
</p>

<p>
Since on my system an <span class="cmd">int</span> is 4 bytes, and our array is
made up of 50 <span class="cmd">int</span>s, "list" takes up 4*50, or 200 bytes.
</p>
</div>
<div id="outline-container-org86691b5" class="outline-4">
<h4 id="org86691b5">Multi-Dimension Arrays</h4>
<div class="outline-text-4" id="text-org86691b5">
<p>
To use multi-dimension arrays, just add <span class="cmd">[]</span> as needed.
</p>

<p>
For example:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">grid</span>[ 100 ][ 100 ];
</pre>
</div>
</div>
</div>

<div id="outline-container-orge20edae" class="outline-4">
<h4 id="orge20edae">Example</h4>
<div class="outline-text-4" id="text-orge20edae">
<p>
Using arrays, let's initialize an array of 10 <span class="cmd">int</span>s with
the square of the array element's index.  Then, print out the
index and the value it holds:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 10 ];

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Initialize</span>
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 10; i++ )
    list[ i ] = i * i;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Print out</span>
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 10; i++ )
    printf ( <span style="color: #ffa07a;">"Index %i : %i\n"</span>, i, list[ i ] );

}
</pre>
</div>

<p>
And the output:
</p>

<pre class="example" id="org8e5a4a4">
$ cc sample.c -o sample &amp;&amp; ./sample        # If you have a Makefile, use that!
Index 0 : 0
Index 1 : 1
Index 2 : 4
Index 3 : 9
Index 4 : 16
Index 5 : 25
Index 6 : 36
Index 7 : 49
Index 8 : 64
Index 9 : 81
$
</pre>

<p>
Or for a 2D array:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">MAX</span> = 10;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">times_table</span>[ MAX ][ MAX ];

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">row</span> = 0; row &lt; MAX; row++ )
    <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">col</span> = 0; col &lt; MAX; col++ )
      times_table[ row ][ col ] = row * col;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Printing the table is left for the student to work out.</span>
}
</pre>
</div>

<p>
Notice the use of a variable for the array limits to save typing
if changes were needed/desired.
</p>
</div>
</div>
</div>
<div id="outline-container-org036f3db" class="outline-3">
<h3 id="org036f3db">How Arrays Work&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org036f3db">
<p>
C was designed to have its resulting compiled code very close to
machine language (think assembly).  Array elements in C are stored
<i>consecutively</i> in RAM.
</p>

<p>
In the previous example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 10 ];
</pre>
</div>

<p>
<span class="cmd">list</span> is really a label to some memory location in RAM.
Since the system 
knows the size of an <span class="cmd">int</span> is 4 bytes, an index of <i>i</i>
will be located at RAM location <i>i*4</i> bytes after <span class="cmd">list</span>'s
RAM location.
</p>

<p>
For example, let's say <span class="cmd">list</span> is in RAM at
location 1000.  
</p>

<p>
<img src="support_files/array_illustration.png" width="80%" height="" align=middle style="">
</p>

<p>
The first 4 byte integer will occupy locations
1000 through 1003.  So "list[ 0 ]" is located at 
</p>

<pre class="example" id="org8c1fd81">
list + index * size_of_int

// or

1000 + 0 * 4 = 1000        // position of array index 0s integer
</pre>

<p>
Likewise, index 5 will be:
</p>

<pre class="example" id="orgd974569">
list + index * size_of_int
//or
1000 + 5 * 4 = 1020      &lt;==== location of list[5]
</pre>
</div>

<div id="outline-container-org50818f7" class="outline-4">
<h4 id="org50818f7">Houston? We Have A Problem!!!!</h4>
<div class="outline-text-4" id="text-org50818f7">
<p>
<b>WARNING: C DOES NO RANGE CHECKING!!!!</b>
</p>

<p>
Remember, C does not protect you like other languages.  Try this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">LIMIT</span> = 5;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ LIMIT ];

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Initialize</span>
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; LIMIT; i++ )
    list[ i ] = i * i;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Print out</span>
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 10; i++ )
    printf ( <span style="color: #ffa07a;">"Index %i : %i\n"</span>, i, list[ i ] );

}
</pre>
</div>

<p>
Notice we're only declaring an array of 5 elements, initializing 5
elements, but then <i>PRINTING 10</i> elements! 
</p>

<pre class="example" id="org295f5f3">
$ ./sample
Index 0 : 0
Index 1 : 1
Index 2 : 4
Index 3 : 9
Index 4 : 16
Index 5 : 0
Index 6 : -14417307
Index 7 : 21969
Index 8 : -1857727584
Index 9 : 32766
$ 
</pre>

<p>
Again, C puts you in full control.  To C, the index is just a
number to compute the location of where an array element is
located.  It will not ensure the index (and thus the computed
address) is within the area of the data!!!!
</p>

<p>
Side note: this is a BIG deal in Information Security as it
potentially allows programs to access RAM they should not be allowed
to access!  And by the way, if your array index results in a
location outside the RAM <i>allowed</i> to your program by the OS,
you're program will core dump (segfault).
</p>
</div>
</div>
</div>
<div id="outline-container-orgeb1863d" class="outline-3">
<h3 id="orgeb1863d">Array Initialization<a id="org0704274"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgeb1863d">
<p>
To initialize an array, there are a couple of shortcuts we can
take.
</p>

<p>
First, to initialize a small array to a set of values, use an '='
followed by <span class="cmd">{}</span> around a comma-delimited list:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[5] = { 6, 3, 0, -1, 7 };  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Spaces are optional</span>
</pre>
</div>

<p>
In fact, because we are listing <i>all</i> the values, C will not even
require the '5' in the <span class="cmd">[]</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[] = { 6, 3, 0, -1, 7 };    
</pre>
</div>

<p>
NOTE: this is only allowed <b>iff</b> you list <i>all</i> your values.
</p>
</div>
<div id="outline-container-orgd5d69c6" class="outline-4">
<h4 id="orgd5d69c6">Multi-Dimensional Initialization</h4>
<div class="outline-text-4" id="text-orgd5d69c6">
<p>
For multi-dimensional arrays, use nested <span class="cmd">{}</span> also
comma-delimited:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">grid</span>[ 3 ][ 5 ] = {
                      { 0, 1, 2, 3, 4 },
                      { 0, 2, 4, 6, 8 },
                      { 0, 3, 6, 9, 12 }
                     };
</pre>
</div>

<p>
Do we need the <span class="cmd">[]</span> filled in if we're fully listing out
our elements?  The answer is yes, <b>except</b> the first one.
</p>

<p>
Consider the following code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">grid</span>[ 3 ][ 5 ] = {
        { 0, 1, 2, 3, 4 },
        { 0, 2, 4, 6, 8 },
        { 0, 3, 6, 9, 12 }
    };

    printf( <span style="color: #ffa07a;">"Hello\n"</span> );
}
</pre>
</div>

<p>
The compilation:
</p>

<pre class="example" id="org92dde0f">
$ cc sample.c -o sample
$
</pre>

<p>
No issues.  What about this version:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">grid</span>[ ][ ] = {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice [] is not filled at all</span>
        { 0, 1, 2, 3, 4 },
        { 0, 2, 4, 6, 8 },
        { 0, 3, 6, 9, 12 }
    };

    printf( <span style="color: #ffa07a;">"Hello\n"</span> );
}
</pre>
</div>

<p>
The compilation:
</p>

<pre class="example" id="org155b60c">
$ cc sample.c -o sample
sample.c: In function ‘main’:
sample.c:4:7: error: array type has incomplete element type ‘int[]’
   int grid[  ][  ] = {
       ^~~~
sample.c:4:7: note: declaration of ‘grid’ as multidimensional array must have bounds for all dimensions except the first
$
</pre>

<p>
So we fill in all but the first <span class="cmd">[]</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">grid</span>[   ][ 5 ] = {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Fill all BUT the first</span>
        { 0, 1, 2, 3, 4 },
        { 0, 2, 4, 6, 8 },
        { 0, 3, 6, 9, 12 }
    };

    printf( <span style="color: #ffa07a;">"Hello\n"</span> );
}
</pre>
</div>

<p>
And finally:
</p>

<pre class="example" id="org827c73a">
$ cc sample.c -o sample
$
</pre>
</div>
</div>

<div id="outline-container-org0dc0771" class="outline-4">
<h4 id="org0dc0771">Automatic 0 Initialization for Remaining Elements</h4>
<div class="outline-text-4" id="text-org0dc0771">
<p>
We can actually have C, pre-initialize any number of elements of
an array, to 0, <i><b>but</b></i> we must specify at least the first element.  However, if we
do, we must include a value inside the <span class="cmd">[]</span> so C knows how
big to make the array.  Then, the remaining elements will
automatically be initialized to 0 for us:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[500] = { 2, -1, 5 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Elements [0] to [2] are 2, -1, 5 respectively.</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Remaining 497 will be 0</span>
</pre>
</div>

<p>
WARNING #1: This is for arrays only.  C does <b>not</b> automatically
initialize variables in general.
</p>

<p>
WARNING #2: To use this feature, the value in <span class="cmd">[]</span> is
required, hence the 500 above.
</p>
</div>
</div>
<div id="outline-container-orgc20c845" class="outline-4">
<h4 id="orgc20c845">Example #1</h4>
<div class="outline-text-4" id="text-orgc20c845">
<p>
Initialize an array of 10 elements to its index.
</p>

<p>
Method #1: Initialization at declaration
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 10 ] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
}
</pre>
</div>

<p>
Method #2: Programmatically
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 10 ];

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 10; i++ )
    list[ i ] = i;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4dc378e" class="outline-4">
<h4 id="org4dc378e">Example #2</h4>
<div class="outline-text-4" id="text-org4dc378e">
<p>
Initialize an array of 500 elements to 0.
</p>

<p>
Method #1 : Programmaticly (the long way):
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];

    <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ )
        list[ i ] = 0;
}
</pre>
</div>

<p>
Or we could use the shortcut with automatic initialization by
setting just the first value to 0 and the rest will be done
automatically for us:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ] = { 0 };
}
</pre>
</div>

<p>
Tip: Newer compilers support simply putting {} to accomplish this.
</p>
</div>
</div>

<div id="outline-container-org822197b" class="outline-4">
<h4 id="org822197b">Example #3</h4>
<div class="outline-text-4" id="text-org822197b">
<p>
Initialize an array of 500 elements to their index.
</p>

<p>
Since listing out all 500 values would be tedious, the "long way"
is the only practical way in this case:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];

    <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ )
        list[ i ] = i;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb4a40c4" class="outline-4">
<h4 id="orgb4a40c4">Example #4</h4>
<div class="outline-text-4" id="text-orgb4a40c4">
<p>
Initialize an array of 5 elements to 0:
</p>

<p>
Any of the following will work:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = {}; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Newer compilers only!!</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Shortcut</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0, 0 };  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Shortcut</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0, 0, 0 };  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Shortcut</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0, 0, 0, 0 };  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Shortcut</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0, 0, 0, 0, 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Fully explicit</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[] = { 0, 0, 0, 0, 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Fully explicit</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[5];

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 5; i++ )  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Programmatic</span>
    list[ i ] = 0;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org3f52d44" class="outline-3">
<h3 id="org3f52d44">Day 19 Summary<a id="orgae185dc"></a></h3>
<div class="outline-text-3" id="text-org3f52d44">
</div>
<div id="outline-container-org364787d" class="outline-4">
<h4 id="org364787d">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org364787d">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org24d46fb" class="outline-4">
<h4 id="org24d46fb">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org24d46fb">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org486d73f" class="outline-2">
<h2 id="org486d73f">Day 20 - Wed, October 29, 2025<a id="orge56cb57"></a></h2>
<div class="outline-text-2" id="text-org486d73f">
</div>
<div id="outline-container-org5c58ff6" class="outline-3">
<h3 id="org5c58ff6">Day 20 Introduction<a id="org219ef10"></a></h3>
<div class="outline-text-3" id="text-org5c58ff6">
</div>
<div id="outline-container-org0705032" class="outline-4">
<h4 id="org0705032">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org0705032">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgdcf0a76" class="outline-3">
<h3 id="orgdcf0a76">Introduction to Strings<a id="org24a120f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgdcf0a76">
<p>
Strings in C don't exist in the way you're used to.  In C, strings
are just arrays of <span class="cmd">char</span>s BUT they <b>must</b> also end with a
<i>null</i> character, value 0.
</p>

<p>
Take a look:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[10] = { <span style="color: #ffa07a;">'B'</span>, <span style="color: #ffa07a;">'o'</span>, <span style="color: #ffa07a;">'B'</span> };

  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, name );
}
</pre>
</div>

<pre class="example" id="orgf8a9355">
$ cc sample.c -o sample
$ ./sample
Hello Bob!
$ 
</pre>

<p>
Notice the following:
</p>
<ol class="org-ol">
<li>Our "string" was declared just like an array.</li>
<li>We initialized our array as we normally would
<ol class="org-ol">
<li>BUT since we only provided 3 elements, the remaining 7 were
automatically initialized to 0s, or, the null character!</li>
</ol></li>
<li>We used the "%s" in our <span class="cmd">printf</span> to output the array as
a null-terminated string.</li>
</ol>
</div>

<div id="outline-container-orgf6f477f" class="outline-4">
<h4 id="orgf6f477f">Double-Quoted Strings <span class="underline">are</span> Null-Terminated</h4>
<div class="outline-text-4" id="text-orgf6f477f">
<p>
We could have also done the following:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[10] = <span style="color: #ffa07a;">"Bob"</span>;

  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, name );
  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, <span style="color: #ffa07a;">"Bob Dorf"</span> );
}
</pre>
</div>

<pre class="example" id="org6697ef6">
$ cc sample.c -o sample
$ ./sample 
Hello Bob!
Hello Bob Dorf!
$
</pre>

<p>
Notice, a <i>null-terminated</i> string can be represented as a
double-quoted string.
</p>

<p>
In the array initialization, <b>almost</b> the same thing happened as before.
However, this time the first <b>4</b> elements were initialized and the rest were
automatically set to 0 (null) for us.  (The double quoted string
<i>includes</i> a null char at the end.)
</p>

<p>
In fact, if we knew "Bob" was the only string ever to be held in
<i>name</i>, we could have done this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[] = <span style="color: #ffa07a;">"Bob"</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice we don't specify 10.</span>
</pre>
</div>

<p>
and 'name' would have been set to 4 elements: 'B', 'o', 'b', and <i>null</i>.
</p>
</div>
</div>

<div id="outline-container-org78c640a" class="outline-4">
<h4 id="org78c640a">Always Account for Null</h4>
<div class="outline-text-4" id="text-org78c640a">
<p>
Let's take a look and see what happens if we don't account for
the null character:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[3] = <span style="color: #ffa07a;">"Bob"</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Array is only 3 elements; does not account for null char.</span>

  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, name );
}
</pre>
</div>

<pre class="example" id="org7d5a9b9">
$ cc sample.c -o sample
$ ./sample
Hello BobpѤ`U!
$
</pre>

<p>
As you can see, we got more than anticipated.  <span class="cmd">printf</span>
kept printing chars <i>until</i> it found a null char.
</p>

<p>
Conclusion: when you're allocating array space for strings, be
sure you include room for the null-character, either automatically
put there, or manually by you!
</p>

<p>
This is due to the lack of range checking on arrays in C.  While
this time we got junk, it is possible our program could have 
segfault'd. 
</p>
</div>
</div>

<div id="outline-container-orga63a692" class="outline-4">
<h4 id="orga63a692">Double Quoted Strings are for Initialization and Parameters, not Assignment</h4>
<div class="outline-text-4" id="text-orga63a692">
<p>
While we can use double-quoted strings to initialize an array or
pass as a parameter, like:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[5] = <span style="color: #ffa07a;">"Bob"</span>;

  printf( <span style="color: #ffa07a;">"%s %s!\n"</span>, <span style="color: #ffa07a;">"Hello"</span>, name );
}
</pre>
</div>

<p>
We can <b>not</b> assign a double quoted string to a char array in
code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[5];   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Do not initialize.</span>

  name = <span style="color: #ffa07a;">"Bob"</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Instead, try to assign.</span>
  printf( <span style="color: #ffa07a;">"%s %s!\n"</span>, <span style="color: #ffa07a;">"Hello"</span>, name );
}
</pre>
</div>

<p>
Else when we compile we get:
</p>

<pre class="example" id="orgff52b13">
$ cc sample.c -o sample
sample.c: In function ‘main’:
sample.c:6:8: error: assignment to expression with array type                                                    
   name = "bob";
	^
$
</pre>

<p>
Basically, this is trying to assign the <i>content</i> of one array to
another which C isn't able to do.
</p>
</div>
</div>
</div>
<div id="outline-container-orgf78b7ed" class="outline-3">
<h3 id="orgf78b7ed">String Comparisons are Array Comparisons<a id="orgf4f7666"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf78b7ed">
<p>
Like arrays, strings can <b>not</b> be compared directly (again, arrays):
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name1</span>[10] = <span style="color: #ffa07a;">"Bob"</span>;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name2</span>[10] = <span style="color: #ffa07a;">"Sally"</span>;

  <span style="color: #00ffff;">if</span> ( name1 &lt; name2 ) {
    printf( <span style="color: #ffa07a;">"%s &lt; %s\n"</span>, name1, name2 );
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> ( name1 == name2 ) {
    printf( <span style="color: #ffa07a;">"%s = %s\n"</span>, name1, name2 );
  } <span style="color: #00ffff;">else</span> {
    printf( <span style="color: #ffa07a;">"%s &gt; %s\n"</span>, name1, name2 );
  } 
} 
</pre>
</div>

<pre class="example" id="org579dc5a">
$ cc sample.c -o sample
$ ./sample 
Bob &gt; Sally
$
</pre>

<p>
The reason is an array identifier just holds a memory address, not the string and
not even the first char of the string.
</p>

<p>
So to compare strings, we need to compare each element of the array
just like we would any other array.
</p>
</div>
<div id="outline-container-org82b09c7" class="outline-4">
<h4 id="org82b09c7">But First: ASCII</h4>
<div class="outline-text-4" id="text-org82b09c7">
<p>
Before we start seeing what it may take to compare strings, we
must first know what <i>ASCII</i> is. You should, but let's review.
</p>

<p>
ASCII, or the <i>American Standard Code for Information Interchange</i>, is an
encoding of letters, numbers, punctuation marks, and a few
"commands" to positive integer values.  You can view the ASCII
table <a href="https://www.asciitable.com/">here</a>.
</p>

<p>
In that table a capital 'A' is the value 65 and a lower-case
'z' is 122.  The symbol digit '0' is 48 and the symbol digit '9'
is 57.  A space is 32, a period is 46, etc, etc.
</p>

<p>
What this means is when we compare elements of a character array,
we're actually comparing their ASCII values!   (This is the reason
why we can do math on <i>char</i> types.)
</p>

<p>
Thus, 'A' &lt; 'a' because 65 &lt; 90.
</p>
</div>
</div>

<div id="outline-container-org6aca030" class="outline-4">
<h4 id="org6aca030">Comparing Strings in C (without extra help)</h4>
<div class="outline-text-4" id="text-org6aca030">
<p>
Now that we understand ASCII, to compare two strings in C, we need to compare the individual
elements (i.e. their ASCII values) and we'll end up with an
alpha-numeric, case-sensitive ordering.
</p>

<p>
Here is one solution:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name2</span>[10] = <span style="color: #ffa07a;">"Bob"</span>;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name1</span>[10] = <span style="color: #ffa07a;">"Bob"</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Strings are of the same length, so we'll not worry about</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">different length strings for now.</span>
  <span style="color: #00ffff;">for</span> ( i = 0; i &lt; 10; i++ ) {          <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Why did I declare 'i' outside???</span>
    <span style="color: #00ffff;">if</span> ( name1[ i ] &lt; name2[ i ] ) {
      printf( <span style="color: #ffa07a;">"%s &lt; %s\n"</span>, name1, name2 );
      i = 99;
    } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> ( name1[ i ] &gt; name2[ i ] ) {
      printf( <span style="color: #ffa07a;">"%s &gt; %s\n"</span>, name1, name2 );
      i = 99;
    }
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ith positions are equal, move on.</span>
  }
  <span style="color: #ff7f24;">// </span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">if i=99, we've printed the results and are done.</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">if i=10, we have found equal strings</span>
  <span style="color: #00ffff;">if</span> ( i == 10 )
    printf( <span style="color: #ffa07a;">"%s = %s\n"</span>, name1, name2 );
} 
</pre>
</div>

<p>
Since we've not learned how to prematurely bail out of loops, I
used the <i>i</i> variable as a flag to indicate if an answer was
already found.
</p>

<p>
However, to use <i>i</i> outside the <span class="cmd">for</span> loop, I had to
declare it outside the <span class="cmd">for</span> loop as well.  Had I done
this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; ...
</pre>
</div>

<p>
The <i>i</i> variable would not have been visible after the
<span class="cmd">for</span> loop to be used as a flag.
</p>

<p>
Also, notice we can manipulate the
<i>control variable</i> beyond what the <span class="cmd">for</span> loop does in the
<i>increment</i> section of the header. 
</p>

<p>
(Hint: <span class="cmd">for</span> loops are just concisely written
<span class="cmd">while</span> loops.  In fact, <b>any</b> loop structure can be
"simulated" using a <span class="cmd">while</span> loop.)
</p>
</div>
</div>
</div>
<div id="outline-container-orgb8ebb93" class="outline-3">
<h3 id="orgb8ebb93">Introduction to Input&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb8ebb93">
<p>
We've obviously done lots of output, but what about input?  Well,
let's do a basic introduction to provide us a means of writing some
useful tools.
</p>

<p>
To input a value from the user, we use the <span class="cmd">scanf</span>
function which is also provided in the <span class="cmd">stdio.h</span> library.
This function, like <span class="cmd">printf</span>, takes a string
containing placeholders, and list of variables&#x2026;sort of.
</p>

<p>
Take a look at this simple example:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[10];

  printf( <span style="color: #ffa07a;">"Enter your name: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, name );
  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, name );
}
</pre>
</div>

<pre class="example" id="org50dc4fe">
$ cc sample.c -o sample
$ ./sample
Enter your name: Bob
Hello Bob!
$
</pre>

<p>
Looks pretty simple, yes?  We declare an array of chars, but don't
need to initialize it since we'll be reading a value right
away. (But do be sure you allocate a big-enough array.)
</p>

<p>
The <span class="cmd">scanf</span> call is used to get input for a null-terminated string
(%s) thus why we use that placeholder.  Once read in, we print out
the result. 
</p>
</div>
<div id="outline-container-org3ff18ef" class="outline-4">
<h4 id="org3ff18ef">Only Placeholders, no Text (for this class)</h4>
<div class="outline-text-4" id="text-org3ff18ef">
<p>
For this class, <span class="cmd">scanf</span> will only take placeholders, no additional text.
</p>

<p>
Let's see what happens if we do:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">name</span>[10];

  scanf( <span style="color: #ffa07a;">"Enter your name: %s"</span>, name );
  printf( <span style="color: #ffa07a;">"Hello %s!\n"</span>, name );
}
</pre>
</div>

<p>
while this compiles and runs, notice the erroneous output:
</p>
<pre class="example" id="orgc26e2fb">
$ cc sample.c -o sample                                                                                          
$ ./sample                                                                                                       
Bob
Hello !
$
</pre>

<p>
First, the "prompt" never showed up, and second, "Bob" never got
placed into <i>name</i>.
</p>
</div>
</div>

<div id="outline-container-org1ab0336" class="outline-4">
<h4 id="org1ab0336">Primitive Problems</h4>
<div class="outline-text-4" id="text-org1ab0336">
<p>
Reading in <i>primitive</i> values don't work like arrays.
<i>Primitive</i> values are those like integers, floats, longs,
etc&#x2026;a single atomic value.  <i>name</i> was an array - a collection
of values! 
</p>

<p>
Consider this example:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  printf( <span style="color: #ffa07a;">"Enter a value: "</span> );
  scanf( <span style="color: #ffa07a;">"%i"</span>, x );
  printf( <span style="color: #ffa07a;">"You entered %i\n"</span>, x );
}
</pre>
</div>

<p>
Looks normal, but watch what happens:
</p>
<pre class="example" id="org93ebac2">
$ ./sample
Enter a value: 5
Segmentation fault
$
</pre>
</div>
</div>
<div id="outline-container-orgef58196" class="outline-4">
<h4 id="orgef58196">How <span class="cmd">scanf</span> Really Works</h4>
<div class="outline-text-4" id="text-orgef58196">
<p>
The issue is <span class="cmd">scanf</span> does not take a variable <b>value</b> to
do its work.  Instead, it needs a <b>pointer</b> to where the read-in value
goes!
</p>

<p>
A <i>pointer</i> in C is synonmous to a <i>reference</i> in Java and other
languages.  In this example:
</p>

<div class="org-src-container">
<pre class="src src-c">scanf( <span style="color: #ffa07a;">"%i"</span>, x );
</pre>
</div>

<p>
We were passing <span class="cmd">scanf</span> the <b>value</b> of <i>x</i>, not the
memory location where <i>x</i> is in RAM.
</p>

<p>
To send the RAM address of a variable to a function, we need to
precede the variable with an ampersand '&amp;':
</p>

<div class="org-src-container">
<pre class="src src-c">scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );    
</pre>
</div>

<p>
This will tell <span class="cmd">scanf</span> WHERE the <i>x</i> variable is located in
RAM.  Then, when <span class="cmd">scanf</span> reads in the integer, it will
store the input at the appropriate location.
</p>

<p>
Here is the correct version of the program:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  printf( <span style="color: #ffa07a;">"Enter a value: "</span> );
  scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );
  printf( <span style="color: #ffa07a;">"You entered %i\n"</span>, x );
}
</pre>
</div>

<p>
and the new output:
</p>
<pre class="example" id="org0c57f8a">
$ ./sample
Enter a value: 5
You entered 5
$
</pre>
</div>
</div>
<div id="outline-container-orgef920a4" class="outline-4">
<h4 id="orgef920a4">Why No '&amp;' for Arrays?</h4>
<div class="outline-text-4" id="text-orgef920a4">
<p>
So why didn't we need an ampersand '&amp;' for our <i>name</i> array variable?
The reason is array variables don't hold values.  Array variables
hold RAM addresses already - the location where the array data is stored.  
</p>

<p>
For example:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 1, 2, 3, 4, 5 };

  printf( <span style="color: #ffa07a;">"List is located at %i\n"</span>, list );
  printf( <span style="color: #ffa07a;">"The array data is:\n"</span> );
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 5; i++ )
    printf( <span style="color: #ffa07a;">"  Index %i = %i\n"</span>, i, list[ i ] );
}
</pre>
</div>

<pre class="example" id="org9eed9d8">
$ cc sample.c -o sample
$ ./sample
List is located at 1763300672
The array data is:
  Index 0 = 1
  Index 1 = 2
  Index 2 = 3
  Index 3 = 4
  Index 4 = 5
$
</pre>

<p>
The location will probably be different on your machine, but not
the values!
</p>
</div>
</div>
</div>
<div id="outline-container-orgb02d319" class="outline-3">
<h3 id="orgb02d319">Functions<a id="org8148a60"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgb02d319">
<p>
You should all be basically familiar with functions.  So we'll get
right to the details:
</p>
</div>
<div id="outline-container-org5a8b482" class="outline-4">
<h4 id="org5a8b482">Format</h4>
<div class="outline-text-4" id="text-org5a8b482">
<p>
The basic structure of a <i>function</i> is:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">return_type</span> <span style="color: #87cefa;">function_name</span>( <span style="color: #98fb98;">parameter</span> <span style="color: #eedd82;">list</span> ) {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Code body</span>
    <span style="color: #00ffff;">return</span> value; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">if "return_type" is not 'void'</span>
}
</pre>
</div>

<p>
For example, here is a function which returns a value times two:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">times2</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {
  <span style="color: #00ffff;">return</span> n * 2;
}
</pre>
</div>

<p>
or if the function has no return value, i.e. perhaps a function which
prompts the user for a number:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">prompt</span>() {                           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'void' return type</span>
  printf( <span style="color: #ffa07a;">"Please enter a number: "</span> );
} <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">notice no 'return' statement</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd82676b" class="outline-4">
<h4 id="orgd82676b">Pass-By-Value</h4>
<div class="outline-text-4" id="text-orgd82676b">
<p>
All function parameters in C are "pass-by-value".  This means when
you call a function and pass in information, <i>a copy of the
variable's value</i> is sent to the function.  This allows the
parameter to be treated as a local variable and prevents the
function from changing the original variable's value:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> ) {
  x = x + 5;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 6;

  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
  try_changing( x );
  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
}
</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="orge115a95">
$ cc sample.c -o sample
$ ./sample 
Value of x : 6
Value of x : 6
$
</pre>
</div>
</div>

<div id="outline-container-org5b4d3ba" class="outline-4">
<h4 id="org5b4d3ba">Return Types and Value</h4>
<div class="outline-text-4" id="text-org5b4d3ba">
<p>
Since functions are pass-by-value, at this point, any modified
values will need to be <i>return</i>'d by the function.
</p>

<p>
Note: all return-type possibilities must be a single "value"/type
(i.e. be atomic in nature).  So we can't return entire arrays.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> ) {         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice we needed to adjust our return type</span>
  <span style="color: #00ffff;">return</span> x + 5;                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget the return statement.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 6;

  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
  x = try_changing( x );
  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
}
</pre>
</div>

<p>
and now:
</p>

<pre class="example" id="org10eda21">
$ cc sample.c -o sample
$ ./sample 
Value of x : 6
Value of x : 11
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org3bcaf8e" class="outline-3">
<h3 id="org3bcaf8e">C Structures<a id="org9f09ab8"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org3bcaf8e">
<p>
To provide <i>complex data structures</i> C provides us a
<span class="cmd">struct</span> paradigm.  A <span class="cmd">struct</span> is a combination
of data in a "package"&#x2026;a structure.
</p>

<p>
The general format of a <span class="cmd">struct</span> is:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">identifier</span> {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">variable declarations; *not initializations*</span>
};
</pre>
</div>

<p>
WARNING: Don't forget the ';' after the closing '}'!!
</p>

<p>
For example, the ever-so-popular:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
};
</pre>
</div>

<p>
To <i>declare</i> a variable of a <span class="cmd">struct</span> type, just include
<span class="cmd">struct</span> and the struct name before your variable
identifier:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">struct definition</span>
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
    <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
  };

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">location</span>;    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">struct declaration</span>

}
</pre>
</div>

<p>
If you are going to use the <span class="cmd">struct</span> definition in other
functions, it's best to define it outside of <span class="cmd">main</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">location</span>;
}
</pre>
</div>

<p>
FORESHADOW: As you get more and more <span class="cmd">struct</span>s, you can see where
<span class="fname">.h</span> files come in handy! (Discussed later in the
course.)
</p>
</div>

<div id="outline-container-org0c4ac60" class="outline-4">
<h4 id="org0c4ac60">Accessing the Parts of a Struct</h4>
<div class="outline-text-4" id="text-org0c4ac60">
<p>
To access the parts of a <span class="cmd">struct</span>, we use dot-notation:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">location</span>;

  location.x = 0.0;
  location.y = 0.0;

}
</pre>
</div>
</div>
</div>
<div id="outline-container-org96cd226" class="outline-4">
<h4 id="org96cd226">Structs are Not Pointers!</h4>
<div class="outline-text-4" id="text-org96cd226">
<p>
<span class="cmd">struct</span>s are not pointers.  They are like primitives,
just with multiple parts.  For example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">changeme</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">L</span> ) {
  L.x = 1.0;
  L.y = 2.0;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">location</span>;

  location.x = 0.0;
  location.y = 0.0;

  printf ( <span style="color: #ffa07a;">"(X,Y) = (%f,%f)\n"</span>, location.x, location.y );
  changeme( location );
  printf ( <span style="color: #ffa07a;">"(X,Y) = (%f,%f)\n"</span>, location.x, location.y );

}
</pre>
</div>

<p>
and
</p>

<pre class="example" id="orge02b187">
$ make
cc prompt.o sample.c -o sample
$ ./sample
(X,Y) = (0.000000,0.000000)
(X,Y) = (0.000000,0.000000)
$
</pre>

<p>
Notice our values don't change, <b>but</b> we <i>can</i> return a
<span class="cmd">struct</span> from a function since it is considered a
primitive/atomic type:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Return the struct</span>
<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #87cefa;">changeme</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">L</span> ) {
  L.x = 1.0; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Modify the *local* variable L</span>
  L.y = 2.0;
  <span style="color: #00ffff;">return</span> L;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now return the *values*</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">location</span>;

  location.x = 0.0;
  location.y = 0.0;

  printf ( <span style="color: #ffa07a;">"(X,Y) = (%f,%f)\n"</span>, location.x, location.y );
  location = changeme( location );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">new form</span>
  printf ( <span style="color: #ffa07a;">"(X,Y) = (%f,%f)\n"</span>, location.x, location.y );

}
</pre>
</div>

<p>
and
</p>

<pre class="example" id="orga49b1ee">
$ make
cc prompt.o sample.c -o sample
$ ./sample
(X,Y) = (0.000000,0.000000)
(X,Y) = (1.000000,2.000000)
$
</pre>
</div>
</div>
<div id="outline-container-org2d80965" class="outline-4">
<h4 id="org2d80965">Compound Structs</h4>
<div class="outline-text-4" id="text-org2d80965">
<p>
Remember, <span class="cmd">struct</span>s are like primitives, so they can be
members of another struct to build <i>compound structs</i>, more
commonly known as <i>Complex Data Structures</i>.
</p>

<p>
Consider the following example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">person</span> {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">fname</span>[20];
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">lname</span>[20];
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">broncoid</span>;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">bronconame</span>[20];
};

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">course</span> {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">title</span>[30];  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ex: "Systems Programming"</span>
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">crn</span>;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">40032</span>
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">major</span>[3];   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ex: "CS" (Don't forget the null!)</span>
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">class</span>;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ex: 2600</span>
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">section</span>;    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ex: 2</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">person</span> <span style="color: #eedd82;">students</span>[ 50 ];  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Make room for 50 students.</span>
};

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">class_load</span> {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">course</span> <span style="color: #eedd82;">courses</span>[ 4 ]; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Most instructors don't teach more than 3-4 classes</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">person</span> <span style="color: #eedd82;">instructor</span>; 
};

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">department</span> {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">id</span>[ 30 ];                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ex: "Computer Science"</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">class_load</span> <span style="color: #eedd82;">offerings</span>[100];  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Collection of instructors and their classes</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">num_offerings</span>;                 <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">and how many there *actually* are. </span>
};
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org42edf98" class="outline-3">
<h3 id="org42edf98">Prototypes<a id="orge967863"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org42edf98">
<p>
In the previous examples, did you notice the function
<span class="cmd">try_changing</span> was defined <i>above</i> <span class="cmd">main</span>?  C
requires "knowledge" of any function before we can use said function.  
</p>

<p>
Notice I said "knowledge" and not "definition"!  We do not have to
fully define functions before we can use them in code.  C,
again, gives the coder flexibility and the additional
responsibility to tell the compiler, "I will have a function that
looks like this, but I'll define it later".
</p>

<p>
These "heads-up" of functions to be defined later, are called
"prototypes".
</p>

<p>
By telling the compiler about a function, but not fully defining
it, we're allowed to have the full function definition elsewhere in
our code.
</p>
</div>

<div id="outline-container-org293aba4" class="outline-4">
<h4 id="org293aba4">What is a Prototype?</h4>
<div class="outline-text-4" id="text-org293aba4">
<p>
A prototype is basically the function header (first line), ending
in a ';' instead of a '{':
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> );
</pre>
</div>

<p>
This is all the compiler needs to <i>start</i> compiling our
<span class="cmd">main</span> routine.  However, at some point, <b>we will need</b>
to fully define our function, but now we can have all those lines
later on in the source code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> );

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = 6;

  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
  x = try_changing( x );
  printf( <span style="color: #ffa07a;">"Value of x : %i\n"</span>, x );
}


<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> ) {
  <span style="color: #00ffff;">return</span> x + 5;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org06a878f" class="outline-4">
<h4 id="org06a878f">But That's More Lines.  Why Prototype?</h4>
<div class="outline-text-4" id="text-org06a878f">
<p>
True, it's more lines of code, but it improves readability (among
other things).
Consider a book where you would typically read the back cover, the
preface, and the table of contents to "get an idea" of the what
the book is about and how it's going to communicate the story.
</p>

<p>
Prototypes are like the table of contents giving you a little
heads up of what is going to happen.  Then, the <span class="cmd">main</span>
routine gives your "back cover" version of the story.  The
functions are all the nitty-gritty details.
</p>

<p>
Consider a program which has a <span class="cmd">main</span> routine like this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[1000];

  read( list );
  sort( list );
  print_report( list );
}
</pre>
</div>

<p>
You don't need the details to know what the program is doing.
However, should all the details be in <span class="cmd">main</span>, it will
take a bit of reading first to determine what the program is doing.  In fact,
you're probably going to start scanning the code rather than
<i>reading</i> the code, to get the gist of things.
</p>

<p>
Without prototypes, our code would require all three functions
 to be fully defined above <span class="cmd">main</span>.  
</p>

<p>
With prototypes, our code is still readable AND you now have a
"table of contents":
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">read</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 1000 ] );
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">sort</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 1000 ] );
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print_report</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 1000 ] );

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[1000];

  read( list );
  sort( list );
  print_report( list );
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org9393211" class="outline-4">
<h4 id="org9393211">Modularity</h4>
<div class="outline-text-4" id="text-org9393211">
<p>
Another benefit to prototypes is modularity.  Later, we'll discuss
<i>header</i> files (.h files) and their accompanying .c files.  Our
code becomes even more modular by breaking out our
functions to separate files.
</p>

<p>
For example,
</p>
<ul class="org-ul">
<li>report.h : Contains prototypes and global variables</li>
<li>report.c : Contains the function definitions</li>
<li>myprogram.c : Contains <i>main</i> and the <i>#include</i> lines</li>
</ul>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;report.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[1000];

  read( list );
  sort( list );
  print_report( list );
}
</pre>
</div>

<p>
Again, we'll see more of this later in the course.
</p>
</div>
</div>
</div>
<div id="outline-container-org6415eac" class="outline-3">
<h3 id="org6415eac">Day 20 Summary<a id="org14e7b01"></a></h3>
<div class="outline-text-3" id="text-org6415eac">
</div>
<div id="outline-container-org23f31c2" class="outline-4">
<h4 id="org23f31c2">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org23f31c2">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgd4ea305" class="outline-4">
<h4 id="orgd4ea305">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgd4ea305">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgea158d3" class="outline-2">
<h2 id="orgea158d3">Day 21 - Mon, November 3, 2025<a id="org16f0b37"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Midterm">Midterm</span></span></h2>
<div class="outline-text-2" id="text-orgea158d3">
</div>
<div id="outline-container-org3a81401" class="outline-3">
<h3 id="org3a81401">Day 21 Introduction<a id="org047ddcc"></a></h3>
<div class="outline-text-3" id="text-org3a81401">
</div>
<div id="outline-container-org6a560d3" class="outline-4">
<h4 id="org6a560d3">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org6a560d3">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org3452d26" class="outline-3">
<h3 id="org3452d26">Midterm #2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="M2">M2</span></span></h3>
<div class="outline-text-3" id="text-org3452d26">
<ul class="org-ul">
<li><b>Exam is closed book, closed notes, no Internet resources, no
shell access, and no collaboration of any kind.</b>
<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;"><b>Warning: Discord and other collaboration tools have been detected! Please don't risk it!</b></span></li>
</ul></li>
<li>All answers must be derived from material covered in class.</li>
<li>Exam will be available from 5:30pm to 6:50pm</li>
<li>During the quiz, Zoom chat will be limited to posts only with
instructor, so you may ask questions while you take the quiz.</li>
<li>You will have 75 minutes to complete the quiz from the time you start.
<ul class="org-ul">
<li>After the 75 minutes, the quiz is set to auto-submit.</li>
<li>If you get disconnected from the network, you will be able to
get back into the quiz but keep in mind the timer keeps going.</li>
</ul></li>
<li>You will be presented one question at a time; backtracking to previous questions is not permitted</li>
<li>Be careful to use <b><i>NEXT</i></b> to advance to the next question and not
accidentally click "Submit" until you are finished.</li>
<li>You may assume all files and directory names contain only letters
(both-cases), digits, underscores, and/or periods.</li>
</ul>

<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;">Results will not be available/visible until all student submissions have been graded.</span></li>
</ul>

<p>
NOTE #1: 'Fill in the blank' answers are simple enough to be
automatically graded. So read the question carefully and be
precise - no extraneous words (i.e. "Solution" vs "My answer is
'Solution'.")    
</p>
</div>
</div>
<div id="outline-container-org2151d5f" class="outline-3">
<h3 id="org2151d5f">Day 21 Summary<a id="orgcbd8a7d"></a></h3>
<div class="outline-text-3" id="text-org2151d5f">
</div>
<div id="outline-container-org95bd46a" class="outline-4">
<h4 id="org95bd46a">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org95bd46a">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgb25f0e5" class="outline-4">
<h4 id="orgb25f0e5">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgb25f0e5">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd2a2f84" class="outline-2">
<h2 id="orgd2a2f84">Day 22 - Wed, November 5, 2025<a id="orgf2bcf08"></a></h2>
<div class="outline-text-2" id="text-orgd2a2f84">
</div>
<div id="outline-container-org8976155" class="outline-3">
<h3 id="org8976155">Day 22 Introduction<a id="orged86f81"></a></h3>
<div class="outline-text-3" id="text-org8976155">
</div>
<div id="outline-container-orgb77baa0" class="outline-4">
<h4 id="orgb77baa0">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgb77baa0">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orga37f8fd" class="outline-3">
<h3 id="orga37f8fd">Arrays with Functions<a id="orge072ad2"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orga37f8fd">
<p>
Remember our discussion of arrays of characters and the
<span class="cmd">scanf</span> function?  Remember how the array variable was
actually a label for a RAM location and didn't "hold a value"?
</p>

<p>
This can work for us when using arrays as function parameters.  You
remember how a function could not modify a variable's passed in
value, like an <span class="cmd">int</span>:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> ) {
  x = x + 5;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Only changes 'x' in this local scope, not outside.</span>
}
</pre>
</div>

<p>
With arrays, the variable name is a RAM location and that location
is not going to change.  So accessing an array inside a function
<i>will</i> change the data in the array as we expect!!
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] ); <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice 'void' return type</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">shorthand to init all to 0</span>

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 5; i++ )                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Show array content</span>
    printf( <span style="color: #ffa07a;">"Index %i : %i\n"</span>, i, list[ i ] );  

  try_changing( list );

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 5; i++ )                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Show array content</span>
    printf( <span style="color: #ffa07a;">"Index %i : %i\n"</span>, i, list[ i ] );  
}


<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] ) {  
  list[ 1 ] = 27;
  list[ 3 ] = -8;
}
</pre>
</div>

<p>
with output:
</p>

<pre class="example" id="orgc35d84e">
$ cc sample.c -o sample
$ ./sample 
Index 0 : 0
Index 1 : 0
Index 2 : 0
Index 3 : 0
Index 4 : 0
Index 0 : 0
Index 1 : 27
Index 2 : 0
Index 3 : -8
Index 4 : 0
$
</pre>
</div>
<div id="outline-container-org00a9220" class="outline-4">
<h4 id="org00a9220">An Improvement</h4>
<div class="outline-text-4" id="text-org00a9220">
<p>
Did you notice something about this code?  The code to print out
the array is duplicated&#x2026;perfect for a function itself!
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] ); <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice 'void' return type</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] );        

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] = { 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">shorthand to init all to 0</span>

  print( list );
  try_changing( list );
  print( list );
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">try_changing</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] ) { 
  list[ 1 ] = 27;
  list[ 3 ] = -8;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 5 ] ) { 
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 5; i++ )
    printf( <span style="color: #ffa07a;">"Index %i : %i\n"</span>, i, list[ i ] );
}
</pre>
</div>

<p>
with output:
</p>

<pre class="example" id="orgd5b9517">
$ cc sample.c -o sample
$ ./sample 
Index 0 : 0
Index 1 : 0
Index 2 : 0
Index 3 : 0
Index 4 : 0
Index 0 : 0
Index 1 : 27
Index 2 : 0
Index 3 : -8
Index 4 : 0
$
</pre>

<p>
BTW, the order of the prototypes does <b>not</b> have to match the order
you fully define your functions.
</p>
</div>
</div>

<div id="outline-container-org7431cca" class="outline-4">
<h4 id="org7431cca">Returning Arrays from Function</h4>
<div class="outline-text-4" id="text-org7431cca">
<p>
For now, you can't.  Functions can only return a <i>single</i> value
and arrays are <i>multiple</i> values.
</p>

<p>
While the array variable <b>is</b> a single value, it is a RAM location
and not a primitive data type (or struct) we've discussed&#x2026;yet. :)
</p>

<p>
This will change once we discuss <i>pointers</i>.
</p>
</div>
</div>
</div>
<div id="outline-container-org084342d" class="outline-3">
<h3 id="org084342d">Redirection&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org084342d">
<p>
Remember redirection in Bash? How the '&gt;' and '&lt;' redirected the
STDOUT and STDIN streams, respectively?  Even though our code is in
C, our programs also use these streams, so redirection is available
to us.
</p>
</div>
<div id="outline-container-org4631282" class="outline-4">
<h4 id="org4631282">Step 1 : Generate a file of random integers</h4>
<div class="outline-text-4" id="text-org4631282">
<p>
In Bash, remember the environment variable called <span class="cmd">$RANDOM</span>
will provide a random positive number between 0 and 32767.  We just
need to access it like normal:
</p>

<pre class="example" id="org9e5e74d">
$ echo $RANDOM
4537
$ echo $RANDOM
14860
$ echo $RANDOM
4387
$ echo $RANDOM
15167
$
</pre>

<p>
Using Bash, let's create a file of 500 random positive numbers.
</p>

<pre class="example" id="org2ff27bc">
$ for n in {1..500}; do      # {1..500} is shorthand for 1,2,3,4,...,499,500
&gt; echo $RANDOM
&gt; done &gt; random_numbers.txt
$ head random_numbers.txt 
19126
8829
21983
13515
11983
21912
12074
53
11783
27038
$ wc -l random_numbers.txt 
500 random_numbers.txt
$ 
</pre>
</div>
</div>
<div id="outline-container-org04663ff" class="outline-4">
<h4 id="org04663ff">Step 2 : Write a C program to read in the 500 random numbers</h4>
<div class="outline-text-4" id="text-org04663ff">
<p>
The program to read in 500 random numbers <i><b>from a user</b></i> (i.e. keyboard) may look
like this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ ) {
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );               <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Why read in 'x'</span>
    list[ i ] = x;                   <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">and then assign to array????</span>
  }                                  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Answer coming up soon.</span>
}
</pre>
</div>

<p>
When we run the program normally, it will wait for the user to
enter 500 values, one at a time:
</p>

<pre class="example" id="org2c45633">
$ ./sample 
6
23
1
4
9
76
[...]
$
</pre>
</div>
</div>

<div id="outline-container-orgbf5bdc8" class="outline-4">
<h4 id="orgbf5bdc8">Step 3 : Using redirection to "speed things up"</h4>
<div class="outline-text-4" id="text-orgbf5bdc8">
<p>
Since this program is just using STDIN, we can use redirection to
read in the 500 values quickly and easily:
</p>

<pre class="example" id="org296b597">
$ ./sample  &lt; random_numbers.txt 
$
</pre>

<p>
Don't believe it?  Let's change the file to 500 '1's and then add
the array elements after reading them.
</p>

<p>
First, create a file of 500 '1's:
</p>
<pre class="example" id="org086601c">
$ for n in {1..500}; do 
&gt; echo 1
&gt; done &gt; list_of_numbers.txt
$ wc -l list_of_numbers.txt 
500 list_of_numbers.txt
$ head list_of_numbers.txt 
1
1
1
1
1
1
1
1
1
1
$
</pre>

<p>
Next, adjust our code to add up the array elements after reading
them in:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sum</span> = 0; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Be wise, initialize!</span>

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ ) {
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );
    list[ i ] = x;
    sum = sum + list[ i ];
  }
  printf( <span style="color: #ffa07a;">"Sum : %i\n"</span>, sum );
}
</pre>
</div>

<p>
And finally, run with redirection:
</p>

<pre class="example" id="org0fa7b4b">
$ cc sample.c -o sample
$ ./sample &lt; list_of_numbers.txt
Sum : 500
$
</pre>

<p>
Optionally, you can even capture the output as well:
</p>

<pre class="example" id="orge3ee21a">
$ cc sample.c -o sample
$ ./sample &lt; list_of_numbers.txt &gt; output.txt
$
$ cat output.txt
Sum : 500
$
</pre>
</div>
</div>
</div>
<div id="outline-container-org181358e" class="outline-3">
<h3 id="org181358e">Array Input Revisited&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org181358e">
<p>
Here is the small example again:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ ) {
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );
    list[ i ] = x;
  }
}
</pre>
</div>

<p>
But why read in <i>x</i> and then assign to <i>list[x]</i> and not just read
in <i>list[x]</i>?
</p>

<p>
Because at this point there is a question: Do we use an '&amp;' on an array
element variable like a primitive, or do we leave it off since it's
the array variable we're using?
</p>

<p>
The answer is, we use an '&amp;', but why?  Well, because while <i>list</i>
is a RAM location, <i>list[i]</i> is an <b>element</b> of the array&#x2026;like a
primitive. 
</p>

<p>
For example, look what happens when we don't use '&amp;':
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ )
    scanf( <span style="color: #ffa07a;">"%i"</span>, list[ i ] );
}
</pre>
</div>

<pre class="example" id="org986c3e1">
$ ./sample
3                        # Manually entered.
Segmentation fault
$
</pre>

<p>
Since list[ i ] is a primitive and not an array, we need the '&amp;'.  Here is
the new method without 'x' and also adding up the values: 
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[ 500 ];
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sum</span> = 0; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Be wise, initialize!</span>

  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 500; i++ ) {
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;list[ i ] );
    sum = sum + list[ i ];
  }
  printf( <span style="color: #ffa07a;">"Sum : %i\n"</span>, sum );
}
</pre>
</div>

<p>
and the execution:
</p>

<pre class="example" id="org35fc4e9">
$ cc sample.c -o sample
$ ./sample &lt; list_of_numbers.txt 
Sum : 500
$
</pre>
</div>
</div>
<div id="outline-container-org71e9581" class="outline-3">
<h3 id="org71e9581">Header Files and C Files<a id="org6939220"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org71e9581">
<p>
As you build bigger projects, <i>modularity</i> and <i>abstraction</i> should
be employed.  Part of these is keeping your main routine as clean
as you feel you need to.  Remember what we talked about regarding
<i>readability</i>?
</p>

<p>
Part of doing this was to have prototypes before your
<span class="cmd">main</span> routine and putting the full function definition
after <span class="cmd">main</span>.  
</p>

<p>
However, we can go a step further by putting the components in
different files:
</p>

<ul class="org-ul">
<li>Prototypes can go in <span class="fname">.h</span> files, and</li>
<li>Function definitions can go in an associated <span class="cmd">.c</span> file.</li>
</ul>
</div>
<div id="outline-container-org78c49c5" class="outline-4">
<h4 id="org78c49c5">Header Files</h4>
<div class="outline-text-4" id="text-org78c49c5">
<p>
<span class="fname">.h</span> files are called <i>header files</i> because they
normally hold function headers&#x2026;the prototypes.  While these files
<i>can</i> hold other information, it's typically reserved for global
constants, structs, and prototypes.
</p>
</div>
</div>
<div id="outline-container-orgcb41e0e" class="outline-4">
<h4 id="orgcb41e0e">C Files</h4>
<div class="outline-text-4" id="text-orgcb41e0e">
<p>
<span class="fname">.c</span> files are where the actual C code is stored.  For
example <span class="cmd">main</span> is put into a <span class="fname">.c</span> file.
However, we can put our full function definitions into a separate
file(s) as well.
</p>
</div>
</div>
<div id="outline-container-orgf9565b9" class="outline-4">
<h4 id="orgf9565b9">Caveat #1</h4>
<div class="outline-text-4" id="text-orgf9565b9">
<p>
The first caveat to putting our information in separate files is
the function prototypes must go into a <span class="cmd">.h</span> file while
the function definitions go into a <span class="fname">.c</span> file.  Often,
the base names of these files are identical, but it is not
required if you account for it during compilation.
</p>
</div>
</div>
<div id="outline-container-org59142f0" class="outline-4">
<h4 id="org59142f0">Caveat #2</h4>
<div class="outline-text-4" id="text-org59142f0">
<p>
We must have additional <span class="cmd">include</span> lines in our main file
telling the compiler to use our separate files. 
</p>
</div>
</div>
</div>
<div id="outline-container-org2c78e9f" class="outline-3">
<h3 id="org2c78e9f"><span class="cmd">.h</span> and <span class="cmd">.c</span> Example&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2c78e9f">
<p>
Consider this simple program:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Prompt the user for an integer within a low-high range</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_value</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">prompt</span>[30], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">low</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">high</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">value</span> = 0;

  <span style="color: #00ffff;">do</span>{
    printf( <span style="color: #ffa07a;">"%s: "</span>, prompt );              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Prompt the user</span>
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;value );                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get the input; Don't forget '&amp;'</span>
  } <span style="color: #00ffff;">while</span> ( value &lt; low || value &gt; high ); <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Do it again if out of range.</span>

  <span style="color: #00ffff;">return</span> value;                            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Return the acceptable value</span>
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Main routine</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Declare/init in one step (optional)</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> = get_value( <span style="color: #ffa07a;">"Enter a number from 1 to 10"</span>, 1, 10 );

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Print results</span>
  printf( <span style="color: #ffa07a;">"You entered %i.\n"</span>, n );
}
</pre>
</div>

<p>
And run a few times to ensure it works correctly:
</p>

<pre class="example" id="org2962010">
$ cc sample.c -o sample
$ ./sample
Enter a number from 1 to 10: 1
You entered 1.
$ ./sample
Enter a number from 1 to 10: 5
You entered 5.
$ ./sample
Enter a number from 1 to 10: 10
You entered 10.
$ ./sample
Enter a number from 1 to 10: 0
Enter a number from 1 to 10: 11
Enter a number from 1 to 10: 30
Enter a number from 1 to 10: -5
Enter a number from 1 to 10: 3
You entered 3.
$
</pre>
</div>

<div id="outline-container-orgf52032c" class="outline-4">
<h4 id="orgf52032c">Create <span class="fname">.h</span> and <span class="fname">.c</span> Files for Functions</h4>
<div class="outline-text-4" id="text-orgf52032c">
<p>
Now create a file called <span class="fname">prompt.h</span>:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">prompt.h - prototype only</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_value</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">prompt</span>[30], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">low</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">high</span> );
</pre>
</div>

<p>
and the associated <span class="fname">prompt.c</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">prompt.c - actual code; comments removed for brevity</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_value</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">prompt</span>[30], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">low</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">high</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">value</span> = 0;

  <span style="color: #00ffff;">do</span>{
    printf( <span style="color: #ffa07a;">"%s: "</span>, prompt );
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;value );                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget the '&amp;'</span>
  } <span style="color: #00ffff;">while</span> ( value &lt; low || value &gt; high );
  <span style="color: #00ffff;">return</span> value;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orga845d1a" class="outline-4">
<h4 id="orga845d1a">Fix Main <span class="fname">sample.c</span></h4>
<div class="outline-text-4" id="text-orga845d1a">
<p>
Now we modify our main file to utilize the extra files:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">"prompt.h"</span>    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">New addition to tell compiler to include our files.</span>
                       <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">Notice the "" instead of &lt;&gt; since our file is not</span>
                       <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">part of the C built-in, provided libraries.</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> = get_value( <span style="color: #ffa07a;">"Enter a number from 1 to 10"</span>, 1, 10 );

  printf( <span style="color: #ffa07a;">"You entered %i.\n"</span>, n );
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org6918a58" class="outline-4">
<h4 id="org6918a58">Compile and Re-Run</h4>
<div class="outline-text-4" id="text-org6918a58">
<p>
So what happens when we re-compile?
</p>

<pre class="example" id="orgf3ce3be">
$ cc sample.c -o sample
/usr/bin/ld: /tmp/ccNC7eQ1.o: in function `main':
sample.c:(.text+0x1a): undefined reference to `get_value'
collect2: error: ld returned 1 exit status
$
</pre>

<p>
The output complains it can't find our <span class="cmd">get_value</span>
function.  More specifically, the <i><b>linker</b></i> <span class="cmd">ld</span> can't
find our function.
</p>

<p>
In other words, the <span class="fname">prompt.c</span> file was never compiled
so the resulting object code was never included with the program.
</p>
</div>
</div>

<div id="outline-container-org379f9c1" class="outline-4">
<h4 id="org379f9c1">A New View</h4>
<div class="outline-text-4" id="text-org379f9c1">
<p>
Think about what we have now:
</p>

<ul class="org-ul">
<li>sample.c : source code of our main routine</li>
<li>prompt.h : The prototype(s) of support functions, <i>included</i>
within <span class="fname">sample.c</span></li>
<li>prompt.c : The actual code of our 'prompt' function</li>
<li><span class="cmd">cc sample.c -o sample</span>: Compile commmand for our main
routine source file.</li>
</ul>

<p>
Notice the compile command uses <span class="cmd">sample.c</span> which includes
<span class="fname">prompt.h</span> but we never pull in <span class="fname">prompt.c</span>
in any way!
</p>

<p>
THE FIX: <span class="fname">.c</span> files need to be on the command line for
compilation.  This allows the compiler/linker all the information
it needs to build a complete binary executable.
</p>

<pre class="example" id="org1426769">
$ cc sample.c prompt.c -o sample
prompt.c: In function ‘get_value’:
prompt.c:7:4: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
    printf( "%s: ", prompt );
    ^~~~~~
prompt.c:7:4: warning: incompatible implicit declaration of built-in function ‘printf’
prompt.c:7:4: note: include ‘&lt;stdio.h&gt;’ or provide a declaration of ‘printf’
prompt.c:1:1:
+#include &lt;stdio.h&gt;
 // prompt.c - actual code
prompt.c:7:4:
    printf( "%s: ", prompt );
    ^~~~~~
prompt.c:8:4: warning: implicit declaration of function ‘scanf’ [-Wimplicit-function-declaration]
    scanf( "%i", &amp;value );                 // Don't forget the '&amp;'
    ^~~~~
prompt.c:8:4: warning: incompatible implicit declaration of built-in function ‘scanf’
prompt.c:8:4: note: include ‘&lt;stdio.h&gt;’ or provide a declaration of ‘scanf’
$ 
</pre>

<p>
Uh-oh!  What happened and how do we fix it!?!?!
</p>
</div>

<div id="outline-container-org06fda77" class="outline-5">
<h5 id="org06fda77">What Happened</h5>
<div class="outline-text-5" id="text-org06fda77">
<p>
When you build a binary executable, there are 3 steps in doing
so:
</p>

<ol class="org-ol">
<li>Edit the source code</li>
<li>Compile the source code to <i>object code</i>.</li>
<li>Link the object code pieces together with some additional OS
particulars to build a binary executable.</li>
</ol>

<p>
<span class="cmd">cc</span> Performs steps 2 and 3 automatically for us unless
we specify otherwise.  So the error above is a result of step #2
for the <span class="fname">prompt.c</span> file.  Namely,
<span class="fname">prompt.c</span> uses <span class="cmd">printf</span> from
<span class="fname">stdio.h</span> but we never included it <b>in</b>
<span class="fname">prompt.c</span>, so the compilation failed. 
</p>

<p>
The fix:
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">prompt.c - actual code, fixed</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for separate compilation</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_value</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">prompt</span>[30], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">low</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">high</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">value</span> = 0;

  <span style="color: #00ffff;">do</span>{
    printf( <span style="color: #ffa07a;">"%s: "</span>, prompt );
    scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;value );                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget the '&amp;'</span>
  } <span style="color: #00ffff;">while</span> ( <span style="color: #98fb98;">value</span> &lt; low || value &gt; <span style="color: #eedd82;">high</span> );
  <span style="color: #00ffff;">return</span> value;
}
</pre>
</div>

<p>
And now&#x2026;
</p>

<pre class="example" id="org39690ad">
$ cc sample.c prompt.c -o sample          # Successful compile
$ ./sample                                # And execution
Enter a number from 1 to 10: 0
Enter a number from 1 to 10: 3
You entered 3.
$ 
</pre>

<p>
All fixed!
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orga7f92b4" class="outline-3">
<h3 id="orga7f92b4">Day 22 Summary<a id="org5e4ad30"></a></h3>
<div class="outline-text-3" id="text-orga7f92b4">
</div>
<div id="outline-container-org471c382" class="outline-4">
<h4 id="org471c382">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org471c382">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgf0c899c" class="outline-4">
<h4 id="orgf0c899c">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgf0c899c">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org449e21e" class="outline-2">
<h2 id="org449e21e">Day 23 - Mon, November 10, 2025<a id="org459b0d0"></a></h2>
<div class="outline-text-2" id="text-org449e21e">
</div>
<div id="outline-container-org5616e01" class="outline-3">
<h3 id="org5616e01">Day 23 Introduction<a id="orgfb68306"></a></h3>
<div class="outline-text-3" id="text-org5616e01">
</div>
<div id="outline-container-orgec26032" class="outline-4">
<h4 id="orgec26032">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgec26032">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orge134023" class="outline-3">
<h3 id="orge134023">Get a Character: <span class="cmd">getchar</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orge134023">
<p>
We've seen <span class="cmd">scanf</span> for reading in values, but that
requires the value to match what the placeholder is.  What about
reading a single character and that's it?
</p>

<p>
Well first, we need to understand how input works.
</p>
</div>
<div id="outline-container-org0404448" class="outline-4">
<h4 id="org0404448">The Keyboard Buffer and STDIN</h4>
<div class="outline-text-4" id="text-org0404448">
<p>
When you type on the keyboard, your data goes into a keyboard
<i>buffer</i>.  When a program wants input, it looks at STDIN.  Unless
we change the source of data for STDIN, the default is the
keyboard buffer.  (i.e. change the source as in input redirection
from a file).
</p>

<p>
When you type input for <span class="cmd">scanf</span>, what you type must
comply with the placeholder type: %s for string, %i for integer,
etc.
</p>

<p>
However, what if we want to read in a character, or a collection
of characters which don't really match a place holder?  Also,
remember <span class="cmd">scanf</span> uses spaces (whitespace) as delimiters
for the placeholders.  What if we want to include spaces?
</p>
</div>
</div>
<div id="outline-container-orgc62b2cf" class="outline-4">
<h4 id="orgc62b2cf"><span class="cmd">getchar()</span></h4>
<div class="outline-text-4" id="text-orgc62b2cf">
<p>
In the <span class="fname">stdio.h</span> library, there is a function called
<span class="cmd">getchar()</span>.  This function gets 1, and only 1 character
off STDIN and returns it as an <i>integer</i>.
</p>

<p>
This function is so useful, it returns a single character
regardless of it being a whitespace or even a newline (end of
line) character!
</p>

<p>
Consider the following program
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">c</span>, <span style="color: #eedd82;">c2</span>;

  printf( <span style="color: #ffa07a;">"Enter a char: "</span> );
  c = getchar();
  c2 = getchar();
  printf( <span style="color: #ffa07a;">"Char #1: %c\n"</span>, c );
  printf( <span style="color: #ffa07a;">"Char #2: %c\n"</span>, c2 );
}
</pre>
</div>

<p>
Now run it:
</p>
<pre class="example" id="org67f1d47">
$ ./a.out 
Enter a char: d
Char #1: d
Char #2: 

$
</pre>

<p>
As we enter 'd' and &lt;ENTER&gt;, notice the first char was the 'd' and
the second char was the '\n'! (Notice the extra blank line.)
</p>

<p>
Now, let's run it again and type something different.
</p>

<pre class="example" id="orgef5475e">
$ ./a.out 
Enter a char: dog
Char #1: d
Char #2: o
$
</pre>

<p>
Do you see how this time the second char was the letter 'o'?
</p>

<p>
Using <span class="cmd">getchar()</span>, we can get full control over our user input.
</p>
</div>
</div>
</div>
<div id="outline-container-org75f6aeb" class="outline-3">
<h3 id="org75f6aeb">Reading a Line of Input&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org75f6aeb">
<p>
Now that we have a means of grabbing arbitrary characters, we can
write our own input function to pull in a <i>line</i> rather than just a
simple type.  (Full disclosure, C already has libraries which can
do this, but that requires more code/libraries/dependencies.  Plus,
it's not as much fun. :) )
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">readline</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[] );

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">fullname</span>[100];  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Save plenty of space for the name</span>

  printf( <span style="color: #ffa07a;">"First try using 'scanf':\n"</span> );
  printf( <span style="color: #ffa07a;">"  Enter your first and last name: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, fullname );
  printf( <span style="color: #ffa07a;">"  Nice to meet you, %s.\n"</span>, fullname );

  printf( <span style="color: #ffa07a;">"\nSecond try using our 'readline':\n"</span> );
  printf( <span style="color: #ffa07a;">"  Enter your first and last name: "</span> );
  readline( fullname );
  printf( <span style="color: #ffa07a;">"  Nice to meet you, %s.\n"</span>, fullname );

  printf( <span style="color: #ffa07a;">"\nThird try using our 'readline' now the buffer is empty:\n"</span> );
  printf( <span style="color: #ffa07a;">"  Enter your first and last name: "</span> );
  readline( fullname );
  printf( <span style="color: #ffa07a;">"  Nice to meet you, %s.\n"</span>, fullname );

}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">For now, we'll assume the user won't type more characters than</span>
<span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">what was reserved in 'main()'</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">readline</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[] ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">c</span> = 0;

  c = getchar();
  <span style="color: #00ffff;">while</span> ( c != <span style="color: #ffa07a;">'\n'</span> ) {
    string[ i ] = c;
    i++;
    c = getchar();
  }
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget about the null char!!!</span>
  string[ i ] = 0;
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice the '\n' is *not* included in the string;</span>
  <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">We could if we wanted to though.</span>
}
</pre>
</div>

<p>
And now let's run it:
</p>

<pre class="example" id="org3649a88">
$ ./a.out 
First try using 'scanf':
  Enter your first and last name: Bob Dorf
  Nice to meet you, Bob.

Second try using our 'readline':
  Enter your first and last name:   Nice to meet you,  Dorf.

Third try using our 'readline' now the buffer is empty:
  Enter your first and last name: Bob Dorf
  Nice to meet you, Bob Dorf.
$
</pre>

<ul class="org-ul">
<li>You can see how <span class="cmd">scanf</span> only took "Bob" since it sees
spaces as delimiters but it only wanted 1 string.</li>
<li>For the second try, " Dorf\n" was still on the keyboard buffer,
so we never had a chance to enter anything more.</li>
<li>The third time, the buffer was empty so our <span class="cmd">readline</span>
function could work properly.</li>
</ul>
</div>
</div>
<div id="outline-container-org524e6bc" class="outline-3">
<h3 id="org524e6bc">String Formatting<a id="orgf0d8276"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org524e6bc">
<p>
We've done plenty of output but haven't talked a lot about
formatting.  
</p>
</div>
<div id="outline-container-orgfada429" class="outline-4">
<h4 id="orgfada429">Field Widths</h4>
<div class="outline-text-4" id="text-orgfada429">
<p>
Specifying field widths in <span class="cmd">printf()</span> is pretty simple.  Just put the value of the
field width you want between the '%' and the data type char in the
format string.
</p>

<p>
For example, to print out an integer in a field with of 3:
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"**%3i**\n"</span>, 7 );
</pre>
</div>

<pre class="example" id="org6f53ead">
**  7**
</pre>
</div>
</div>
<div id="outline-container-org18066b5" class="outline-4">
<h4 id="org18066b5">Justification</h4>
<div class="outline-text-4" id="text-org18066b5">
<p>
Notice it's right justified by default.  To left justify it, put a
'-' just after the '%':
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"**%-3i**\n"</span>, 7 );    
</pre>
</div>

<pre class="example" id="orgfcdeaf9">
**7  **
</pre>
</div>
</div>
<div id="outline-container-org43b45bd" class="outline-4">
<h4 id="org43b45bd">0-Padding</h4>
<div class="outline-text-4" id="text-org43b45bd">
<p>
To pad with 0s, add a 0 before the field width:
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"**%03i**\n"</span>, 7 );
</pre>
</div>

<pre class="example" id="org09efbf1">
**007**
</pre>
</div>
</div>
<div id="outline-container-orge1659f7" class="outline-4">
<h4 id="orge1659f7">Floating Point</h4>
<div class="outline-text-4" id="text-orge1659f7">
<p>
For floating point precision, make the field with a
decimal number where the integer portion is the field width and
the decimal portion is the number of decimal places you want:
</p>

<div class="org-src-container">
<pre class="src src-c">printf( <span style="color: #ffa07a;">"**%6.2f**\n"</span>, 3.141592654 );
</pre>
</div>

<pre class="example" id="org5d7fefe">
**  3.14**
</pre>

<p>
Note: '-' for left justification and '0' for 0-padding also work
as stated.
</p>
</div>
</div>

<div id="outline-container-orgca8e119" class="outline-4">
<h4 id="orgca8e119">In-RAM String Formatting: <span class="cmd">sprintf()</span></h4>
<div class="outline-text-4" id="text-orgca8e119">
<p>
Remember, <span class="cmd">printf</span> formats output <i>and sends it to the screen</i>. 
</p>

<p>
What if we <b>did not</b> want the result going to the screen but
instead wanted to save it for other purposes??
</p>

<p>
This is where <span class="cmd">sprintf()</span> come in.  <span class="cmd">sprintf()</span>
does what <span class="cmd">printf()</span> does but provides the result rather
than sending it to output.
</p>

<p>
The general format of <span class="cmd">sprintf()</span> is:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #87cefa;">sprintf</span>( buffer, format_string, arg1, arg2, ..., argn );
</pre>
</div>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice no new libs for sprintf()</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[ 100 ] = { 0 }; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Our "buffer"; initialize to all null chars</span>

  sprintf( string, <span style="color: #ffa07a;">"%s: %i, %f"</span>, <span style="color: #ffa07a;">"Value"</span>, 5, 3.14 );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">build the string into 'string'</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'string' now holds our formatted string as a null-terminated string.</span>

  printf( <span style="color: #ffa07a;">"New String: \"%s\"\n"</span>, string );    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Normal output</span>
}
</pre>
</div>

<pre class="example" id="orgd7b45cb">
$ cc sample.c -o sample &amp;&amp; ./sample
New String: "Value: 5, 3.140000"
$
</pre>

<p>
All the formatting tools described above work for
<span class="cmd">sprintf()</span> as well.
</p>
</div>
</div>
</div>
<div id="outline-container-org9be98bb" class="outline-3">
<h3 id="org9be98bb">String Conversions<a id="org4f8405a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9be98bb">
<p>
As your programs become more robust, there will be a need to
convert strings to other types of data, i.e. ints or floats.
</p>

<p>
To do so, C provides some functions we can use, also available in
the <span class="cmd">stdlib.h</span> library.
</p>
</div>
<div id="outline-container-orge10e6a8" class="outline-4">
<h4 id="orge10e6a8">Convert Numbers to Strings</h4>
<div class="outline-text-4" id="text-orge10e6a8">
<p>
Use <span class="cmd">sprintf()</span>.
</p>
</div>
</div>

<div id="outline-container-org477ece2" class="outline-4">
<h4 id="org477ece2">Convert String to <span class="cmd">float</span> : <span class="cmd">atof()</span></h4>
<div class="outline-text-4" id="text-org477ece2">
<p>
<span class="cmd">atof()</span> takes a null-terminated string and returns the
floating point representation of it as a <span class="cmd">double</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span> <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for atof()</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[20] = <span style="color: #ffa07a;">"3.141592654"</span>;
  <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">value</span> = 0.0;

  value = atof( string );
  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );
  printf( <span style="color: #ffa07a;">"Value : %f\n"</span>, value );
}
</pre>
</div>

<pre class="example" id="orgd4c940d">
$ cc sample.c -o sample &amp;&amp; ./sample
String: 3.141592654
Value : 3.141593
$
</pre>
</div>
</div>
<div id="outline-container-org7c13bc4" class="outline-4">
<h4 id="org7c13bc4">Convert String to <span class="cmd">int</span> :<span class="cmd">atoi()</span></h4>
<div class="outline-text-4" id="text-org7c13bc4">
<p>
<span class="cmd">atoi()</span> takes a null-terminated string and returns the
integer representation of it as an <span class="cmd">int</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span> <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for atoi()</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[20] = <span style="color: #ffa07a;">"49152"</span>;

  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );
  printf( <span style="color: #ffa07a;">"Value : %i\n"</span>, atoi( string ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Normal use of functions. :)</span>
}
</pre>
</div>

<pre class="example" id="orgac4a5d0">
$ cc sample.c -o sample &amp;&amp; ./sample
String: 49152
Value : 49152
$
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf65bcd2" class="outline-3">
<h3 id="orgf65bcd2">Example Program</h3>
<div class="outline-text-3" id="text-orgf65bcd2">
<p>
Write a program to convert from (F)arenheit to (C)elsius, and vice
versa.
</p>
<ul class="org-ul">
<li>Ask the user which direction to convert.
<ul class="org-ul">
<li>If F or C (case-insensitive) is entered, do the conversion.</li>
<li>If nothing is entered, quit.</li>
<li>Anything else, display an error and ask again.</li>
</ul></li>
<li>Display results to 2 decimal places.</li>
<li>You may assume valid numeric input from the user.</li>
</ul>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Last Updated: "2023-11-20 10:45:12"</span>
<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">tempconverter: Convert F to C and vice versa</span>
<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>

<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">readline</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[] );
<span style="color: #98fb98;">char</span> <span style="color: #87cefa;">prompt_user</span>();
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">perform_conversion</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">answer</span> );

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">answer</span>;

  answer = prompt_user();
  <span style="color: #00ffff;">while</span> ( answer != <span style="color: #ffa07a;">'\n'</span> ) {
      perform_conversion( answer );
      answer = prompt_user();
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">readline</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[] ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">c</span> = 0;

  c = getchar();
  <span style="color: #00ffff;">while</span> ( c != <span style="color: #ffa07a;">'\n'</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'\n' is off the buffer...</span>
    string[ i ] = c;
    i++;
    c = getchar();
  }
  string[ i ] = 0;       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">...but not part of the string.</span>
}

<span style="color: #98fb98;">char</span> <span style="color: #87cefa;">prompt_user</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">junk</span>[ 100 ];
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">answer</span>;

  printf( <span style="color: #ffa07a;">"Which direction to convert to [F/C]? "</span> );
  answer = getchar();
  <span style="color: #00ffff;">while</span> ( answer != <span style="color: #ffa07a;">'F'</span> &amp;&amp; answer != <span style="color: #ffa07a;">'f'</span> &amp;&amp; answer != <span style="color: #ffa07a;">'C'</span> &amp;&amp; answer != <span style="color: #ffa07a;">'c'</span> &amp;&amp; answer != <span style="color: #ffa07a;">'\n'</span> ) {

    readline( junk );        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When the user typed "f&lt;ENTER&gt;",</span>
                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">getchar() pulled the 'f' or 'c'</span>
                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">leaving '\n' on the buffer.  So we</span>
                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">call readline to "clear the buffer".</span>
    printf( <span style="color: #ffa07a;">"PEBCAK error!  Try again.\n"</span> );
    printf( <span style="color: #ffa07a;">"Which direction to convert to [F/C]? "</span> );  
    answer = getchar();
  }
  <span style="color: #00ffff;">if</span> ( answer == <span style="color: #ffa07a;">'f'</span> || answer == <span style="color: #ffa07a;">'c'</span> )  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Convert lower-case to</span>
    answer = answer - 32;                <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">upper-case. </span>
  <span style="color: #00ffff;">return</span> answer;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">perform_conversion</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">answer</span> ) { <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">answer is upper-case!</span>
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">source</span>;
  <span style="color: #98fb98;">float</span> <span style="color: #eedd82;">temp</span>, <span style="color: #eedd82;">newtemp</span>;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">junk</span>[100];

  <span style="color: #00ffff;">if</span> ( answer == <span style="color: #ffa07a;">'F'</span> )    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Wasn't covered, but we could have</span>
    source = <span style="color: #ffa07a;">'C'</span>;         <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">used the ternary operator:</span>
  <span style="color: #00ffff;">else</span>                    <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">source = ( answer == 'F' ) ? 'C' : 'F'</span>
    source = <span style="color: #ffa07a;">'F'</span>;
  printf( <span style="color: #ffa07a;">"Enter temperature to convert: "</span> );
  scanf( <span style="color: #ffa07a;">"%f"</span>, &amp;temp );       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When the user enters "43.2&lt;ENTER&gt;"</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">the number is put into 'temp' but the</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'\n' is left on the buffer.  </span>
  readline( junk );           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">So...clear the buffer.</span>
  <span style="color: #00ffff;">if</span> ( answer == <span style="color: #ffa07a;">'F'</span> ) {
    newtemp = 9.0 / 5.0 * temp + 32.0;
  } <span style="color: #00ffff;">else</span> {
    newtemp = 5.0 / 9.0 * ( temp - 32.0 );
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">32.2F is XX.XC</span>
  printf( <span style="color: #ffa07a;">"%.2f%c is %.2f%c\n"</span>, temp, source, newtemp, answer );
}

</pre>
</div>
</div>
</div>
<div id="outline-container-org99e62cb" class="outline-3">
<h3 id="org99e62cb">Day 23 Summary<a id="org7c4f03f"></a></h3>
<div class="outline-text-3" id="text-org99e62cb">
</div>
<div id="outline-container-org8207441" class="outline-4">
<h4 id="org8207441">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org8207441">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org689788b" class="outline-4">
<h4 id="org689788b">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org689788b">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org14a19ba" class="outline-2">
<h2 id="org14a19ba">Day 24 - Wed, November 12, 2025<a id="org16bf61c"></a></h2>
<div class="outline-text-2" id="text-org14a19ba">
</div>
<div id="outline-container-orgac4eca8" class="outline-3">
<h3 id="orgac4eca8">Day 24 Introduction<a id="org0039cd7"></a></h3>
<div class="outline-text-3" id="text-orgac4eca8">
</div>
<div id="outline-container-org9a7a8d1" class="outline-4">
<h4 id="org9a7a8d1">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org9a7a8d1">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org65452ed" class="outline-3">
<h3 id="org65452ed">Opening a File<a id="orgcc0129e"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org65452ed">
<p>
To open a <i>stream-based</i> file for reading or writing in C, we use the
<span class="cmd">open()</span> function.  The format of <span class="cmd">open()</span> is:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">open</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">mode</span>[, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">permissions</span>] )
</pre>
</div>

<ul class="org-ul">
<li><span class="cmd">open()</span> returns -1 if failure, else a non-negative
value representing the <i>file descriptor</i> (file handle).</li>
<li><span class="cmd">*filename</span> is a string containing the file name to open</li>
<li><span class="cmd">mode</span> is a value indicating <i>Read Only</i>, <i>Write Only</i>
or both; optionally OR'd with addtional flags as will be described</li>
<li><span class="cmd">permissions</span> sets the bit permissions (affected by the
users <i>umask</i>).  For this course, simply putting "0600" will be fine.</li>
<li>Must include <span class="cmd">fcntl.h</span> library</li>
</ul>
</div>

<div id="outline-container-org704b6f2" class="outline-4">
<h4 id="org704b6f2">File Name</h4>
<div class="outline-text-4" id="text-org704b6f2">
<p>
The file name is an absolute or relative path along with the filename of the
target as a C, null-terminated string.
</p>
</div>
</div>
<div id="outline-container-org4b80e3c" class="outline-4">
<h4 id="org4b80e3c">Mode</h4>
<div class="outline-text-4" id="text-org4b80e3c">
<p>
There are 3 mode options represented as constants found in the
<span class="fname">fcntl.h</span> library:
</p>
<ul class="org-ul">
<li><span class="cmd">O_RDONLY</span> : opens a file for read only</li>
<li><span class="cmd">O_WRONLY</span> : opens a file for write only</li>
<li><span class="cmd">O_RDWR</span> : opens a file for read and write. (Using this
requires special care with files.)</li>
</ul>
</div>
</div>
<div id="outline-container-org28bf392" class="outline-4">
<h4 id="org28bf392">Miscellaneous Flags</h4>
<div class="outline-text-4" id="text-org28bf392">
<p>
There are additional "flags" which can be included with the
<span class="cmd">mode</span> value (also in the <span class="cmd">fctrl.h</span> library) by
logically ORing them together with C's 
<span class="cmd">|</span> operator (bit-wise OR):
</p>

<ul class="org-ul">
<li><span class="cmd">O_APPEND</span> : Open the file for adding data at the end.</li>
<li><span class="cmd">O_TRUNC</span> : If the file exists, truncate it (overwrite).</li>
<li><span class="cmd">O_CREAT</span> : Create the file if it does not exist.
<ul class="org-ul">
<li>NOTE: If the file exists, odd things happen.  In my tests, the
file was NOT truncated, just written to from the front.  So a
file containing 'ABCDEF', when just <i>O_CREAT</i> is used, writing
'1234' resulted in the file containing '1234EF'.  So use
<i>O_CREATE</i> <b>and</b> <i>O_TRUNC</i> as needed.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org9a5881d" class="outline-3">
<h3 id="org9a5881d">Closing a File<a id="org3d22aa8"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9a5881d">
<p>
Once a file is finished being used, it must be closed to ensure any
buffered data is written out and the file is properly closed.
</p>

<p>
To close a file, we use C's <span class="cmd">close()</span> function:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">close</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span> )
</pre>
</div>

<ul class="org-ul">
<li><span class="cmd">close()</span> returns a 0 upon success, else -1</li>
<li><span class="cmd">fd</span> is the <span class="cmd">int</span> file descriptor (file
handle).</li>
<li>Must include <span class="cmd">unistd.h</span> library.</li>
</ul>
</div>
</div>
<div id="outline-container-org6f270e1" class="outline-3">
<h3 id="org6f270e1">Reading From a File<a id="org5b6cd83"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6f270e1">
<p>
To read data from a file, remember these are "stream-based" file
functions so we're not reading data types per-se.  Instead, we're
reading a stream of bytes (usually chars).
</p>

<p>
To read a collection of bytes, use <span class="cmd">read()</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">ssize_t</span> <span style="color: #87cefa;">read</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">void</span> *<span style="color: #eedd82;">buffer</span>, <span style="color: #98fb98;">size_t</span> <span style="color: #eedd82;">buffer_size</span> )
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">effectively</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">read</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">buffer</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">buffer_size</span> )
</pre>
</div>

<ul class="org-ul">
<li><span class="cmd">read()</span> returns the number of bytes read, up to
<span class="cmd">buffer_size</span> from the
file.  0 means no bytes were read (i.e. end of file) and -1 means
an error occured.</li>
<li><span class="cmd">fd</span> is the file descriptor</li>
<li><span class="cmd">buffer</span> is the variable bytes should be copied into.
For our purposes, we're going to use strings.</li>
<li><span class="cmd">buffer_size</span> is the maximum number of bytes to read
during that <span class="cmd">read()</span> call.</li>
<li>Must include <span class="cmd">unistd.h</span> library.</li>
<li>Tip: A File descriptor of 0 is STDIN.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf27af41" class="outline-3">
<h3 id="orgf27af41">Writing to a File<a id="org8e5956b"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf27af41">
<p>
To write a collection of bytes, use <span class="cmd">write()</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">ssize_t</span> <span style="color: #87cefa;">write</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">void</span> *<span style="color: #eedd82;">buffer</span>, <span style="color: #98fb98;">size_t</span> <span style="color: #eedd82;">buffer_size</span> )
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">effectively</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">write</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">buffer</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">buffer_size</span> )
</pre>
</div>

<ul class="org-ul">
<li><span class="cmd">write()</span> returns the number of bytes written, else -1.</li>
<li><span class="cmd">fd</span> is the file descriptor</li>
<li><span class="cmd">buffer</span> is the variable bytes should be copied <i>from</i>.
For our purposes, we're going to use strings.</li>
<li><span class="cmd">buffer_size</span> is the maximum number of bytes to write
during that <span class="cmd">write()</span> call.</li>
<li>Must include <span class="cmd">unistd.h</span> library.</li>
<li>Tip: A file descriptor of 1 is STDOUT</li>
<li>Tip: A file descriptor of 2 is STDERR</li>
</ul>
</div>
</div>
<div id="outline-container-org9adcbf5" class="outline-3">
<h3 id="org9adcbf5">Example</h3>
<div class="outline-text-3" id="text-org9adcbf5">
<p>
Write your own 'cp' program by asking the user for the source and
destination filenames, then performing the copy.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for 'printf', 'scanf'</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;fcntl.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for 'open'</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;unistd.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for 'read', 'write' and 'close'</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">I'm returning an int so we can "bail" on errors</span>
              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">quickly and easily.</span>

  <span style="color: #ff7f24;">////////////////////////////////////////////////////////////</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Local Variables - Be wise, initialize.</span>

  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">src_filename</span>[ 100 ] = { 0 };
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">dst_filename</span>[ 100 ] = { 0 };  
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">src_fd</span> = 0;                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">File descriptor</span>
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">dst_fd</span> = 0;                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">File descriptor</span>
  <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">short</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">BSIZE</span> = 1024;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Buffer size</span>
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">buffer</span>[ BSIZE ];
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">bytes_written</span> = 0;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">bytes_read</span> = 0;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">End Local Variables</span>
  <span style="color: #ff7f24;">////////////////////////////////////////////////////////////</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Prompt the user for the file names</span>
  printf( <span style="color: #ffa07a;">"Enter source file name: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, src_filename );     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Remember the issue with spaces?</span>
                                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We'll just use non-whitespace</span>
                                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">file names for now.</span>
  printf( <span style="color: #ffa07a;">"Enter destination file name: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, dst_filename );


  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Open the source file with some error checking.</span>
  src_fd = open( src_filename, O_RDONLY );
  <span style="color: #00ffff;">if</span> ( src_fd &lt; 0 ) {
    printf( <span style="color: #ffa07a;">"Error: Source file could not be read - %s\n"</span>, src_filename );
    <span style="color: #00ffff;">return</span> -1;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Open the destination for saving.  Since it may exist, we'll use the</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">O_CREAT flag to ensure the file is created if it does not</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">exist, or clear it out if it does.  </span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Mode will be 0600 for this class (rw-------)</span>
  dst_fd = open( dst_filename, O_WRONLY | O_CREAT | O_TRUNC, 0600 );
  <span style="color: #00ffff;">if</span> ( dst_fd &lt; 0 ) {
    printf( <span style="color: #ffa07a;">"ERROR: Destination could not be created/truncated - %s\n"</span>,
            dst_filename );
    close( src_fd );
    <span style="color: #00ffff;">return</span> -2;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Different errors should have different values so</span>
  }              <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">calling tool can tell the difference.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If we're here, we have valid file descriptors, so we can</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">continue.</span>

  bytes_read = read( src_fd, buffer, BSIZE );
  <span style="color: #00ffff;">while</span> ( bytes_read &gt; 0 ) {
                                        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice 'bytes_read', *not* BSIZE!</span>
    bytes_written = write( dst_fd, buffer, bytes_read );  
    <span style="color: #00ffff;">if</span> ( bytes_written &lt;= 0 ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We had data, but it didn't write out!</span>
      printf( <span style="color: #ffa07a;">"ERROR: Failure to write to destination.\n"</span> );
      close( src_fd );
      close( dst_fd );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Make sure to close the files before exiting.</span>
      <span style="color: #00ffff;">return</span> -3;
    }
    bytes_read = read( src_fd, buffer, BSIZE );    
  }

  close( src_fd );    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Done copying, so close and...</span>
  close( dst_fd );
  <span style="color: #00ffff;">return</span> 0;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">...quit with no error.</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4348800" class="outline-3">
<h3 id="org4348800">Moving File Position: <span class="cmd">lseek</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4348800">
<p>
Consider a file on disk:
</p>

<p>
<img src="support_files/file_positions.png" style="margin-left:100px;">
</p>

<p>
Often you'll want to move the <i>file position</i>, the "read/write
head" (also called "pointer") where the next byte will be read or
written in the file.  To do so, use the <span class="cmd">lseek()</span> function:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">off_t</span> <span style="color: #87cefa;">lseek</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">off_t</span> <span style="color: #eedd82;">offset</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">mode</span> )

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">for this class</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">lseek</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">long</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">mode</span> )
</pre>
</div>

<ul class="org-ul">
<li><span class="cmd">fd</span> is the file descriptor</li>
<li><span class="cmd">offset</span> is the distance to move as a long integer</li>
<li><span class="cmd">mode</span> describes how <span class="cmd">offset</span> should be
interpreted:
<ul class="org-ul">
<li>Usually defined in <span class="fname">unistd.h</span></li>
<li><span class="cmd">SEEK_SET</span> : <span class="cmd">offset</span> is relative to the
start of the file</li>
<li><span class="cmd">SEEK_CUR</span> : <span class="cmd">offset</span> is relative to the
current position</li>
<li><span class="cmd">SEEK_END</span> : <span class="cmd">offset</span> is relative to the
end of the file</li>
</ul></li>
<li>Returns the new current file position, else -1.</li>
</ul>

<p>
Example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Read 29 bytes from a file, twice.</span>
<span style="color: #ff7f24;">//////////////////////////////////////////////////////////////////////</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;fcntl.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;unistd.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Be wise, initialize.</span>
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">fd</span>              = 0;
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">bsize</span>           = 30;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">buffer</span>[ bsize ];   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"= {0};" won't work since 'bsize' is not known at compile time.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">...so initialize manually.</span>
  <span style="color: #00ffff;">for</span> ( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; bsize; i++ )
    buffer[ i ] = 0;

  fd = open( <span style="color: #ffa07a;">"input.txt"</span>, O_RDONLY );       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Skip error checking on this</span>
                                            <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">since you should know how.</span>
  read( fd, buffer, bsize-1 );              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Read one less byte to leave a null at the end</span>
  printf( <span style="color: #ffa07a;">"Buffer: **%s**\n"</span>, buffer );     <span style="color: #ff7f24;">//    </span><span style="color: #ff7f24;">for when we print</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Reset to start of file</span>
  <span style="color: #00ffff;">if</span> ( lseek( fd, 0, SEEK_SET ) &lt; 0 ) {         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Reset file position</span>
    close( fd );
    printf( <span style="color: #ffa07a;">"Error: Unable to seek.\n"</span> );   <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">Exit if error</span>
    <span style="color: #00ffff;">return</span> 1;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get the first 29 bytes again           // Demonstrate the reset</span>
  read( fd, buffer, bsize-1 );
  close( fd );
  printf( <span style="color: #ffa07a;">"Buffer: **%s**\n"</span>, buffer );

  <span style="color: #00ffff;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd2d6ffc" class="outline-3">
<h3 id="orgd2d6ffc">Deleting a File : <span class="cmd">unlink()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgd2d6ffc">
<p>
To delete a file within C, use the <span class="cmd">unlink()</span> function:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">unlink</span>( <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span> )
</pre>
</div>

<p>
Don't be concerned with the <span class="cmd">const</span> in the parameter, it
just means changing the content of the array is not allowed&#x2026;it
protects your char array.
</p>

<p>
<span class="cmd">unlink</span> will delete the file entirely and if successful,
return 0, else -1.
</p>

<p>
<span class="cmd">unlink</span> is found in the <span class="fname">unistd.h</span> library.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">file_deleter.c</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;unistd.h&gt;</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">filename</span>[ 100 ] = { 0 };

  printf( <span style="color: #ffa07a;">"Enter filename to delete: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, filename );                  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Remember, since array '&amp;' not needed</span>

  <span style="color: #00ffff;">if</span> ( unlink( filename ) ) {                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Delete the file</span>
    printf( <span style="color: #ffa07a;">"Error deleting %s\n"</span>, filename );
    <span style="color: #00ffff;">return</span> 1;
  }
  printf( <span style="color: #ffa07a;">"File '%s' deleted.\n"</span>, filename );
  <span style="color: #00ffff;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf5366b0" class="outline-3">
<h3 id="orgf5366b0">Change File Permissions: <span class="cmd">fchmod()</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgf5366b0">
<p>
To change permissions of a file, use the <span class="cmd">fchmod()</span> or <span class="cmd">chmod()</span>
functions:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">fchmod</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">mode</span> );              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Use when you have a file descriptor</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">chmod</span>( <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">mode</span> );    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Use when you just have a file name</span>
</pre>
</div>

<ul class="org-ul">
<li>Returns 0 on success, else -1</li>
<li>Found in <span class="fname">sys/stat.h</span> library.</li>
</ul>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">file_chmoder.c</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;sys/stat.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">New library!</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">filename</span>[ 100 ] = {0};

  printf( <span style="color: #ffa07a;">"Enter filename to make rwx------: "</span> );
  scanf( <span style="color: #ffa07a;">"%s"</span>, filename );                  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Remember, since array '&amp;' not needed</span>

  <span style="color: #00ffff;">if</span> ( chmod( filename, 0700 ) ) {                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Permissions are octal numbers just</span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">like 'chmod' command.</span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">Symbolic notation won't work.</span>
    printf( <span style="color: #ffa07a;">"Error chmod'ing %s\n"</span>, filename );
    <span style="color: #00ffff;">return</span> 1;
  }
  printf( <span style="color: #ffa07a;">"File '%s' chmod'd.\n"</span>, filename );
  <span style="color: #00ffff;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org9532b5a" class="outline-3">
<h3 id="org9532b5a">Day 24 Summary<a id="org8e9d725"></a></h3>
<div class="outline-text-3" id="text-org9532b5a">
</div>
<div id="outline-container-org2ab7d90" class="outline-4">
<h4 id="org2ab7d90">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org2ab7d90">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org85aa7a8" class="outline-4">
<h4 id="org85aa7a8">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org85aa7a8">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org3104254" class="outline-2">
<h2 id="org3104254">Day 25 - Mon, November 17, 2025<a id="org5fa42e2"></a></h2>
<div class="outline-text-2" id="text-org3104254">
</div>
<div id="outline-container-org0b3c159" class="outline-3">
<h3 id="org0b3c159">Day 25 Introduction<a id="orge455dad"></a></h3>
<div class="outline-text-3" id="text-org0b3c159">
</div>
<div id="outline-container-orgfb37940" class="outline-4">
<h4 id="orgfb37940">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgfb37940">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org4223304" class="outline-3">
<h3 id="org4223304">Pointers<a id="org1b081d5"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4223304">
<p>
Consider the following code and remember using primitives with <span class="cmd">scanf</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
<span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">ptr_to_int</span>;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Stores a memory address where an int is located.</span>

scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );

*y = x;
printf( <span style="color: #ffa07a;">"x         : %i\n"</span>, x );
printf( <span style="color: #ffa07a;">"ptr_to_int: %i\n"</span>, *ptr_to_int );
</pre>
</div>

<p>
Because C functions are "Pass-by-Value", we couldn't get a value
from <span class="cmd">scanf</span> <i>into</i> "x".  Instead, we needed to give
<span class="cmd">scanf</span> the RAM location of where "x" is stored.
</p>

<p>
The '&amp;' is called the <i>address operator</i>, it obtains the memory
address for a variable.
</p>

<p>
Likewise, there is an <i>indirection operator</i>, '*', which allows us
to access the data stored <b>at</b> a memory address.
</p>

<p>
These memory addresses are <i>pointers</i> to our data, rather than just
labels of the data itself.
</p>


<div id="org00fc86a" class="figure">
<p><img src="support_files/pointer_example.png" alt="pointer_example.png" />
</p>
</div>

<p>
In this example, <i>ptr_to_int</i> stores a memory location&#x2026;this could
be 4 bytes, 8 bytes, or whatever the OS requires to store a memory
location.  In this example, only 4 bytes are needed to store a
memory location.
</p>

<p>
<i>*ptr_to_int</i> tells C to "dereference" the
pointer, thus using the memory location <i>stored</i> (64738) to then
retrieve the actual data (7).
</p>

<p>
This is commonly called <i>Indirect Addressing</i> in Assembly Lanauge:
</p>

<p>
Likewise, <i>&ptr_to_int</i>  would be 2468 as that is
the memory address for variable <i>ptr_to_int</i>.
</p>
</div>

<div id="outline-container-orge52f50c" class="outline-4">
<h4 id="orge52f50c">Pointers to Data</h4>
<div class="outline-text-4" id="text-orge52f50c">
<p>
To declare a variable as a <i>pointer</i> to a data type, we use the
indirection operator, '*':
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">x holds an integer</span>
<span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">ptr_to_int</span>;    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">ptr_to_int holds a memory address where an integer resides</span>
</pre>
</div>

<p>
Under <i>normal conditions</i>, we can use our pointer variable, with the '*', anytime we
want to access the integer it points to.  However, after first
being declared, only the pointer RAM is reserved for us (in the
above diagram, that's the RAM used to store 64738).  The memory to
hold the <i>actual integer</i> is <b>not</b> yet available!
</p>

<p>
What this means, looking at the diagram above, memory location
64738 may not be an allowed memory area to our program.  In fact,
when you <i>declare</i> a pointer variable, the bytes which should
represent a memory location will contain arbitary bits&#x2026;just like
if we declare an <i>int</i> but do not initialize it.  We'll see how
to initialize a pointer later.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">ptr2int</span>;

  x = 5;
  *ptr2int = 7;

  printf( <span style="color: #ffa07a;">"X       : %i\n"</span>, x );
  printf( <span style="color: #ffa07a;">"ptr2int : %li\n"</span>, (<span style="color: #98fb98;">long</span> <span style="color: #98fb98;">int</span>)ptr2int );
  printf( <span style="color: #ffa07a;">"*ptr2int: %i\n"</span>, *ptr2int );
}
</pre>
</div>

<p>
And the output:
</p>
<pre class="example" id="org250ad9e">
$ cc sample.c -o sample &amp;&amp; ./sample
X       : 5
ptr2int : 140723351867456
*ptr2int: 7
$
</pre>

<p>
WHAT?!?!?!  If the computer RAM at 64738 was not yet made
available to us, why did the program work??
</p>

<p>
The above example was done on Deb11 using <span class="cmd">cc</span> "<i>cc
(Debian 10.2.1-6) 10.2.1 20210110</i>".
</p>

<p>
The same program ran on CPP's old Unix running "<i>cc (Gentoo 11.3.0 p7) 11.3.0</i>"
</p>

<pre class="example" id="org4ff45fb">
$ cc sample.c -o sample &amp;&amp; ./sample
Segmentation fault
$
</pre>

<p>
However, on CPP's new Unix system running "<i>cc (GCC) 8.5.0
20210514 (Red Hat 8.5.0-16)</i>", it too works!
</p>

<p>
As you can see, the compilers either:
</p>
<ul class="org-ul">
<li>Automatically allocate RAM for you, or</li>
<li>Don't allocate RAM and your risking your program's success.</li>
</ul>

<p>
We'll see shortly how to solve this problem by ensuring the
computer <i>gets RAM</i> for our integer being pointed to.
</p>
</div>
</div>

<div id="outline-container-orgbc04a59" class="outline-4">
<h4 id="orgbc04a59">Pointers from Variables</h4>
<div class="outline-text-4" id="text-orgbc04a59">
<p>
We can also set a pointer variable to the <i>memory address</i> of an
existing data-type variable by using the address operator:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">ptr_to_int</span>;

  x = 5;
  ptr_to_int = &amp;x;    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">use '&amp;' but also notice we DO NOT use '*' on our pointer!</span>

  printf( <span style="color: #ffa07a;">"Sum : %i\n"</span>, x + *ptr_to_int );
}
</pre>
</div>

<pre class="example" id="org982f5cd">
$ cc sample.c -o sample &amp;&amp; ./sample
Sum : 10
$
</pre>

<p>
This method works fine because we are simply getting the memory
address of <i>x</i> and storing it in <i>ptr_to_int</i>, i.e. in the diagram
above, replacing 64738 for <i>x</i>'s memory location.  There was no
need to allocate <i>new</i> RAM.
</p>
</div>
</div>

<div id="outline-container-org32653dc" class="outline-4">
<h4 id="org32653dc">Arrays and Pointers</h4>
<div class="outline-text-4" id="text-org32653dc">
<p>
Pointers are just memory addresses&#x2026;(sometimes long) integers.
Arrays are collections of homogeneous values, stored
continguously.  Remember our discussion on how arrays are stored?
Well, array variables are basically just a pointer to the first
element of the array. So to manipulate elements, we do not have to
use array notation.  We have options:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">list</span>[5] = { 0 };

<span style="color: #98fb98;">list</span>[2] = 20;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Array notation</span>
*(list + 8) = 20;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Math and then dereference on-the-fly</span>
</pre>
</div>

<p>
In fact, if we declared 'list' as a pointer to an int and managed
the memory at run time (discussed shortly), we could have also
done:
</p>

<div class="org-src-container">
<pre class="src src-c">list = list + 12;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Requires 'list' to be declared "int *list"</span>
                    <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">list + 12 is equivalent to list[3]</span>
*list = 30;         <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">and dynamically manage RAM for our array.</span>
                    <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">This line assigns 30 to list[3].</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org497c9c6" class="outline-4">
<h4 id="org497c9c6">The NULL Pointer</h4>
<div class="outline-text-4" id="text-org497c9c6">
<p>
Just as with most variables, pointers have a "zero" value as well
and it's called the Null Pointer.  Basically, it is a pointer
whose memory location is 0.  However, there is a symbol used to
denote null, <span class="cmd">NULL</span>.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">c</span> = <span style="color: #7fffd4;">NULL</span>; 
}
</pre>
</div>

<p>
If we try to compile this:
</p>

<pre class="example" id="org983ff16">
$ cc sample2.c 
sample2.c: In function ‘main’:
sample2.c:2:13: error: ‘NULL’ undeclared (first use in this function)
    2 |   char *c = NULL;
      |             ^~~~
sample2.c:1:1: note: ‘NULL’ is defined in header ‘&lt;stddef.h&gt;’; did you forget to ‘#include &lt;stddef.h&gt;’?
  +++ |+#include &lt;stddef.h&gt;
    1 | void main() {
sample2.c:2:13: note: each undeclared identifier is reported only once for each function it appears in
    2 |   char *c = NULL;
      |             ^~~~
$
</pre>

<p>
We're told the <span class="cmd">NULL</span> symbol comes from
<span class="fname">stddef.h</span> (another <span class="cmd">include</span>).  However, take
a look at this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">c</span> = <span style="color: #7fffd4;">NULL</span>;

}
</pre>
</div>

<p>
and the compile&#x2026;
</p>

<pre class="example" id="org2374b4b">
$ cc sample2.c 
$
</pre>

<p>
No errors when including <span class="fname">stdio.h</span> as we normally do.
</p>

<p>
If we track this down by looking inside the <span class="fname">/usr/include/stdio.h</span>
file, we find on lines 32 and 33:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#define</span> <span style="color: #eedd82;">__need_NULL</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stddef.h&gt;</span>
</pre>
</div>

<p>
So by including just <span class="fname">stdio.h</span>, we also get the
<span class="cmd">NULL</span> symbol <i>for this version of the compiler</i>.
</p>
</div>
<div id="outline-container-orgc7c1289" class="outline-5">
<h5 id="orgc7c1289">NULL in Conditions</h5>
<div class="outline-text-5" id="text-orgc7c1289">
<p>
Because <span class="cmd">NULL</span> is considered a <i>false</i> value, we can use
it in conditions as well.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">c</span> = <span style="color: #7fffd4;">NULL</span>;

<span style="color: #00ffff;">if</span> ( ! c )
  printf( <span style="color: #ffa07a;">"C is null\n"</span> );
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-org5bdde30" class="outline-3">
<h3 id="org5bdde30">Functions with Pointers<a id="org817e376"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org5bdde30">
<p>
Remember, functions in C are "Pass-by-Value", so when we did:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
scanf( <span style="color: #ffa07a;">"%i"</span>, &amp;x );
</pre>
</div>

<p>
We were basically passing a <i>pointer</i> to where "x" is stored.
</p>

<p>
Now with an understanding of pointers, we can do that with any
data we want a function to modify.  Instead of passing in values,
we pass the pointer to where the data can be found.
</p>

<p>
Take a look at the first version:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">changeme</span>( <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">x</span> ) {
  *x = *x + 5;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;

  x = 5;

  printf( <span style="color: #ffa07a;">"X : %i\n"</span>, x );
  changeme( &amp;x );
  printf( <span style="color: #ffa07a;">"X : %i\n"</span>, x );  
}
</pre>
</div>

<pre class="example" id="org020e2c5">
$ cc sample.c -o sample &amp;&amp; ./sample
X : 5
X : 10
$
</pre>

<p>
Notice we now pass in "&amp;x" at the function call, and, notice how
our function definition uses <span class="cmd">*x</span> as a normal
variable. 
</p>

<p>
Now have a look at version 2:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">changeme</span>( <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">x</span> ) {
  *x = *x + 5;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">pint</span>;

  x = 5;
  pint = &amp;x;

  printf( <span style="color: #ffa07a;">"X : %i\n"</span>, x );
  changeme( pint );
  printf( <span style="color: #ffa07a;">"X : %i\n"</span>, x );  
}
</pre>
</div>

<pre class="example" id="orgc353a89">
$ cc sample.c -o sample &amp;&amp; ./sample
X : 5
X : 10
$
</pre>

<p>
Obviously we really don't need a second variable as the pointer to
'x', but it illustrates how we <i>could</i> use pointers.  i.e. we never
allocated RAM for <i>*pint</i>, we used it after assigning it the RAM
address of another variable.
</p>
</div>
</div>
<div id="outline-container-org44ae012" class="outline-3">
<h3 id="org44ae012">Returning Pointers from Functions<a id="orgc5493a5"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org44ae012">
<p>
Since pointers are memory addresses, ie. values in and of
themselves, we can return them from functions as well
(i.e. they're considered primitives):
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Function to return the *memory location* for given index of an array.</span>
<span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">char_at_n</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">list</span>[], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice no value in []</span>

  <span style="color: #00ffff;">return</span> &amp;list[ n ];   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Could have also done "return list + n"</span>
                       <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">IFF our param was "char * list"</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">list</span>[10] = <span style="color: #ffa07a;">"Hello"</span>;
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">pchar</span>;

  pchar = char_at_n( list, 1 );
  printf( <span style="color: #ffa07a;">"Letter : %c\n"</span>, *pchar );  
}
</pre>
</div>

<pre class="example" id="org3c1bb7a">
$ cc sample.c -o sample &amp;&amp; ./sample
Letter : e                                // Because 'e' is at index 1.
$
</pre>

<p>
Notice how the function is returning a <i>pointer to a char</i> and
since <span class="cmd">list[ n ]</span> is a value, we need the '&amp;' to get the
address where it's located&#x2026;the same concept as when we needed '&amp;'
to <span class="cmd">scanf</span> an array element.
</p>
</div>

<div id="outline-container-org50a1dc9" class="outline-4">
<h4 id="org50a1dc9">Sidebar #1: Array Indexes in Function Headers</h4>
<div class="outline-text-4" id="text-org50a1dc9">
<p>
Did you notice how our function header did not include the size of
the array?
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">where_is_n</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">list</span>[], <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> )
</pre>
</div>

<p>
Because arrays are basically pointers, the number of elements is
not important to C.  Remember, <b>you</b> are responsible for bounds
control, not C.
</p>
</div>
</div>

<div id="outline-container-orge2c30e9" class="outline-4">
<h4 id="orge2c30e9">Sidebar #2: Can We Create Pointers to Data in Functions?</h4>
<div class="outline-text-4" id="text-orge2c30e9">
<p>
At this point, only sort of.  Consider this code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">int</span>* <span style="color: #87cefa;">create_integer</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Create a pointer to an int...</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span> = n;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">pint</span> = &amp;x;

  <span style="color: #00ffff;">return</span> pint;                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">...and return the pointer.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">pointer_to_integer</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">p2</span>;

  pointer_to_integer = create_integer( 5 );
  p2 = create_integer( 8 );  
  printf( <span style="color: #ffa07a;">"Value : %i\n"</span>, *pointer_to_integer );
  printf( <span style="color: #ffa07a;">"Value : %i\n"</span>, *p2);
}  
</pre>
</div>

<p>
and the output&#x2026;
</p>

<pre class="example" id="org6ed7b4e">
$ cc sample.c -o sample &amp;&amp; ./sample
Value : 8
Value : 0
$
</pre>

<p>
Because of the memory management by the operating system, the
local variable <i>x</i> in the <i>create_integer</i> was assigned a location
in RAM, but "destroyed" when the function exited.  When
<i>create_integer</i> was called again with 8, the OS <i>just happened</i>
to use the <b>same</b> memory location!!  As a result, when we created
the integer 8, 8 overwrote the 5&#x2026;i.e. they used the same memory
location so <i>pointer_to_integer</i> and <i>p2</i>
both pointed to the same memory location.
</p>

<p>
Also notice, the returning of <i>pint</i> seemed to work the first
time, but not the second!
</p>

<p>
Again, we're getting odd results because we're not properly
managing our RAM and instead, relying on the OS.  Not a good idea
as different OSes behave diffferently and all of them try to
perform efficient memory management.  (In this case, just
declaring <i>int *pint</i> was not enough to tell C {and the OS}, the
RAM was needed <b>outside</b> the function.  Remember, <i>*pint</i> is a
<b>local variable</b>.
</p>

<p>
To properly "create" new data, we need to <i><b>allocate</b></i> memory for
our pointers.  In other words, <b>WE</b> force the OS to go get a new,
valid piece of memory for our pointers to point to.
</p>
</div>
</div>
<div id="outline-container-orgb4c72e0" class="outline-4">
<h4 id="orgb4c72e0"><span class="cmd">malloc()</span> - Allocate Memory</h4>
<div class="outline-text-4" id="text-orgb4c72e0">
<p>
<span class="cmd">malloc()</span> is found in the <span class="cmd">stdlib.h</span> library (so
we'll need to <span class="cmd">include</span> it) and is used to tell the OS to
allocate fresh, valid memory for our data.
</p>

<p>
<span class="cmd">malloc()</span> takes a single value: the number of <b>bytes</b> to
allocate and reserve.  This is where <span class="cmd">sizeof()</span> comes in
handy.  
</p>

<p>
WARNING: <span class="cmd">malloc()</span> allocates <i>contiguous</i> bytes but does
<b>not</b> initialize any of them.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">needed for malloc()</span>

<span style="color: #98fb98;">int</span>* <span style="color: #87cefa;">create_integer</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">pint</span> = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">int</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Reserve fresh space for an int</span>

  *pint = n;                            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Assign as usual</span>

  <span style="color: #00ffff;">return</span> pint;                          <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">But now, RAM address will stick around.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">pointer_to_integer</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">p2</span>

  pointer_to_integer = create_integer( 5 );
  p2 = create_integer( 8 )
  printf( <span style="color: #ffa07a;">"Value : %i\n"</span>, *pointer_to_integer );
  printf( <span style="color: #ffa07a;">"Value : %i\n"</span>, *p2 );  
}
</pre>
</div>

<pre class="example" id="org1229d13">
$ cc sample.c -o sample &amp;&amp; ./sample
Value : 5
Value : 8
$
</pre>

<p>
In fact, our original program can also be improved using
<span class="cmd">malloc()</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">ptr_to_int</span> = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #98fb98;">int</span> ) );

  x = 5;
  *ptr_to_int = 7;

  printf( <span style="color: #ffa07a;">"Sum : %i\n"</span>, x + *ptr_to_int );
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">or</span>
  *ptr_to_int = x;
  printf( <span style="color: #ffa07a;">"Sum : %i\n"</span>, x + *ptr_to_int );
}
</pre>
</div>

<p>
to get
</p>

<pre class="example" id="org1dbd698">
$ cc sample.c -o sample &amp;&amp; ./sample
Sum : 12
Sum : 10
$
</pre>

<p>
No more segfaults.
</p>
</div>
</div>
<div id="outline-container-org6c3f3d1" class="outline-4">
<h4 id="org6c3f3d1"><span class="cmd">free()</span> - Freeing Allocated Memory</h4>
<div class="outline-text-4" id="text-org6c3f3d1">
<p>
Once you're done using memory which you formerly
<span class="cmd">malloc()</span>ed, its often a good idea to free it back up.
If the <span class="cmd">malloc()</span>ed RAM is only a few bytes, it's
probably not a big deal.  However, imagine working with video
frames, audio files, or any form of big data - you use lots of
RAM and if you don't free it up when you're done, you get a
<i>memory leak</i>.
</p>

<p>
To free up allocated RAM when you're done, use the
<span class="cmd">free()</span> function.  <span class="cmd">free()</span> simply takes a
pointer and it does not return anything.  Since it's also in the
<span class="cmd">stdlib.h</span> library, there's nothing more to
<span class="cmd">include</span>.
</p>

<p>
Here's an example
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>

<span style="color: #98fb98;">int</span>* <span style="color: #87cefa;">getint</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">var</span> = malloc( 4 );

  *var = n;
  <span style="color: #00ffff;">return</span> var;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">n</span> = getint( 5 );

  printf( <span style="color: #ffa07a;">"N: %i\n"</span>, *n );
  free( n );
  printf( <span style="color: #ffa07a;">"N: %i\n"</span>, *n );  
}
</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="org24b4117">
$ cc sample.c -o sample
$ ./sample
N: 5
N: 0
$
</pre>

<p>
However, there is a catch.  Take a look at this example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">n</span> = malloc( 4 );

  *n = 5;
  printf( <span style="color: #ffa07a;">"*n: %li\n"</span>, n );
  printf( <span style="color: #ffa07a;">" n: %i\n"</span>, *n );
  free( n );
  printf( <span style="color: #ffa07a;">"*n: %li\n"</span>, n );
  printf( <span style="color: #ffa07a;">" n: %i\n"</span>, *n );
}
</pre>
</div>

<p>
and now this output:
</p>

<pre class="example" id="org5831fa7">
$ cc sample.c -o sample
$ ./sample
*n: 94465201529504
 n: 5
*n: 94465201529504
 n: 0
$ 
</pre>

<p>
Notice the memory location, 94465&#x2026;, is the same!
</p>

<p>
It turns out, when you <span class="cmd">free()</span> memory it is only
<i>marked</i> as free and can be reused by the OS.  <i><b>It will not
change the pointer to NULL.</b></i>  You should do that yourself:
</p>

<div class="org-src-container">
<pre class="src src-c"><span class="linenr"> 1: </span><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span class="linenr"> 2: </span><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #98fb98;">int</span>* <span style="color: #87cefa;">getint</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span> ) {
<span class="linenr"> 5: </span>  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">var</span> = malloc( 4 );
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span>  *var = n;
<span class="linenr"> 8: </span>  <span style="color: #00ffff;">return</span> var;
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
<span class="linenr">12: </span>  <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">n</span> = malloc( 4 );
<span class="linenr">13: </span>
<span class="linenr">14: </span>  *n = 5;
<span class="linenr">15: </span>  printf( <span style="color: #ffa07a;">"*n: %li\n"</span>, n );
<span class="linenr">16: </span>  printf( <span style="color: #ffa07a;">" n: %i\n"</span>, *n );
<span class="linenr">17: </span>  <span style="color: #00ffff;">if</span> ( n == <span style="color: #7fffd4;">NULL</span> )
<span class="linenr">18: </span>    printf ( <span style="color: #ffa07a;">" n in NULL\n"</span> );
<span class="linenr">19: </span>  <span style="color: #00ffff;">else</span>
<span class="linenr">20: </span>    printf ( <span style="color: #ffa07a;">" n in not NULL\n"</span> );
<span class="linenr">21: </span>
<span class="linenr">22: </span>  free( n );
<span class="linenr">23: </span>  n = <span style="color: #7fffd4;">NULL</span>;                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Manually set to NULL</span>
<span class="linenr">24: </span>  printf( <span style="color: #ffa07a;">"*n: %li\n"</span>, n );
<span class="linenr">25: </span>  printf( <span style="color: #ffa07a;">" n: %i\n"</span>, *n );
<span class="linenr">26: </span>  <span style="color: #00ffff;">if</span> ( n == <span style="color: #7fffd4;">NULL</span> )
<span class="linenr">27: </span>    printf ( <span style="color: #ffa07a;">" n in NULL\n"</span> );
<span class="linenr">28: </span>  <span style="color: #00ffff;">else</span>
<span class="linenr">29: </span>    printf ( <span style="color: #ffa07a;">" n in not NULL\n"</span> );
<span class="linenr">30: </span>}
</pre>
</div>

<pre class="example" id="orgab087c4">
$ cc sample.c -o sample
$ ./sample 
*n: 94516624810656
 n: 5
 n in not NULL
*n: 0
Segmentation fault
$
</pre>

<p>
The segfault is actually a good thing, and expected, because we tried to dereference 'n' (line 25)
when it was NULL.
</p>
</div>
</div>
</div>
<div id="outline-container-org9ae2035" class="outline-3">
<h3 id="org9ae2035">Pointers to Strings<a id="org5d18417"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9ae2035">
<p>
Now that you understand pointers, and we already know arrays
are basically pointers, strings should be easier to understand.
</p>

<p>
Up to now, strings have just been arrays of <span class="cmd">char</span>s, but
arrays are just pointers to sequential RAM.  So now, do you
understand why:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">count_chars</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[] )...
</pre>
</div>

<p>
didn't need a value inside the brackets?
</p>

<p>
We do have one problem though.  Remember how we said double quoted
strings are null-terminated strings, and we could do this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[ 20 ] = <span style="color: #ffa07a;">"Hello World"</span>;

  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );

}
</pre>
</div>

<pre class="example" id="orga85ba06">
$ cc sample.c -o sample &amp;&amp; ./sample
String: Hello World
$
</pre>

<p>
Well, now try this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[ 20 ];

  string = <span style="color: #ffa07a;">"Hello World"</span>;

  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );

}
</pre>
</div>

<p>
and see what happens:
</p>

<pre class="example" id="org5a7635f">
$ cc sample.c -o sample &amp;&amp; ./sample
sample.c: In function ‘main’:
sample.c:6:10: error: assignment to expression with array type                                                   
   string = "Hello World";
	  ^
$
</pre>

<p>
In fact, this code:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">s</span> = <span style="color: #ffa07a;">"Hello World"</span>;

  printf( <span style="color: #ffa07a;">"Line: %s\n"</span>, *s );
}
</pre>
</div>

<p>
can also fail:
</p>

<pre class="example" id="org6e11cc7">
$ cc sample.c -o sample &amp;&amp; ./sample
Segmentation fault
$
</pre>

<p>
NOTE: On some compilers this may not fail if the byte after what <i>s</i> is
pointing to is still in valid RAM.
</p>

<p>
C only allows the assignment of a double-quoted string <i>to arrays</i> during
initialization due to how initialization of arrays works with
respect to <i>automatic memory allocation</i>.
</p>
</div>

<div id="outline-container-org9c1ff2b" class="outline-4">
<h4 id="org9c1ff2b">Sidebar: <span class="cmd">char* var</span> or <span class="cmd">char var[]</span></h4>
<div class="outline-text-4" id="text-org9c1ff2b">
<p>
So when <i>defining</i> a function, do we specify a character array
<span class="cmd">char var[]</span> or a pointer to a char <span class="cmd">char* var</span>
in the parameters lists?  The answer is: it doesn't matter - both are
treated as a pointer to chars: 
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">check1</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">s</span>[] ) {
  printf( <span style="color: #ffa07a;">"%s\n"</span>, s );
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">check2</span>( <span style="color: #98fb98;">char</span> * <span style="color: #eedd82;">s</span> ) {
  printf( <span style="color: #ffa07a;">"%s\n"</span>, s );  
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  check1( <span style="color: #ffa07a;">"hello"</span> );
  check2( <span style="color: #ffa07a;">"hello 2"</span> );
}
</pre>
</div>

<pre class="example" id="org6dc706d">
$ cc sample.c -o sample
$ ./sample
hello
hello 2
$
</pre>

<p>
CAVEAT: Some compilers may require you to declare your variable
"type * var" if you want to use the "*(var + num)" trick.
</p>
</div>
</div>

<div id="outline-container-orgc52469e" class="outline-4">
<h4 id="orgc52469e">Assigning Strings to Arrays (not initialization)</h4>
<div class="outline-text-4" id="text-orgc52469e">
<p>
Now back to assigning a string to an array during run-time, not
initialization.  To do so, we need a function to ensure safe
memory handling:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy src 2 dest</span>
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">c2s</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">dest</span>[], <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">src</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">null-terminated "" strings are passed as</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;                          <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">pointers to chars! (at least on this compiler)</span>

  <span style="color: #00ffff;">while</span> ( src[ i ] != 0 )  {
    dest[ i ] = src[ i ];
    i++;
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[20];

  c2s( string, <span style="color: #ffa07a;">"Hello World"</span> );
  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );

}
</pre>
</div>

<p>
and the output&#x2026;
</p>

<pre class="example" id="orga609990">
$ cc sample.c -o sample &amp;&amp; ./sample
String: Hello World@V
$
</pre>

<p>
Why the extra chars????  <i>Because the copy loop did not also copy the null character.</i>
</p>

<p>
Here's the correction:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">c2s</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">dest</span>[], <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">src</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #00ffff;">while</span> ( src[ i ] != 0 )  {
    dest[ i ] = src[ i ];
    i++;
  }
  dest[ i ] = 0;              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Strings must be null terminated.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string</span>[20];  

  c2s( string, <span style="color: #ffa07a;">"Hello World"</span> );
  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );

}
</pre>
</div>

<pre class="example" id="orgeddb4ea">
$ cc sample.c -o sample &amp;&amp; ./sample
String: Hello World
$
</pre>
</div>
</div>

<div id="outline-container-org7028a6e" class="outline-4">
<h4 id="org7028a6e">Unknown String Lengths</h4>
<div class="outline-text-4" id="text-org7028a6e">
<p>
In the previous example, we used 20 when declaring our array.
What if we didn't know how many we needed.  In that case, we
wouldn't declare an <i>array</i> but a <i>pointer</i> to <span class="cmd">char</span>s
and then use <span class="cmd">malloc()</span>.
</p>


<p>
Here's version 1, which has a fault:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget for malloc()</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get the length of a string by looking for the null</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">length</span>( <span style="color: #98fb98;">char</span> * <span style="color: #eedd82;">str</span> ) {  
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #00ffff;">while</span> ( str[ i ] != 0 )
    i++;
  <span style="color: #00ffff;">return</span> i;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">length minus the null char.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">c2s</span>( <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">dest</span>[], <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">src</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Not changing this.</span>
  dest = malloc( length( src ) + 1 ); <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"+1" to account for null char.</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #00ffff;">while</span> ( src[ i ] != 0 )  {
    dest[ i ] = src[ i ];
    i++;
  }
  dest[ i ] = 0;              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Strings must be null terminated.</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span>;
  c2s( string, <span style="color: #ffa07a;">"Hello World"</span> );

  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );
}
</pre>
</div>

<p>
and&#x2026;
</p>

<pre class="example" id="org66d14a4">
$ cc sample.c -o sample &amp;&amp; ./sample
String: (null)
$
</pre>

<p>
So what happened?  Hint: Pass-by-value and local variables!
</p>

<p>
You see <i>dest</i> was a local variable whose value was originally a
memory location stored in <i>string</i> from <i>main</i> (and a random one
at that).  When we used <i>malloc</i> to get RAM for <i>dest</i>, <i>dest</i> was
given a <b>new</b> memory location.  Since <i>dest</i> is a local variable,
the new memory location was never provided back to <i>string</i>.  So
even though we allocated RAM, we never passed the memory location
(i.e. the address stored by <i>dest</i>) back to the calling function!
</p>
</div>

<div id="outline-container-org224f281" class="outline-5">
<h5 id="org224f281">Version 2:</h5>
<div class="outline-text-5" id="text-org224f281">
<p>
Here's one possible solution for the above problem:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget for malloc()</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">length</span>( <span style="color: #98fb98;">char</span> * <span style="color: #eedd82;">str</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Same as before</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #00ffff;">while</span> ( str[ i ] != 0 )
    i++;
  <span style="color: #00ffff;">return</span> i;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">length minus the null char.</span>
}

<span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">c2s</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">src</span> ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">First, remove 'dest' in params and return a char*</span>
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">dest</span> = malloc( length( src ) + 1 ); <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Make dest local and malloc'd based on length</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0;

  <span style="color: #00ffff;">while</span> ( src[ i ] != 0 )  {
    dest[ i ] = src[ i ];
    i++;
  }
  dest[ i ] = 0;       
  <span style="color: #00ffff;">return</span> dest;         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now return malloc'd address</span>
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span>;

  string = c2s( <span style="color: #ffa07a;">"Hello World"</span> );    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">change to a function w/return value</span>
  printf( <span style="color: #ffa07a;">"String: %s\n"</span>, string );
}

</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orge894c42" class="outline-3">
<h3 id="orge894c42">Pointers to <span class="cmd">struct</span>s<a id="org9c35ed3"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span>&#xa0;<span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orge894c42">
<p>
When dealing with pointers and structs, all the rules you've
learned apply but now with one more:
</p>

<ul class="org-ul">
<li>The '.' binds tighter then '*'.</li>
</ul>

<p>
What does this mean? It means given:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span>;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">A pointer to a coordinate</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-c">*point.x
</pre>
</div>

<p>
is not the same as
</p>

<div class="org-src-container">
<pre class="src src-sh">(*point).x
</pre>
</div>

<p>
Since '.' binds tighter, <span class="cmd">*point.x</span> considers
<span class="cmd">point.x</span> a pointer.  Whereas <span class="cmd">(*point).x</span> is
clear <span class="cmd">point</span> is the pointer and <span class="cmd">x</span> is a
component of the <span class="cmd">struct</span> being pointed to.
</p>

<p>
Let try an example:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span>;

  *point.x = 5;
  *point.y = 5;

  printf( <span style="color: #ffa07a;">"(X, Y) = (%i, %i)\n"</span>, *point.x, *point.y );

}
</pre>
</div>

<p>
&#x2026;and the compile&#x2026;
</p>

<pre class="example" id="org0fb61f5">
$ cc sample.c -o sample &amp;&amp; ./sample
sample.c: In function ‘main’:
sample.c:12:9: error: ‘point’ is a pointer; did you mean to use ‘-&gt;’?
   *point.x = 5;
	 ^
	 -&gt;
sample.c:13:9: error: ‘point’ is a pointer; did you mean to use ‘-&gt;’?
   *point.y = 5;
	 ^
	 -&gt;
sample.c:15:40: error: ‘point’ is a pointer; did you mean to use ‘-&gt;’?
   printf( "(X, Y) = (%i, %i)\n", *point.x, *point.y );
					^
					-&gt;
sample.c:15:50: error: ‘point’ is a pointer; did you mean to use ‘-&gt;’?
   printf( "(X, Y) = (%i, %i)\n", *point.x, *point.y );
						  ^
						  -&gt;
$
</pre>

<p>
We'll talk about <span class="cmd">-></span> later, but for now, let's try parens
to clarify:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span>;

  (*point).x = 5;
  (*point).y = 5;

  printf( <span style="color: #ffa07a;">"(X, Y) = (%i, %i)\n"</span>, (*point).x, (*point).y );

}
</pre>
</div>

<p>
and the compile&#x2026;
</p>

<pre class="example" id="orgde529cb">
$ cc sample.c -o sample &amp;&amp; ./sample
Segmentation fault
$
</pre>

<p>
What now? Well, when you declare a <i>pointer</i> to a
<span class="cmd">struct</span>, the <span class="cmd">struct</span> does <b>not</b> exist
yet&#x2026;only a declaration of <i>the pointer</i> to a struct.  We still need
to create it, i.e. allocate the RAM for the <span class="cmd">struct</span>.
</p>

<p>
The easy way (though wasteful):
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> <span style="color: #eedd82;">sample</span> = { 0, 0 };   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Create and initialize a struct</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span> = &amp;sample;    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Assign the pointer to an existing struct.</span>

  (*point).x = 5;
  (*point).y = 5;

  printf( <span style="color: #ffa07a;">"(X, Y) = (%i, %i)\n"</span>, (*point).x, (*point).y );

}
</pre>
</div>

<p>
and now&#x2026;
</p>

<pre class="example" id="org9dad627">
$ cc sample.c -o sample &amp;&amp; ./sample
(X, Y) = (5, 5)
$
</pre>
</div>

<div id="outline-container-orgd5e1bdc" class="outline-4">
<h4 id="orgd5e1bdc">Dynamic Allocation using <span class="cmd">malloc()</span></h4>
<div class="outline-text-4" id="text-orgd5e1bdc">
<p>
The better way would have to simply allocated the RAM for our
<span class="cmd">struct</span> pointer:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget this!</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span> = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get RAM</span>

  (*point).x = 5;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">and now we're good to go.</span>
  (*point).y = 5;

  printf( <span style="color: #ffa07a;">"(X, Y) = (%i, %i)\n"</span>, (*point).x, (*point).y );

}
</pre>
</div>

<p>
and
</p>

<pre class="example" id="orga713bb6">
$ cc sample.c -o sample &amp;&amp; ./sample
(X, Y) = (5, 5)
$
</pre>
</div>
</div>
<div id="outline-container-org901c57f" class="outline-4">
<h4 id="org901c57f">Short-Hand Dereferencing</h4>
<div class="outline-text-4" id="text-org901c57f">
<p>
Since dereferencing a pointer then accessing the components of a
<span class="cmd">struct</span> are so common, the <span class="cmd">-></span> operator can be
used instead of <span class="cmd">(*var)</span>:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Don't forget this!</span>

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> *<span style="color: #eedd82;">point</span> = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">coord</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get RAM</span>

  point -&gt; x = 5;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">and now we're good to go.</span>
  point-&gt;y = 5;

  printf( <span style="color: #ffa07a;">"(X, Y) = (%i, %i)\n"</span>, point-&gt;x, point -&gt; y );

}
</pre>
</div>

<p>
Notice the spaces around <span class="cmd">-></span> are a matter of style, and
not required.
</p>
</div>
</div>
</div>
<div id="outline-container-org9cf9ca7" class="outline-3">
<h3 id="org9cf9ca7">Day 25 Summary<a id="org478d099"></a></h3>
<div class="outline-text-3" id="text-org9cf9ca7">
</div>
<div id="outline-container-org1ba1444" class="outline-4">
<h4 id="org1ba1444">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org1ba1444">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org1b567c2" class="outline-4">
<h4 id="org1b567c2">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org1b567c2">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org5223884" class="outline-2">
<h2 id="org5223884">Day 26 - Wed, November 19, 2025<a id="orged8a6ae"></a></h2>
<div class="outline-text-2" id="text-org5223884">
</div>
<div id="outline-container-org2422e34" class="outline-3">
<h3 id="org2422e34">Day 26 Introduction<a id="org6487f71"></a></h3>
<div class="outline-text-3" id="text-org2422e34">
</div>
<div id="outline-container-orgdee2e8a" class="outline-4">
<h4 id="orgdee2e8a">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgdee2e8a">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org9599a01" class="outline-3">
<h3 id="org9599a01">Linked Lists - A Preview&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org9599a01">
<p>
Linked lists are a well-known data structure for pointers.  They're
comprised of <i>nodes</i>, where each node contains data and then one or two
pointers to other node(s).
</p>

<p>
The front of the list is called the <i>head</i> and the end of the list
is called the <i>tail</i>.  Often, these terms are used for the variable
identifiers which point to the head or tail of the list.
</p>
</div>
<div id="outline-container-orgea3bb63" class="outline-4">
<h4 id="orgea3bb63">Single-Linked Lists</h4>
<div class="outline-text-4" id="text-orgea3bb63">
<p>
In a single linked list there is commonly a <i>head</i> variable
pointing to the head of the list, but no <i>tail</i> variable pointing
to the tail of the list.  As for the nodes, they contain data and
then a pointer the <i>next</i> node in the list.  The <i>next</i> pointer of
the tail node is NULL.  <i>NULL</i> is also a C term to denote a
pointer which doesn't point anywhere. However, you must include
the <span class="fname">stddef.h</span> library to use it.
</p>


<div id="orge934d1a" class="figure">
<p><img src="support_files/sll.png" alt="sll.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-orgb56ef53" class="outline-4">
<h4 id="orgb56ef53">Double-Linked Lists</h4>
<div class="outline-text-4" id="text-orgb56ef53">
<p>
Double-linked lists are where each node includes a variable to point
to the next node in the list <b>and also</b> a variable to point to the
previous node in the list.
</p>

<p>
As you can imagine, the <i>next</i> pointer for the tail node would be
NULL and the <i>previous</i> pointer for the head node would be NULL.
</p>


<div id="org071a3ef" class="figure">
<p><img src="support_files/dll.png" alt="dll.png" />
</p>
</div>
</div>
</div>

<div id="outline-container-org9c33d6d" class="outline-4">
<h4 id="org9c33d6d">Nodes</h4>
<div class="outline-text-4" id="text-org9c33d6d">
<p>
The most simple node for a single-linked list may look like this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> {
  <span style="color: #98fb98;">DATATYPE</span> <span style="color: #eedd82;">data</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">next</span>;
};
</pre>
</div>

<p>
While a double-linked list node looks like this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> {
  <span style="color: #98fb98;">DATATYPE</span> <span style="color: #eedd82;">data</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">next</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">previous</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-org4d8d439" class="outline-4">
<h4 id="org4d8d439">Purpose</h4>
<div class="outline-text-4" id="text-org4d8d439">
<p>
Linked lists are good for maintaining ordered lists of unknown
quantities.  Normally, if we were to read in up to 1000 integers,
we could reserve an array of 1000 <span class="cmd">int</span>s.  However, if we
didn't know a maximum limit, <i>dynamic memory allocation</i> (via
<span class="cmd">malloc()</span>) is the best technique.  This way we use only
the RAM necessary.
</p>

<p>
Also, more complex data structures are more efficient when using
pointers.  For example, a binary tree <i>could</i> be represented in an
array, but a linked list structure is more efficient both in
storage and maintenance.
</p>
</div>
</div>
</div>
<div id="outline-container-orgd9360cf" class="outline-3">
<h3 id="orgd9360cf">Linked List Example - Part 1&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgd9360cf">
<p>
Let's review some code which reads in a list of non-negative integers from a
file (1 per line), sorts the integers smallest to largest, and then
prints both lists.  However, since we don't know how many integers
are in the file, a linked list is a good data structure for this
purpose.
</p>
</div>
<div id="outline-container-org8542a7b" class="outline-4">
<h4 id="org8542a7b">The Node Structure</h4>
<div class="outline-text-4" id="text-org8542a7b">
<p>
First, let's define our node.  As in the previous examples, it is
just a <span class="cmd">struct</span>.  For our purposes, the "data" is just an
<span class="cmd">int</span> and the <i>next</i> pointer will be to another node
structure.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> {
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">data</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">next</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-org6bf412a" class="outline-4">
<h4 id="org6bf412a">The Main Routine</h4>
<div class="outline-text-4" id="text-org6bf412a">
<p>
Next, let's make a <span class="cmd">main()</span> routine.  Remember, we want
our <span class="cmd">main()</span> routine to <i>read</i> cleanly and
"self-documented" if possible:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {                                    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice we're returning int for easy exit</span>

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">list</span>;                            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Our linked list.</span>

  notify_user( <span style="color: #ffa07a;">"Reading data..."</span> );           
  list = read_data( <span style="color: #ffa07a;">"input.txt"</span> );             
  <span style="color: #00ffff;">if</span> ( list == <span style="color: #7fffd4;">NULL</span> ) {                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No data? Something went wrong.</span>
    notify_user( <span style="color: #ffa07a;">"Error: List is NULL."</span> );
    <span style="color: #00ffff;">return</span> 1;
  }
  notify_user( <span style="color: #ffa07a;">"Printing unsorted data..."</span> );    
  print( list );                     
  notify_user( <span style="color: #ffa07a;">"Sorting data..."</span> );  
  sort( list );
  notify_user( <span style="color: #ffa07a;">"Printing sorted data..."</span> );    
  print( list );
  <span style="color: #00ffff;">return</span> 0;                                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No errors.</span>
}
</pre>
</div>

<p>
Notice we haven't <span class="cmd">#include</span>ed anything.  We'll save that
for later.
</p>

<p>
Now, we need to create the functions which match those in our
<span class="cmd">main()</span> routine.
</p>
</div>
</div>
<div id="outline-container-org8ddb7ab" class="outline-4">
<h4 id="org8ddb7ab">Function: <span class="cmd">notify_user</span></h4>
<div class="outline-text-4" id="text-org8ddb7ab">
<p>
This function just issues a <span class="cmd">printf</span>.  I didn't need it
at all except to demonstrate how <span class="cmd">notify_user</span> was a bit
more descriptive than just <span class="cmd">printf</span>.  However, we do want
to make sure our <span class="cmd">notify_user</span> function includes a
newline char in the output.
</p>

<p>
As a slight modification, we could have also passed a file
descriptor (1 or 2) so certain messages went to STDOUT vs STDERR.
I'm leaving that as an exercise for you.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">notify_user</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span> ) {
  printf( <span style="color: #ffa07a;">"%s\n"</span>, string );
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org40d9cde" class="outline-4">
<h4 id="org40d9cde">Function: <span class="cmd">print</span></h4>
<div class="outline-text-4" id="text-org40d9cde">
<p>
Since C doesn't have a <span class="cmd">print</span> function, we can make our
own.
</p>

<p>
To print the list, we take advantage of the fact the pointer
passed in is a <i>local variable</i> and can not be <b>returned</b> by way
of the function parameters.  What the pointer <b>points to</b> can be
changed from within the function and those changes will "hold"
back in <span class="cmd">main</span>, but not the content (memory location) of
the passed parameter. So <i>traversing</i> the list, is pretty simple.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">ptr</span> ) {
  <span style="color: #00ffff;">while</span> ( ptr != <span style="color: #7fffd4;">NULL</span> ) {
    printf( <span style="color: #ffa07a;">"  Node value: %i\n"</span>, ptr -&gt; data );
    ptr = ptr -&gt; next;
  }
}
</pre>
</div>

<p>
When the function is exited, <span class="cmd">ptr</span> is destroyed and the
variable whose <b>value</b> was passed is, is left untouched.
</p>
</div>
</div>
</div>
<div id="outline-container-orgffef4f9" class="outline-3">
<h3 id="orgffef4f9">Linked List Example - Part 2&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgffef4f9">
<p>
So far, dealing with the list was simple.  Now the fun begins!
</p>
</div>

<div id="outline-container-org52ccfb3" class="outline-4">
<h4 id="org52ccfb3">Function: <span class="cmd">read_data</span></h4>
<div class="outline-text-4" id="text-org52ccfb3">
<p>
This function opens a file, reads in the integers (1 per line),
and then adds them to the list.  To make life simple, we'll just
add the new numbers to the front of the list.
</p>

<p>
Why is this simple?  Well first we need to create a new node via
<span class="cmd">malloc()</span>:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">new_node</span>;

new_node = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> ) );
new_node -&gt; data = integer_just_read_in;
new_node -&gt; next = <span style="color: #7fffd4;">NULL</span>;                     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If you know the</span>
                                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">current head of list</span>
                                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">you can just assign it</span>
                                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">now since the plan is</span>
                                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">to insert the new node</span>
                                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">in front.</span>
</pre>
</div>

<p>
Then, to add the new node to the front of a list <span class="fname">head_of_list</span>,
simply do the following:
</p>
<div class="org-src-container">
<pre class="src src-c">new_node -&gt; next = head_of_list;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Make the 'next' field point to the current list.</span>
head_of_list = new_node;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now the head of the list points to our new node.</span>
</pre>
</div>

<p>
Finally, when we're done, we simple return the current value of
the memory location pointing to the head of our list:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">return</span> head_of_list;
</pre>
</div>

<p>
So the whole function looks like this:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span>* <span style="color: #87cefa;">read_data</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span> ) {
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">fd</span>                 = 0;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">For file descriptor</span>
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">number</span>             = 0;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Number read from the file</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">head_of_list</span> = <span style="color: #7fffd4;">NULL</span>;   
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">new_node</span>     = <span style="color: #7fffd4;">NULL</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This will be the node we continuously create</span>
                                      <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">for each new number.</span>
  fd = open( filename, O_RDONLY );
  <span style="color: #00ffff;">while</span> ( get_number( fd, &amp;number ) ) {      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'get_number' will return 1 if success, else 0</span>
                                             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">The actual integer from the file will be put into</span>
                                             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">&amp;number, like scanf() does.</span>

    new_node = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Create a new node</span>
    new_node -&gt; data = number;                   <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">and set the data/next fields</span>
    new_node -&gt; next = head_of_list;

    head_of_list = new_node;                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now adjust the new head of list.</span>
  }
  close( fd );
  <span style="color: #00ffff;">return</span> head_of_list;
}
</pre>
</div>

<p>
Why did we create a separate function <span class="cmd">get_number</span> to
read an integer from the file?  The primary reason is
<i>abstraction</i> and <i>modularization</i>!  You see, we're not reading an
integer from the file.  Due to the <span class="cmd">read()</span> function,
we're reading <span class="cmd">char</span> bytes!  <b>WE</b> need to read in digits
up to a newline, then convert the bytes read <i>into</i> an integer.
By using a function, we abstract all that away from the
readability of <span class="cmd">read_data</span>.
</p>
</div>
</div>
<div id="outline-container-org91f32d4" class="outline-4">
<h4 id="org91f32d4">Function: <span class="cmd">get_number</span></h4>
<div class="outline-text-4" id="text-org91f32d4">
<p>
So, let's now write <span class="cmd">get_number</span> to read in 1 character
at a time from the file, until a newline (we'll read it but
discard it), and then convert the number to an integer for
assignment into the memory location passed in.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_number</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">N</span> ) {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">c</span>[2] = {0};                    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Char to read from the file.</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We use 2 slots because later</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"atoi()" requires a char *</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">with an ending null char!</span>

  *N = 0;                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Initial value of N</span>
  <span style="color: #00ffff;">while</span> ( read( fd, c, 1 ) ) {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get a single byte.  Notice "c", not "&amp;c".</span>
    <span style="color: #00ffff;">if</span> ( c[0] == <span style="color: #ffa07a;">'\n'</span> ) {                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If newline...</span>
      <span style="color: #00ffff;">return</span> 1;                       <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">*N has the answer and we</span>
                                      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">return success!</span>
    } <span style="color: #00ffff;">else</span> {
      *N = *N * 10 + atoi( c );   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Else update answer via (N*10)+int(c)</span>
    }
  }
  <span style="color: #00ffff;">return</span> 0;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If there is nothing more to read, return failure.</span>
              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Note: This requires the last number in the file to</span>
              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">have a \n after it!!</span>
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgfbe5baa" class="outline-3">
<h3 id="orgfbe5baa">Linked List Example - Part 3&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgfbe5baa">
<p>
And now, finally, the <span class="cmd">sort</span> function.  Linked lists are
normally handled in CS 2400, so I'll leave the complexities of list
manipulation beyond what we've done for that class.
</p>

<p>
For this class, our sort function will simply move the DATA
portions of the nodes rather than the nodes themselves.
</p>

<p>
So, let's do a variation of the min-sort where the smallest value is
found and put at the head of the list.  Then, the second smallest
value is found and put at the second-to-the-head of the list, and
so on.
</p>

<p>
Remember, since we're passing in the memory location where the list
can be found, we can manipulate the <i>contents</i> of the list with no
issues. 
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">sort</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">L</span> ) {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">top</span>       = L;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Top position where the</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">minimum value will be</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">placed. </span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">traversal</span> = <span style="color: #7fffd4;">NULL</span>;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Used to traverse down the</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">list looking for any value</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">smaller than the current</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">mimimum. </span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">minimum</span>   = <span style="color: #7fffd4;">NULL</span>;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Points to the node where</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the currently known minimum</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">value is.</span>
  <span style="color: #98fb98;">int</span>          <span style="color: #eedd82;">temp</span>      = 0;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Used when swapping the DATA.</span>

  <span style="color: #00ffff;">while</span> ( top != <span style="color: #7fffd4;">NULL</span> ) {               <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When 'top' gets to the last</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">pointer (in the tail of</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the list), we're done.</span>

    minimum = top;                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Assume top has the minimum value.</span>
    traversal = top -&gt; next;            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Start traversal at the next node.</span>
    <span style="color: #00ffff;">while</span> ( traversal != <span style="color: #7fffd4;">NULL</span> ) {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Stop traversing if we reach</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the end.</span>
      <span style="color: #00ffff;">if</span> ( minimum -&gt; data &gt; traversal -&gt; data )  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Check for a</span>
        minimum = traversal;                      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">smaller value and </span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">remember where it</span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">is if found.</span>
      traversal = traversal -&gt; next;              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now move on...</span>
    }
    temp = top -&gt; data;                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We now know where the minimum</span>
    top -&gt; data = minimum -&gt; data;      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">value is, so swap with</span>
    minimum -&gt; data = temp;             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the top position.</span>

    top = top -&gt; next;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Minimum value is now at the top, so we adjust</span>
                            <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">'top' down one node within the list. </span>
  }
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When done, there's nothing to return because we manipulated the </span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">contents of the list being pointed by L.</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org3ceb8c9" class="outline-3">
<h3 id="org3ceb8c9">Day 26 Summary<a id="org706af60"></a></h3>
<div class="outline-text-3" id="text-org3ceb8c9">
</div>
<div id="outline-container-orgc3bb12e" class="outline-4">
<h4 id="orgc3bb12e">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orgc3bb12e">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org3c1d7ed" class="outline-4">
<h4 id="org3c1d7ed">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org3c1d7ed">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org07f8f8f" class="outline-2">
<h2 id="org07f8f8f">Day 27 - Mon, November 24, 2025<a id="orgdc277be"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Quiz">Quiz</span></span></h2>
<div class="outline-text-2" id="text-org07f8f8f">
</div>
<div id="outline-container-org78ef11a" class="outline-3">
<h3 id="org78ef11a">Day 27 Introduction<a id="orgb4eaf02"></a></h3>
<div class="outline-text-3" id="text-org78ef11a">
</div>
<div id="outline-container-org06f8312" class="outline-4">
<h4 id="org06f8312">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org06f8312">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orga393869" class="outline-3">
<h3 id="orga393869">Quiz #3&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Q3">Q3</span></span></h3>
<div class="outline-text-3" id="text-orga393869">
<ul class="org-ul">
<li><b>Quiz is closed book, closed notes, no Internet resources, no
shell access, and no collaboration of any kind.</b>
<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;"><b>Warning: Discord and other collaboration tools have been detected! Please don't risk it!</b></span></li>
</ul></li>
<li>All answers must be derived from material covered in class.</li>
<li>Quiz will be available from 5:30pm to 5:55pm</li>
<li>During the quiz, Zoom chat will be limited to posts only with
instructor, so you may ask questions while you take the quiz.</li>
<li>You will have 20 minutes to complete the quiz from the time you start.
<ul class="org-ul">
<li>After the 20 minutes, the quiz is set to auto-submit.</li>
<li>If you get disconnected from the network, you will be able to
get back into the quiz but keep in mind the timer keeps going.</li>
</ul></li>
<li>You will be presented one question at a time; backtracking to previous questions is not permitted</li>
<li>Be careful to use <b><i>NEXT</i></b> to advance to the next question and not
accidentally click "Submit" until you are finished.</li>
<li>You may assume all files and directory names contain only letters
(both-cases), digits, underscores, and/or periods.</li>
</ul>

<ul class="org-ul">
<li><span style="color:#ff0000; background-color:#;">Results will not be available/visible until all student submissions have been graded.</span></li>
</ul>

<p>
NOTE #1: 'Fill in the blank' answers are simple enough to be
automatically graded. So read the question carefully and be
precise - no extraneous words (i.e. "Solution" vs "My answer is
'Solution'.")    
</p>
</div>
</div>
<div id="outline-container-org39ca58c" class="outline-3">
<h3 id="org39ca58c">Day 27 Summary<a id="orgc0d19bc"></a></h3>
<div class="outline-text-3" id="text-org39ca58c">
</div>
<div id="outline-container-org24f11d0" class="outline-4">
<h4 id="org24f11d0">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org24f11d0">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgb3c3c13" class="outline-4">
<h4 id="orgb3c3c13">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgb3c3c13">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org1390f48" class="outline-2">
<h2 id="org1390f48">Day 28 - Wed, November 26, 2025<a id="orge3d6b5a"></a></h2>
<div class="outline-text-2" id="text-org1390f48">
</div>
<div id="outline-container-orgfd00e54" class="outline-3">
<h3 id="orgfd00e54">Day 28 Introduction<a id="orgd18ce28"></a></h3>
<div class="outline-text-3" id="text-orgfd00e54">
</div>
<div id="outline-container-orgcca1c38" class="outline-4">
<h4 id="orgcca1c38">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgcca1c38">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org3713446" class="outline-3">
<h3 id="org3713446">Linked List Example - Part 4</h3>
<div class="outline-text-3" id="text-org3713446">
<p>
And that's it.  Now, let's make the files nice and organized, then
clean it up with all of our necessary <span class="cmd">#include</span>s.
</p>
</div>

<div id="outline-container-org408bd2d" class="outline-4">
<h4 id="org408bd2d">File: <span class="fname">linked_list_demo.c</span></h4>
<div class="outline-text-4" id="text-org408bd2d">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">"data_structure.h"</span>   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Where our node definition will</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">reside.  If we didn't use "struct</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">node*" in below, we wouldn't even</span>
                              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">need to include this here.</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">"functions.h"</span>        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Our supporting function prototypes.</span>

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {                          <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Notice we're returning int for easy exit</span>

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">list</span>;                          <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Our linked list.</span>

  notify_user( <span style="color: #ffa07a;">"Reading data..."</span> );           
  list = read_data( <span style="color: #ffa07a;">"input.txt"</span> );             
  <span style="color: #00ffff;">if</span> ( ! list ) {                       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No data? Something went wrong.</span>
                                        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">A NULL pointer is 0.  We'll use that</span>
                                        <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">fact so we don't have to</span>
                                        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">include &lt;stddef.h&gt;</span>
    notify_user( <span style="color: #ffa07a;">"Error: List is NULL."</span> );
    <span style="color: #00ffff;">return</span> 1;
  }
  notify_user( <span style="color: #ffa07a;">"Printing unsorted data..."</span> );    
  print( list );                     
  notify_user( <span style="color: #ffa07a;">"Sorting data..."</span> );  
  sort( list );
  notify_user( <span style="color: #ffa07a;">"Printing sorted data..."</span> );    
  print( list );
  <span style="color: #00ffff;">return</span> 0;                                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No errors.</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb3c4807" class="outline-4">
<h4 id="orgb3c4807">File: <span class="fname">data_structure.h</span></h4>
<div class="outline-text-4" id="text-orgb3c4807">
<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> {
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">data</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">next</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-org5445b4e" class="outline-4">
<h4 id="org5445b4e">File: <span class="fname">functions.h</span></h4>
<div class="outline-text-4" id="text-org5445b4e">
<p>
This will have all our prototypes needed by <span class="cmd">main()</span>:
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">notify_user</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span> );
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">L</span> );
<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span>* <span style="color: #87cefa;">read_data</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span>);
<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">sort</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">L</span> );

</pre>
</div>

<p>
Notice <span class="cmd">get_number</span> is not there!  It's not needed by
<span class="cmd">main()</span>, only by a function already defined within the
<span class="fname">functions.c</span> file (shown next).
</p>
</div>
</div>
<div id="outline-container-org7ed3402" class="outline-4">
<h4 id="org7ed3402">File: <span class="fname">functions.c</span></h4>
<div class="outline-text-4" id="text-org7ed3402">
<p>
This is all of our actual function definitions, <i>plus</i> the
<span class="cmd">get_number</span> supporting function.
</p>

<p>
Also notice, since these functions are where all of our C
functions are, it is the only place we need to <span class="cmd">#include</span>
the C libraries.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdio.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">printf</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;fcntl.h&gt;</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">open</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;unistd.h&gt;</span> <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">close</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stdlib.h&gt;</span> <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">malloc</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;stddef.h&gt;</span> <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">NULL</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">"data_structure.h"</span>  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Needed for our 'node' struct</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Proto for a function to pull 1 number from the input file.</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_number</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">number</span> );

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">notify_user</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span> ) {
  printf( <span style="color: #ffa07a;">"%s\n"</span>, string );
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">ptr</span> ) {
  <span style="color: #00ffff;">while</span> ( ptr != <span style="color: #7fffd4;">NULL</span> ) {
    printf( <span style="color: #ffa07a;">"  Node value: %i\n"</span>, ptr -&gt; data );
    ptr = ptr -&gt; next;
  }
}

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span>* <span style="color: #87cefa;">read_data</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span> ) {
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">fd</span>                 = 0;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">For file descriptor</span>
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">number</span>             = 0;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Number read from the file</span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">head_of_list</span> = <span style="color: #7fffd4;">NULL</span>;   
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">new_node</span>     = <span style="color: #7fffd4;">NULL</span>;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This will be the node we continuously create</span>
                                      <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">for each new number.</span>
  fd = open( filename, O_RDONLY );
  <span style="color: #00ffff;">while</span> ( get_number( fd, &amp;number ) ) {      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">'get_number' will return 1 if success, else 0</span>
                                             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">The actual integer from the file will be put into</span>
                                             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">&amp;number, like scanf() does.</span>

    new_node = malloc( <span style="color: #00ffff;">sizeof</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> ) );  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Create a new node</span>
    new_node -&gt; data = number;                   <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">and set the data/next fields</span>
    new_node -&gt; next = head_of_list;

    head_of_list = new_node;                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now adjust the new head of list.</span>
  }
  close( fd );
  <span style="color: #00ffff;">return</span> head_of_list;
}

<span style="color: #98fb98;">void</span> <span style="color: #87cefa;">sort</span>( <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">L</span> ) {
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">top</span>       = L;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Top position where the</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">minimum value will be</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">placed. </span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">traversal</span> = <span style="color: #7fffd4;">NULL</span>;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Used to traverse down the</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">list looking for any value</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">smaller than the current</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">mimimum. </span>
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">node</span> *<span style="color: #eedd82;">minimum</span>   = <span style="color: #7fffd4;">NULL</span>;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Points to the node where</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the currently known minimum</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">value is.</span>
  <span style="color: #98fb98;">int</span>          <span style="color: #eedd82;">temp</span>      = 0;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Used when swapping the DATA.</span>

  <span style="color: #00ffff;">while</span> ( top != <span style="color: #7fffd4;">NULL</span> ) {               <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When 'top' gets to the last</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">pointer (in the tail of</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the list), we're done.</span>

    minimum = top;                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Assume top has the minimum value.</span>
    traversal = top -&gt; next;            <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Start traversal at the next node.</span>
    <span style="color: #00ffff;">while</span> ( traversal != <span style="color: #7fffd4;">NULL</span> ) {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Stop traversing if we reach</span>
                                        <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the end.</span>
      <span style="color: #00ffff;">if</span> ( minimum -&gt; data &gt; traversal -&gt; data )  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Check for a</span>
        minimum = traversal;                      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">smaller value and </span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">remember it if</span>
                                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">found.</span>
      traversal = traversal -&gt; next;              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now move on...</span>
    }
    temp = top -&gt; data;                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We now know where the minimum</span>
    top -&gt; data = minimum -&gt; data;      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">value is, so swap with</span>
    minimum -&gt; data = temp;             <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">the top position.</span>

    top = top -&gt; next;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Minimum value is now at the top, so we adjust</span>
                            <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">'top' down one node within the list. </span>
  }
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">When done, nothing to return because we manipulated the contents</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">of the list being pointed by L.</span>
}

<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_number</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">int</span> *<span style="color: #eedd82;">N</span> ) {
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">c</span>[2] = {0};                    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Char to read from the file.</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We use 2 slots because later</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"atoi()" requires a char *</span>
                                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">with an ending null char!</span>

  *N = 0;                             <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Initial value of N</span>
  <span style="color: #00ffff;">while</span> ( read( fd, c, 1 ) ) {       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get a single byte.  Notice "c", not "&amp;c".</span>
    <span style="color: #00ffff;">if</span> ( c[0] == <span style="color: #ffa07a;">'\n'</span> ) {                <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If newline...</span>
      <span style="color: #00ffff;">return</span> 1;                       <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">*N has the answer and we</span>
                                      <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">return success!</span>
    } <span style="color: #00ffff;">else</span> {
      *N = *N * 10 + atoi( c );   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Else update answer via (N*10)+int(c)</span>
    }
  }
  <span style="color: #00ffff;">return</span> 0;   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If there is nothing more to read, return failure.</span>
              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Note: This requires the last number in the file to</span>
              <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">have a \n after it!!</span>
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org06be3f9" class="outline-3">
<h3 id="org06be3f9">Linked List Example - Part 5</h3>
<div class="outline-text-3" id="text-org06be3f9">
<p>
Next up, a couple of files to help in testing and demo.
</p>
</div>
<div id="outline-container-org0fd3051" class="outline-4">
<h4 id="org0fd3051">File: <span class="fname">make_input.bash</span></h4>
<div class="outline-text-4" id="text-org0fd3051">
<p>
First, to test our code, we need to create a file of random
numbers (a random amount).  So, let's write a Bash script to do
that:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Helper script to build input.txt input file.  This script uses</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">methods we've learned in this class.  More "practical" methods exist.</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #eedd82;">DST</span>=input.txt
<span style="color: #eedd82;">COUNT</span>=$(( $<span style="color: #eedd82;">RANDOM</span> % 100 ))    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Keep the number less than 100 for demo</span>

<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">DST</span> ]]; <span style="color: #00ffff;">then</span>
    rm $<span style="color: #eedd82;">DST</span>
<span style="color: #00ffff;">fi</span>
<span style="color: #00ffff;">while</span> [[ $<span style="color: #eedd82;">COUNT</span> -ge 0 ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #b0c4de;">echo</span> $<span style="color: #eedd82;">RANDOM</span> &gt;&gt; $<span style="color: #eedd82;">DST</span>
    <span style="color: #eedd82;">COUNT</span>=$(( $<span style="color: #eedd82;">COUNT</span> -1 ))
<span style="color: #00ffff;">done</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Generated $(</span><span style="color: #fa8072;">wc</span><span style="color: #ffa07a;"> -l $DST | cut -d' ' -f1) integers."</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orga7e5cab" class="outline-4">
<h4 id="orga7e5cab">File: <span class="fname">Makefile</span> (not on Final)</h4>
<div class="outline-text-4" id="text-orga7e5cab">
<p>
Finally, let's build a <span class="fname">Makefile</span> to ease development.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">make     - to compile and build the input file</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">make run - to run the program (not necessary, but less typing)</span>
<span style="color: #ff7f24;">######################################################################</span>

default: clean make_input
        @cc linked_list_demo.c functions.c -o linked_list_demo

make_input:
        @./make_input.bash &gt; /dev/null

run:
        @./linked_list_demo

clean:
        @rm -f linked_list_demo *.o input.txt *~
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org3ca38f1" class="outline-3">
<h3 id="org3ca38f1">Day 28 Summary<a id="orge1f9e88"></a></h3>
<div class="outline-text-3" id="text-org3ca38f1">
</div>
<div id="outline-container-orgaeceef2" class="outline-4">
<h4 id="orgaeceef2">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orgaeceef2">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-orgd476ed2" class="outline-4">
<h4 id="orgd476ed2">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-orgd476ed2">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org3e1f384" class="outline-2">
<h2 id="org3e1f384">Day 29 - Mon, December 1, 2025<a id="orgc83d710"></a></h2>
<div class="outline-text-2" id="text-org3e1f384">
</div>
<div id="outline-container-orgb2a6e2b" class="outline-3">
<h3 id="orgb2a6e2b">Day 29 Introduction<a id="org1d22370"></a></h3>
<div class="outline-text-3" id="text-orgb2a6e2b">
</div>
<div id="outline-container-org401ed9a" class="outline-4">
<h4 id="org401ed9a">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org401ed9a">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org392e32f" class="outline-3">
<h3 id="org392e32f">Computer Network Jargon&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org392e32f">
<ul class="org-ul">
<li>Internet</li>
<li>Internet Protocol
<ul class="org-ul">
<li>Packets</li>
<li>TCP</li>
<li>UDP</li>
<li>ICMP</li>
</ul></li>
<li>Client</li>
<li>Server</li>
</ul>
</div>
</div>
<div id="outline-container-org05f136b" class="outline-3">
<h3 id="org05f136b">IP Addresses&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org05f136b">
<ul class="org-ul">
<li>32 bits</li>
<li>4 octets (bytes)</li>
<li>Dot notation for human consumption</li>
<li>32-bit value in computer</li>
<li>Network Portion / Host Portion</li>
<li>Classes
<ul class="org-ul">
<li>A, B, C</li>
</ul></li>
<li>Classless
<ul class="org-ul">
<li>CIDR Notation</li>
</ul></li>
<li>Public vs Private</li>
</ul>
</div>
</div>
<div id="outline-container-org8573e01" class="outline-3">
<h3 id="org8573e01">Ports&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8573e01">
<ul class="org-ul">
<li>Doorways in/out the computer</li>
<li>64K</li>
<li>Services typically lower numbers
<ul class="org-ul">
<li>&lt;1024 requires special privileges (root)</li>
</ul></li>
<li>Clients typically higher numbers</li>
</ul>
</div>
</div>
<div id="outline-container-org767dbbc" class="outline-3">
<h3 id="org767dbbc">Gateways&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org767dbbc">
<p>
Devices which pass packets along
</p>
<ul class="org-ul">
<li>connects networks</li>
<li>Table-based routing</li>
</ul>
</div>
</div>
<div id="outline-container-org1283af0" class="outline-3">
<h3 id="org1283af0">Servers&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org1283af0">
<p>
Systems which provide services
</p>
<ul class="org-ul">
<li>one or more on system</li>
<li>Each service application uses 1+ ports
<ul class="org-ul">
<li>HTTP: 80  S: 443</li>
<li>SMTP: 25  S: 567</li>
<li>POP : 110 S: 995</li>
<li>IMAP: 143 S: 993</li>
<li>Telnet: 23</li>
<li>SSH: 22</li>
<li>NTP: 123</li>
</ul></li>
<li>Full list of common ports in /etc/services</li>
</ul>
</div>
</div>
<div id="outline-container-org8175bab" class="outline-3">
<h3 id="org8175bab">Clients&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8175bab">
<p>
Systems/Applications which request services
</p>
<ul class="org-ul">
<li>Browsers</li>
<li>Email clients</li>
<li>CLI tools</li>
<li>Clocks</li>
<li>Shell tools</li>
</ul>
</div>
</div>
<div id="outline-container-org560221f" class="outline-3">
<h3 id="org560221f">Protocols&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org560221f">
<p>
The syntax/semantics (i.e. "language") between client and server
applications:
</p>
<ul class="org-ul">
<li>Web Browser (Firefox, Chrome) &lt;-&gt; Web Server (Apache, Nginx, Lighttpd): HTTP, HTTPS</li>
<li>Email Client (Thunderbird, KMail) &lt;-&gt; Email Server (Sendmail,
Postfix, Exim): SMTP, POP, IMAP</li>
<li>SSH CLI tool (ssh) &lt;-&gt; SSH Server (sshd): SSH</li>
<li>Clock &lt;-&gt; Time Server (ntpd): NTP</li>
<li>Remote shell tool (telnet) &lt;-&gt; Remote shell server (telnetd): TELNET</li>
</ul>
</div>
</div>
<div id="outline-container-org2f569ad" class="outline-3">
<h3 id="org2f569ad">Clear Text vs Encryption&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org2f569ad">
<ul class="org-ul">
<li>Clear Text: Readable by human eyes</li>
<li>Encrypted: Looks like garbage
<ul class="org-ul">
<li>Not encoded: Encoding is a simple mapping.  Encryption requires
the clear text and a secret (key).</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org6e2e37b" class="outline-3">
<h3 id="org6e2e37b">Firewalls&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org6e2e37b">
<p>
Filters packets:
</p>
<ul class="org-ul">
<li>rules based
<ul class="org-ul">
<li>IP Addresses (source/destinations)</li>
<li>Ports (source/destinations)</li>
<li>Protocols (TCP, UDP, etc.)</li>
</ul></li>
<li>Application based
<ul class="org-ul">
<li>Commonly found mobile devices.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgac6177a" class="outline-3">
<h3 id="orgac6177a">Network Address Translation&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgac6177a">
<ul class="org-ul">
<li>Allows private IPs "on the internet"</li>
<li>Alters packets before forwarding
<ul class="org-ul">
<li>Keeps track of who wanted to send what</li>
<li>When responses come back, "un-NATing" is performed
<ul class="org-ul">
<li>All your home ISP devices</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgd3bacbb" class="outline-3">
<h3 id="orgd3bacbb">Day 29 Summary<a id="org85ca7cf"></a></h3>
<div class="outline-text-3" id="text-orgd3bacbb">
</div>
<div id="outline-container-org6062603" class="outline-4">
<h4 id="org6062603">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org6062603">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org4c38e48" class="outline-4">
<h4 id="org4c38e48">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org4c38e48">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc345195" class="outline-2">
<h2 id="orgc345195">Day 30 - Wed, December 3, 2025<a id="orgbc0679a"></a></h2>
<div class="outline-text-2" id="text-orgc345195">
</div>
<div id="outline-container-org19d1aff" class="outline-3">
<h3 id="org19d1aff">Day 30 Introduction<a id="org7b08ca6"></a></h3>
<div class="outline-text-3" id="text-org19d1aff">
</div>
<div id="outline-container-org2d3c012" class="outline-4">
<h4 id="org2d3c012">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-org2d3c012">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-orgad855d4" class="outline-3">
<h3 id="orgad855d4">C Sockets&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orgad855d4">
<p>
In C, as mentioned, we're going to focus on communication between
different systems.  For this lecture, we're going to act as a
client, and to do so, we need some information as well:
</p>

<ul class="org-ul">
<li>The server's IP address and the service's port number</li>
<li>The protocol, three of them in fact.</li>
</ul>

<p>
Why 3 protocols?  Because C will handle two of them, <b>we</b> need to
handle the third.  Specifically:
</p>

<ul class="org-ul">
<li>C will handle the Internet Protocol (IP)</li>
<li>C will handle the Transmission Control Protocol (TCP)</li>
<li><b>WE</b> need to handle the HyperText Transfer Protocol (HTTP)</li>
</ul>
</div>
</div>

<div id="outline-container-org14a59b7" class="outline-3">
<h3 id="org14a59b7">C Provided Data Structures&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org14a59b7">
<p>
The standard C libraries provide a few helper structures and
functions, but due to their robustness, they're not very easy to
understand when starting out.
</p>
</div>

<div id="outline-container-org81418a7" class="outline-4">
<h4 id="org81418a7">Server Information</h4>
<div class="outline-text-4" id="text-org81418a7">
<p>
As mentioned, we need the server IP address, the service port
number, whether to use TCP or UDP, what types of sockets to use,
etc.
</p>

<p>
This information is stored in the <span class="cmd">sockaddr_in</span>
structure.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">in_addr</span> {
  <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">long</span> <span style="color: #eedd82;">s_addr</span>;
};

<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">sockaddr_in</span> {
  <span style="color: #98fb98;">uint8_t</span> <span style="color: #eedd82;">sin_len</span>;
  <span style="color: #98fb98;">sa_family_t</span> <span style="color: #eedd82;">sin_family</span>;
  in_port_t <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">sin_port</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">in_addr</span> <span style="color: #eedd82;">sin_addr</span>;
  <span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">sin_zero</span>[8];
};
</pre>
</div>
</div>
</div>

<div id="outline-container-org8e06690" class="outline-4">
<h4 id="org8e06690">Hostname Resolution</h4>
<div class="outline-text-4" id="text-org8e06690">
<p>
While we could continue with just the IP address of the server we
want to contact, things are more useful if we use domain names
(i.e., www.cpp.edu vs 44.235.128.227 {unfortunately, CPP is now
hosting their web site on Amazon}).
</p>

<p>
To use domain names, we need another structure called
<span class="cmd">hostent</span>.  This structure is used to store, among other
things, the <i>list</i> of IP addresses which a domain name maps to.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">hostent</span> {
  <span style="color: #98fb98;">char</span>  *<span style="color: #eedd82;">h_name</span>;
  <span style="color: #98fb98;">char</span> **<span style="color: #eedd82;">h_aliases</span>;
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">h_addrtype</span>;
  <span style="color: #98fb98;">int</span>    <span style="color: #eedd82;">h_length</span>;
  <span style="color: #98fb98;">char</span> **<span style="color: #eedd82;">h_addr_list</span>
<span style="color: #b0c4de;">  #define</span> <span style="color: #eedd82;">h_addr</span> h_addr_list[0] <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">For backward compatibility</span><span style="color: #ff7f24;"> */</span>
};
</pre>
</div>

<p>
The most complicated part of socket programming in C, IMHO, was
getting the IP address info from the <span class="cmd">hostent</span> structure
into the <span class="cmd">sockaddr_in</span> structure.
</p>
</div>
</div>
</div>

<div id="outline-container-org215a1ad" class="outline-3">
<h3 id="org215a1ad">C Provided Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org215a1ad">
<p>
As for functions, there are some new ones we need:
</p>
</div>

<div id="outline-container-org68eba65" class="outline-4">
<h4 id="org68eba65">htons()</h4>
<div class="outline-text-4" id="text-org68eba65">
<p>
The <span class="cmd">htons()</span> function takes a server port number as an
integer, and returns a data type suitable for the
<span class="cmd">sockaddr_in</span> structure.
</p>
</div>
</div>

<div id="outline-container-org5485bc9" class="outline-4">
<h4 id="org5485bc9">inet_ntoa()</h4>
<div class="outline-text-4" id="text-org5485bc9">
<p>
<span class="cmd">inet_ntoa()</span> takes a <span class="cmd">struct in_addr</span> as an
argument and returns a null-terminated string representation of
an IP address.
</p>

<p>
What, now, is a <span class="cmd">struct in_addr</span>?  It's a structure,
inside <span class="cmd">sockaddr_in</span> which holds an IP address (usually
just as an <i>unsigned long</i>).
</p>

<p>
This function is used in the client program (coming up soon)
simply to output the IP address result of the domain name
resolution.  (It was some of my debugging I decided to keep.) 
</p>
</div>
</div>

<div id="outline-container-orgca8222f" class="outline-4">
<h4 id="orgca8222f">gethostbyname()</h4>
<div class="outline-text-4" id="text-orgca8222f">
<p>
Ok, this is where the resolution magic happens.  This one function
can take a null terminated string representing a
numeric/dot-notation IP address <b>or</b> a domain name, returning a
<span class="cmd">hostent</span> structure.  
</p>

<p>
See how this can be useful?  It provides flexibility to the user
to provide <i>either</i> an IP or a domain name.  (And being human, we
tend to remember domain names.)
</p>
</div>
</div>

<div id="outline-container-org0dee6bf" class="outline-4">
<h4 id="org0dee6bf">socket()</h4>
<div class="outline-text-4" id="text-org0dee6bf">
<p>
Next to last is the function <span class="cmd">socket()</span> which returns a
socket structure.  It doesn't yet open the connection, just preps
a data structure for it.  Sort of like a file handle but the file
hasn't been opened yet.  
</p>
</div>
</div>

<div id="outline-container-org6a1f71f" class="outline-4">
<h4 id="org6a1f71f">connect()</h4>
<div class="outline-text-4" id="text-org6a1f71f">
<p>
And finally, <span class="cmd">connect()</span> takes our server information and
actually (attempts to) open the connection.  From this, we get a
<i>socket connection</i> which we can then use with the <span class="cmd">read()</span>
and <span class="cmd">write()</span> functions we already know.
</p>
</div>
</div>
</div>

<div id="outline-container-org1ac1579" class="outline-3">
<h3 id="org1ac1579">Demo Client Description&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org1ac1579">
<p>
The demo client we'll review is a <i>very</i> basic version of
<span class="cmd">wget</span> or <span class="cmd">curl</span>.  It prompts the user for a
domain name (server), a resource (web page, image, etc), and a
file name where to save the requested data.  (Normally we'd use
command line parameters, but the curriculum didn't include how to
do that.)
</p>

<p>
As usual, let's take a look at the <span class="cmd">main()</span> routine.
Remember, readability&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>() {
  <span style="color: #98fb98;">int</span>  <span style="color: #eedd82;">connection</span>    = 0;         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Like a file descriptor but for the network</span>
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">hostname</span>[50]  = { 0 };     
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">resource</span>[100] = { 0 };
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">filename</span>[100] = { 0 };

  get_string( <span style="color: #ffa07a;">"Enter hostname: "</span>, hostname );
  get_string( <span style="color: #ffa07a;">"Enter resource: "</span>, resource );
  get_string( <span style="color: #ffa07a;">"Enter file name: "</span>, filename );

  connection = create_connection( hostname );
  <span style="color: #00ffff;">if</span> ( ! connection )
    <span style="color: #00ffff;">return</span> 1;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">All error messages are output where they occur and 0 is returned.</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">So if 'save_request' fails or succeeds, the action is the same</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">just close the connection and exit.</span>
  save_request( connection, resource, filename, hostname );
  close( connection );

  <span style="color: #00ffff;">return</span> 0; <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Should really exit with an error code if 'save_request'</span>
            <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">failed, but you can do that. :)</span>
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org8bc5986" class="outline-3">
<h3 id="org8bc5986">Support Functions&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org8bc5986">
<p>
First, let's review some support functions you'll recognize, just to
get them out of the way:
</p>
</div>

<div id="outline-container-org7024b27" class="outline-4">
<h4 id="org7024b27">void get_string( char *prompt, char *field )</h4>
<div class="outline-text-4" id="text-org7024b27">
<p>
<span class="cmd">get_string</span> is a function to simply prompt the user,
read in a string (no spaces), and populate the result.  This
exists really just so our <span class="cmd">main()</span> routine reads a bit
nicer.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">void</span> <span style="color: #87cefa;">get_string</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">prompt</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">field</span> ) {
  printf( prompt );
  scanf( <span style="color: #ffa07a;">"%s"</span>, field );
}
</pre>
</div>
</div>
</div>

<div id="outline-container-orgcdd1e96" class="outline-4">
<h4 id="orgcdd1e96">int get_length( char *string )</h4>
<div class="outline-text-4" id="text-orgcdd1e96">
<p>
We've seen a similar function.  This one is a bit simplified and
<i>does not</i> include the null char as the null should <i>not</i> be sent
over the network.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">get_length</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span> = 0;

  <span style="color: #00ffff;">while</span> ( string[count] != 0 )
    count++;
  <span style="color: #00ffff;">return</span> count;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org03d1d6c" class="outline-3">
<h3 id="org03d1d6c">Important Function #1: char* build_request( char * hostname, char *resource )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org03d1d6c">
<p>
The first important function is to build the request string we need
to send to the server.  While there are existing libraries for this,
<span class="cmd">build_request</span> was written using C material we already know so as
to not overload you with new stuff.
</p>

<p>
An HTTP request requires 3 lines, but we use 4:
</p>
<ul class="org-ul">
<li>The GET request with the resource,</li>
<li>The HOST you're trying to contact,</li>
<li>The CONNECTION state after the request, and</li>
<li>A blank line.</li>
</ul>

<p>
In HTTP-speak it looks like this:
</p>

<pre class="example" id="orgb76c070">
GET /index.html HTTP/1.1\r\n
HOST: www.example.com\r\n
Connection: close\r\n
\r\n
</pre>

<p>
The <i>Connection</i> line, is optional.  The default is to keep the
connection alive, but for our demo, after we get the request we'll
just have the connection close.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">build_request</span>( <span style="color: #98fb98;">char</span> * <span style="color: #eedd82;">hostname</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">resource</span> ) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">position</span>, <span style="color: #eedd82;">index</span>;
  <span style="color: #98fb98;">char</span> * <span style="color: #eedd82;">request</span> = malloc( 4 + get_length( resource ) + 1 + 8 + 2 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">GET resource HTTP/1.1\r\n</span>
                           + 6 + get_length( hostname ) + 2       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">HOST: {hostname}\r\n'</span>
                           + 19                                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Connection: close\r\n</span>
                           + 2                                    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">\r\n</span>
                           + 2 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">for good measure. :)</span>
                           );
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string1</span>[] = <span style="color: #ffa07a;">"GET "</span>;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">resource will go after this.</span>
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string2</span>[] = <span style="color: #ffa07a;">" HTTP/1.1\r\nHOST: "</span>;
  <span style="color: #98fb98;">char</span> <span style="color: #eedd82;">string3</span>[] = <span style="color: #ffa07a;">"\r\nConnection: close\r\n\r\n"</span>;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now need to copy our full request string into 'request'.</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">There are functions/libs to simplify this, but we've not gone over</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">them, so I'm taking the long route for full illustration</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">purposes.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"index" will index each string to be copied; thus reset each time</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">"position" will index our destination "request"</span>

  position = 0;                      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy in 'string1'</span>
  index = 0;
  <span style="color: #00ffff;">while</span> ( string1[ index ] != 0 ) {
    request[ position ] = string1[ index ];
    position++;
    index++;
  }

  index = 0;                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy in resource</span>
  <span style="color: #00ffff;">while</span> ( resource[ index ] != 0 ) {
    request[ position ] = resource[ index ];
    position++;
    index++;
  }

  index = 0;                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy in 'string2'</span>
  <span style="color: #00ffff;">while</span> ( string2[ index ] != 0 ) {
    request[ position ] = string2[ index ];
    position++;
    index++;
  }

  index = 0;                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy in hostname</span>
  <span style="color: #00ffff;">while</span> ( hostname[ index ] != 0 ) {
    request[ position ] = hostname[ index ];
    position++;
    index++;
  }

  index = 0;                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Copy in 'string3'</span>
  <span style="color: #00ffff;">while</span> ( string3[ index ] != 0 ) {
    request[ position ] = string3[ index ];
    position++;
    index++;
  }

  request[ position ] = 0;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tack on final null char...</span>
  <span style="color: #00ffff;">return</span> request;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">...and return.</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orga08287e" class="outline-3">
<h3 id="orga08287e">Important Function #2: int create_connection( char *hostname )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-orga08287e">
<p>
This is where we setup our connection then open it.  It's also
where the more complicated stuff happens - getting the host IP from
<span class="cmd">hostent</span> into <span class="cmd">sockaddr_in</span>.  You'll see, the
typecasting is "fun":
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">create_connection</span>( <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">hostname</span> ) {

  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">sockaddr_in</span>  <span style="color: #eedd82;">server_info</span>;
  <span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">hostent</span>     *<span style="color: #eedd82;">host_entity</span>;
  <span style="color: #98fb98;">int</span>                 <span style="color: #eedd82;">connection</span> = 0;
  <span style="color: #98fb98;">int</span>                 <span style="color: #eedd82;">result</span>     = 0;

  server_info.sin_family      = AF_INET;     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Set to "Address Family - Internet"</span>
  server_info.sin_port        = htons(80);   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Hard code port 80 for HTTP</span>

  host_entity = gethostbyname( hostname );   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Convert IP or domain name to IP</span>
  <span style="color: #00ffff;">if</span> ( ! host_entity ) {
    printf( <span style="color: #ffa07a;">"Unable to resolve %s.\n"</span>, hostname );
    <span style="color: #00ffff;">return</span> 0;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get the 'hostent' data into 'sockaddr_in':</span>
  server_info.sin_addr.s_addr = ( (<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">in_addr</span> *)host_entity -&gt; h_addr ) -&gt; s_addr;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">My debugging statement to verify the DNS resolution.</span>
  printf( <span style="color: #ffa07a;">"IP: %s\n"</span>, inet_ntoa( *((<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">in_addr</span> *)host_entity -&gt; h_addr ) ) );

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Create the actual socket data structure</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">SOCK_STREAM means use reliable connection</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">0 means use the default protocol for SOCK_STREAM, which is TCP</span>
  connection = socket( AF_INET, SOCK_STREAM, 0 );
  <span style="color: #00ffff;">if</span> ( connection &lt; 0 ) {
    printf( <span style="color: #ffa07a;">"Unable to make initialize connection structure.\n"</span> );
    <span style="color: #00ffff;">return</span> 0;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">FINALLY, connect to the server (hopefully)...</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">('connect' requires the generic socket structure; sockaddr_in is</span>
  <span style="color: #ff7f24;">//    </span><span style="color: #ff7f24;">specific for Internet connections.)</span>
  result = connect( connection, (<span style="color: #00ffff;">struct</span> <span style="color: #98fb98;">sockaddr</span> *) &amp;server_info, <span style="color: #00ffff;">sizeof</span>(server_info) );
  <span style="color: #00ffff;">if</span>( result &lt; 0 ) {
    printf( <span style="color: #ffa07a;">"Connection to server failed.\n"</span> );
    <span style="color: #00ffff;">return</span> 0;
  }
  <span style="color: #00ffff;">return</span> connection;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now have a valid connection</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4018320" class="outline-3">
<h3 id="org4018320">Important Function #3: int save_request( int connection, char *resource, char *filename, char *hostname )&#xa0;&#xa0;&#xa0;<span class="tag"><span class="F">F</span></span></h3>
<div class="outline-text-3" id="text-org4018320">
<p>
Finally, this last function's job is to send our request and save
the response.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">save_request</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">connection</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">resource</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">filename</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">hostname</span> ) {
  <span style="color: #98fb98;">char</span>  <span style="color: #eedd82;">response</span>[ 1024 ] = { 0 };  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Will get the response 1K at a time.</span>
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">request</span>          = <span style="color: #7fffd4;">NULL</span>;           <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Request length depends on</span>
                                  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">resource and hostname, will need to malloc().</span>
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">result</span>           = 0;
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">fd</span>               = 0;
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">bytes_read</span>       = 0;
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">bytes_written</span>    = 0;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Build the request</span>
  request = build_request( hostname, resource );

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Send the request to the server</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">Since 'get_length' does not include the null char, the server</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">won't be receiving it...that's accurate.</span>
  result = write( connection, request, get_length( request ) );
  <span style="color: #00ffff;">if</span> ( result &lt;= 0 ) {
    printf( <span style="color: #ffa07a;">"Error sending request to server.\n"</span> );
    <span style="color: #00ffff;">return</span> 0;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now get the response and save to a file.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Open file for writing.</span>
  fd = open( filename, O_WRONLY | O_TRUNC | O_CREAT, 0600 );
  <span style="color: #00ffff;">if</span> ( fd &lt; 0 ) {
    printf( <span style="color: #ffa07a;">"Error creating %s.\n"</span>, filename );
    <span style="color: #00ffff;">return</span> 0;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Read data from the connection and save to the file until</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">done.</span>
  bytes_read = read( connection, response, 1024 );
  <span style="color: #00ffff;">while</span> ( bytes_read &gt; 0 ) {
    bytes_written = write( fd, response, bytes_read );
    bytes_read = read( connection, response, 1024 );    
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No more bytes from the server, close the file but not the</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">connection.  'main' does that. </span>
  close( fd );

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">And return, 1 being success.</span>
  <span style="color: #00ffff;">return</span> 1;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org72586a9" class="outline-3">
<h3 id="org72586a9">Demo</h3>
<div class="outline-text-3" id="text-org72586a9">
<p>
Now, let's <a href="support_files/socket_demo.c">put it all together</a> and try it out:
</p>

<ul class="org-ul">
<li>Test with IP 93.184.216.34 and resource <span class="fname">/index.html</span></li>
<li>Test with <i>www.cpp.edu</i> and resource <span class="fname">/index.html</span></li>
<li>Test with <i>www.example.com</i> and resource <span class="fname">/index.html</span></li>
<li>Test with <i>ods.com.ua</i> and resource <span class="fname">/win/eng/unix/lnxsite/figs/caution.gif</span>
<ul class="org-ul">
<li>How can we get the <span class="fname">.gif</span>?</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org6bce21d" class="outline-3">
<h3 id="org6bce21d">Day 30 Summary<a id="org0ed91e0"></a></h3>
<div class="outline-text-3" id="text-org6bce21d">
</div>
<div id="outline-container-orga436cbc" class="outline-4">
<h4 id="orga436cbc">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orga436cbc">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org3b1b6c3" class="outline-4">
<h4 id="org3b1b6c3">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org3b1b6c3">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org64b68e5" class="outline-2">
<h2 id="org64b68e5">Day 31 - Mon, December 8, 2025<a id="org4afd331"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Final">Final</span></span></h2>
<div class="outline-text-2" id="text-org64b68e5">
</div>
<div id="outline-container-org4b59422" class="outline-3">
<h3 id="org4b59422">Day 31 Introduction<a id="org4482734"></a></h3>
<div class="outline-text-3" id="text-org4b59422">
</div>
<div id="outline-container-orgaa511ab" class="outline-4">
<h4 id="orgaa511ab">Zoom Meeting Info</h4>
<div class="outline-text-4" id="text-orgaa511ab">
<p>
<a href="https://cpp.zoom.us/j/83530203280">https://cpp.zoom.us/j/83530203280</a><br />
Meeting ID: 835 3020 3280<br />
Passcode: M$Mac==!ck
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
</div>
<div id="outline-container-org1d31da0" class="outline-3">
<h3 id="org1d31da0">Day 31 Summary<a id="orgd01e266"></a></h3>
<div class="outline-text-3" id="text-org1d31da0">
</div>
<div id="outline-container-org4ca38ec" class="outline-4">
<h4 id="org4ca38ec">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-org4ca38ec">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org1330ad9" class="outline-4">
<h4 id="org1330ad9">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org1330ad9">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org84e09d3" class="outline-2">
<h2 id="org84e09d3">Day 32 - Wed, December 10, 2025<a id="orga5b7e89"></a></h2>
<div class="outline-text-2" id="text-org84e09d3">
</div>
<div id="outline-container-org6e78e87" class="outline-3">
<h3 id="org6e78e87">Day 32 Introduction<a id="org67e40b7"></a></h3>
<div class="outline-text-3" id="text-org6e78e87">
<p>
No class - our final was Mon.
</p>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:47:51"</font></td></tr></table>
</div>
</div>
<div id="outline-container-orge146315" class="outline-3">
<h3 id="orge146315">Day 32 Summary<a id="orge87c582"></a></h3>
<div class="outline-text-3" id="text-orge146315">
</div>
<div id="outline-container-orge955e68" class="outline-4">
<h4 id="orge955e68">Zoom Session Recording</h4>
<div class="outline-text-4" id="text-orge955e68">
<p>
[[]]
</p>
</div>
</div>

<div id="outline-container-org7be961c" class="outline-4">
<h4 id="org7be961c">Zoom Session Chat</h4>
<div class="outline-text-4" id="text-org7be961c">
<p>
Below is the chat transcript (with names removed) and answers to
questions inserted.
</p>

<p>
Legend:
</p>
<ul class="org-ul">
<li>Student names have been removed and replaced with numbers.</li>
<li>Private messages are filtered out, except&#x2026;
<ul class="org-ul">
<li>If the message contains a question everyone should know about,
I remove the name and alter the question as necessary to
protect privacy.</li>
</ul></li>
<li>Text color coding is just to help isolate student content.</li>
<li><span style="color:#000000; background-color:#cccccc;"> Grey backgrounded rows are my responses</span>
<ul class="org-ul">
<li>Rows with red-ish background for <span style="color:#000000; background-color:#ddbbbb;"> "Prof Gershman"</span> are answers to
class-related questions asked during the chat session.</li>
</ul></li>
</ul>


<br><table width=100% border=0 style="margin-bottom: -40px;"><tr><td align=right><font size=-1>Slide Last Updated: "2022-01-23 18:48:12"</font></td></tr></table>
</div>
</div>
</div>
</div>
<div id="outline-container-org814c19c" class="outline-2">
<h2 id="org814c19c">Practice Exercises<a id="orgac4fae8"></a></h2>
<div class="outline-text-2" id="text-org814c19c">
</div>
<div id="outline-container-org6e9b3e1" class="outline-3">
<h3 id="org6e9b3e1">Requirements for Practice Exercises <a id="org11b62ee"></a></h3>
<div class="outline-text-3" id="text-org6e9b3e1">
<p>
Some of the practice exercises require supporting
files/directories you do not need to create.  Below is a list of
the requirements pointed to by the individual practice exercises.
</p>

<p>
For example, the <a href="#org3a179d6">ls</a> practice exercises slide states you require
support package 001.  So you should follow the instuctions below for
<i>Support Package 001</i> to prepare your environment for the <a href="#org3a179d6">ls</a>
exercises.
</p>


<p>
It is presumed you are already logged into the CPP Linux system.
All files are available from my <span class="fname">cs2600</span> directory.
Each support package will tell you how to obtain what you need from
that directory.
</p>
</div>

<div id="outline-container-org5d92314" class="outline-4">
<h4 id="org5d92314">Support Package 000</h4>
<div class="outline-text-4" id="text-org5d92314">
<p>
This is nothing more than a CSV file providing you the number of
exercises for each command/challenge so you can track when new
exercises are created and compare it with those you've done
already.
</p>

<p>
You can find this file in your notes at
<span class="fname">support_files/pe_counts.txt</span>. 
</p>

<p>
You can use this manually or import into a spreadsheet for better
tracking.
</p>
</div>
</div>

<div id="outline-container-orgf0f49a4" class="outline-4">
<h4 id="orgf0f49a4">Support Package 001</h4>
<div class="outline-text-4" id="text-orgf0f49a4">
<p>
This package is a collection of files stored in a subdirectory
called <span class="fname">sp001</span>. To get this package, type the following
commands to create and place it in a <span class="fname">workspace</span> directory: 
</p>

<pre class="example" id="org2b0e999">
$ cd
$ mkdir workspace 2&gt; /dev/null
$ cd workspace
$ tar xfz ~dagershman/cs2600/sp001.tar.gz
</pre>
</div>
</div>

<div id="outline-container-org620bc8e" class="outline-4">
<h4 id="org620bc8e">Support Package 002</h4>
<div class="outline-text-4" id="text-org620bc8e">
<p>
This package is nothing more than the large list of words we use
in class.  Type the following instructions to store them in a
local directory for you to access whenever you'd like.  This will
store it in a directory called <span class="fname">cs2600</span> in your local
home directory.
</p>

<pre class="example" id="org9d75e9f">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ cp ~dagershman/cs2600/words .    # Don't forget the '.'
</pre>
</div>
</div>

<div id="outline-container-orga28ddd8" class="outline-4">
<h4 id="orga28ddd8">Support Package 003</h4>
<div class="outline-text-4" id="text-orga28ddd8">
<p>
This package is the obtaining of the world cities data and placing
it in your <span class="fname">~/cs2600</span> directory.
</p>

<pre class="example" id="org301100e">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ cp ~dagershman/cs2600/worldcities.csv .    # Don't forget the '.'
</pre>
</div>
</div>

<div id="outline-container-org791c383" class="outline-4">
<h4 id="org791c383">Support Package 004</h4>
<div class="outline-text-4" id="text-org791c383">
<p>
For this support package, web surf to the page of your favorite YouTube
channel.  View the source of the page (usually right-click and
choose "View Page Source&#x2026;", and search for <i>rssurl</i>.  It should
look something like this:
</p>

<pre class="example" id="org2786173">
"rssUrl":"https://www.youtube.com/feeds/videos.xml?channel_id={RANDOM_STRING_OF_CHARS}"
</pre>

<p>
Using the URL (http&#x2026;), download the file via:
</p>

<pre class="example" id="org10c10ca">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ wget -O videos.xml https://www.youtube.com/feeds/videos.xml?channel_id=....
</pre>

<p>
Once done, you should have a file called <span class="fname">videos.xml</span>
with the data we'll play with.
</p>
</div>
</div>
<div id="outline-container-org956fc67" class="outline-4">
<h4 id="org956fc67">Support Package 005</h4>
<div class="outline-text-4" id="text-org956fc67">
<p>
This package will bring down a sample project's source code.  You
all are a bit too young (my guess) but this program has a special
place in my heart: WordPerfect 8 (I actually used 6 I think).
</p>

<p>
We'll put this in your <span class="fname">~/cs2600</span> directory as well and
will take about 5MB of space.  So if you are on a system with
limited disk space (or a quota, like CPP), don't panic if you get
an error.  Just contact me and we'll work it out.
</p>

<pre class="example" id="org68feccd">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ # Quietly download the .zip file
$ wget -q https://github.com/taviso/wpunix/archive/refs/heads/main.zip
$ unzip -q main.zip        # Quietly unzip the file
$ rm main.zip              # Delete the downloaded .zip file
$ ls -1d wpunix-main       # Verify the new directory exists.
wpunix-main
$ cd -                     # cd back to where you were (optional)
</pre>
</div>
</div>
<div id="outline-container-org8114495" class="outline-4">
<h4 id="org8114495">Support Package 006</h4>
<div class="outline-text-4" id="text-org8114495">
<p>
This package contains a C library I wrote to provide ANSI
capabilities for your code in your terminal.  We'll put this
library in your <span class="fname">~/cs2600</span>, and <i>symlink</i>
<span class="fname">.h</span> and <span class="fname">.c</span> files directly inside
<span class="fname">~/cs2600</span>.  This way, your C programs can easily
include them.
</p>

<pre class="example" id="orgd30871f">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ unzip -q ~dagershman/cs2600/c_ansi.zip     # Quietly unzip the file
$ ln -s c_ansi/c_ansi.c           # Symbolically link the .h and .c
$ ln -s c_ansi/c_ansi.h           #   files for easy access.
$ ln -s c_ansi/winsize.c
$ ln -s c_ansi/winsize.h
</pre>

<p>
Inside the <span class="fname">~/cs2600/c_ansi</span> directory you'll find more
information including a <span class="fname">README</span> file
and a demo program.
</p>
</div>
</div>

<div id="outline-container-orgaed472c" class="outline-4">
<h4 id="orgaed472c">Support Package 007</h4>
<div class="outline-text-4" id="text-orgaed472c">
<p>
This package is just an input file used for one of the
challenges.  The file is called "student_records.txt" and will be
stored in <span class="fname">~/cs2600</span>:
</p>

<pre class="example" id="org4dc29ce">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ cp ~dagershman/cs2600/student_records.txt .
</pre>
</div>
</div>
<div id="outline-container-org2181b93" class="outline-4">
<h4 id="org2181b93">Support Package 008</h4>
<div class="outline-text-4" id="text-org2181b93">
<p>
This package is the source files from the pointer examples
provided in video form off canvas.
</p>

<p>
When done, files can be found in <span class="fname">~/cs2600/pointer_examples</span>:
</p>

<pre class="example" id="org9728dc1">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ unzip ~dagershman/cs2600/pointer_examples.zip
</pre>
</div>
</div>

<div id="outline-container-orgbb15eee" class="outline-4">
<h4 id="orgbb15eee">Support Package 009</h4>
<div class="outline-text-4" id="text-orgbb15eee">
<p>
This package is the source files from the file function examples
provided in video form off canvas.
</p>

<p>
When done, files can be found in <span class="fname">~/cs2600/lseek_example</span>:
</p>

<pre class="example" id="orgf1285aa">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ unzip ~dagershman/cs2600/lseek_example.zip
</pre>
</div>
</div>

<div id="outline-container-org0ed101f" class="outline-4">
<h4 id="org0ed101f">Support Package 010</h4>
<div class="outline-text-4" id="text-org0ed101f">
<p>
This package is the source files from the sorting single linked
list demo in the last two lectures on linked lists.
</p>

<p>
When done, files can be found in <span class="fname">~/cs2600/sll_sort_demo</span>:
</p>

<pre class="example" id="org9844584">
$ mkdir ~/cs2600 2&gt; /dev/null      # Make sure ~/cs2600 exists
$ cd ~/cs2600                      # Change into ~/cs2600
$ unzip ~dagershman/cs2600/sll_sort_demo.zip
</pre>
</div>
</div>
</div>

<div id="outline-container-orgfc7e0df" class="outline-3">
<h3 id="orgfc7e0df">Practice Exercises for <span class="cmd">Basic Commands</span> <a id="orgb9e5e86"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-orgfc7e0df">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org93b8d4d">Basic Commands</a></td></tr></table>
</p>

<p>
The following exercises presume you have logged into the CPP Unix system.
</p>
</div>

<div id="outline-container-org6a8422a" class="outline-4">
<h4 id="org6a8422a">Exercise #1</h4>
<div class="outline-text-4" id="text-org6a8422a">
<p>
Determine the precise CPU MHz for
processor 0.  Hint: You can find it in the <span class="fname">cpuinfo</span>
file located in <span class="fname">/proc</span>
</p>

<input type="button" onclick="toggle_solution('dcmdbasicss1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='dcmdbasicss1'>

<ol class="org-ol">
<li>Change directory into <span class="fname">/proc</span>: <span class="cmd">cd /proc</span></li>
<li>Display the content of <span class="fname">cpuinfo</span>: <span class="cmd">cat cpuinfo</span></li>
<li>Use the scrollbar to find <i>processor</i> 0 and then "CPU MHz"</li>
</ol>

<p>
It will be different for each student.
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-org935784e" class="outline-4">
<h4 id="org935784e">Exercise #2</h4>
<div class="outline-text-4" id="text-org935784e">
<p>
Determine if <i>GSSAPIAuthentication</i> is authorized in the Secure
Shell client.  Hint: Look at <span class="fname">ssh_config</span> located in
<span class="fname">/etc/ssh</span> 
</p>

<input type="button" onclick="toggle_solution('dcmdbasicss2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='dcmdbasicss2'>

<ol class="org-ol">
<li>Change directory into <span class="fname">/etc/ssh</span>: <span class="cmd">cd /etc/ssh</span></li>
<li>Display the contents of <span class="fname">ssh_config</span>: <span class="cmd">cat ssh_config</span></li>
<li>Use the scrollbars (if necessary) to find
<i>GSSAPIAuthentication</i>.</li>
</ol>

<p>
It should be set to <i>no</i>.
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-orgc4ffcf6" class="outline-4">
<h4 id="orgc4ffcf6">Exercise #3</h4>
<div class="outline-text-4" id="text-orgc4ffcf6">
<p>
Former exercise removed; need to create a new one
</p>

<input type="button" onclick="toggle_solution('dcmdbasicss3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='dcmdbasicss3'>

<p>
no solution until new exercise created.
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-orge0dac15" class="outline-4">
<h4 id="orge0dac15">Exercise #4</h4>
<div class="outline-text-4" id="text-orge0dac15">
<p>
Within your HOME directory create a file called
<span class="fname">backit</span> with the following content: 
</p>

<pre class="example" id="orgaf83c59">
echo "You entered  : $1"
echo "Backwards is : $(echo $1 | rev)"
</pre>

<p>
Then run the program by typing <span class="cmd">bash backit 'hello world'</span>.
</p>

<input type="button" onclick="toggle_solution('dcmdbasicss4');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='dcmdbasicss4'>

<ol class="org-ol">
<li>Be sure you're in your HOME directory: <span class="cmd">cd</span></li>
<li>Create the file with the content via <span class="cmd">cat > backit</span>.
Be sure to type <span class="cmd">control-d</span> on a new line when done.
(Note: Copy and paste should work.)</li>
<li>Run the command:</li>
</ol>

<pre class="example" id="org6548b7c">
instructor@deb12vm:/lib/gimp$ cd                   # Go HOME (on CPP, don't worry about what the current directory is)
instructor@deb12vm:~$ cat &gt; backit                 # Create the file
echo "You entered  : $1"
echo "Backwards is : $(echo $1 | rev)"             # Control-d on a new line
instructor@deb12vm:~$ bash backit 'Hello World'    # Run the program
You entered  : Hello World
Backwards is : dlroW olleH
instructor@deb12vm:~$
</pre>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-org5f75b4d" class="outline-4">
<h4 id="org5f75b4d">Exercise #5</h4>
<div class="outline-text-4" id="text-org5f75b4d">
<p>
Delete <span class="fname">backit</span> and verify you have no extra files.
</p>

<input type="button" onclick="toggle_solution('dcmdbasicss5');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='dcmdbasicss5'>

<pre class="example" id="org1030081">
instructor@deb12vm:~$ ls
backit  Some   Other   Files  or   Directories
instructor@deb12vm:~$ rm backit
instructor@deb12vm:~$ ls
Some   Other   Files  or   Directories
instructor@deb12vm:~$ 
</pre>

<p>
Note: you may have other directores now based on examples done in
class.
</p>

<p>
</div>
</p>
</div>
</div>
</div>
<div id="outline-container-org8e48153" class="outline-3">
<h3 id="org8e48153">Practice Exercises for <span class="cmd">ls</span> <a id="org3a179d6"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org8e48153">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#orgfb47379">ls</a></td></tr></table>
</p>
</div>
<div id="outline-container-orgba332ae" class="outline-4">
<h4 id="orgba332ae">Preparation</h4>
<div class="outline-text-4" id="text-orgba332ae">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 001</a>.</li>
<li>Then, change <i>into</i> the directory with <span class="cmd">cd sp001</span>.</li>
</ol>
</div>
</div>

<div id="outline-container-orgf9ef52b" class="outline-4">
<h4 id="orgf9ef52b">Exercise #1</h4>
<div class="outline-text-4" id="text-orgf9ef52b">
<p>
List the files in 4 different ways:
</p>

<ol class="org-ol">
<li>Use <span class="cmd">ls</span> by itself.</li>
<li>View all files including hidden files.</li>
<li>Provide a long listing (with more information).</li>
<li>List the files to include any special characters after the entries.</li>
</ol>

<input type="button" onclick="toggle_solution('ls1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='ls1'>

<ol class="org-ol">
<li><span class="cmd">ls</span></li>
<li><span class="cmd">ls -a</span></li>
<li><span class="cmd">ls -a</span> or <span class="cmd">ls -al</span>  # 'a' is optional; order
of 'a' and 'l' does not matter.</li>
<li><span class="cmd">ls -alF</span>  # 'a' and 'l' are optional.</li>
</ol>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-orgca01d6b" class="outline-3">
<h3 id="orgca01d6b">Practice Exercises for <span class="cmd">touch</span> <a id="org2b2d2ba"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-orgca01d6b">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org4d49987">touch</a></td></tr></table>   
</p>
</div>

<div id="outline-container-orgec0ccbd" class="outline-4">
<h4 id="orgec0ccbd">Preparation</h4>
<div class="outline-text-4" id="text-orgec0ccbd">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 001</a>.</li>
<li>Then, change <i>into</i> the directory with <span class="cmd">cd sp001</span>.</li>
</ol>
</div>
</div>

<div id="outline-container-org2e20ba4" class="outline-4">
<h4 id="org2e20ba4">Exercise #1</h4>
<div class="outline-text-4" id="text-org2e20ba4">
<p>
Change the last modified time of <span class="fname">sample.c</span> to the
current time/date.
</p>

<input type="button" onclick="toggle_solution('touch1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='touch1'>

<p>
First, it may help to list <span class="fname">sample.c</span> and take note of
the time stamp.  Then:
</p>

<pre class="example" id="org4aa38fb">
touch sample.c
</pre>

<p>
Now list <span class="fname">sample.c</span> again to verify the time stamp updated.
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-orgba9350d" class="outline-4">
<h4 id="orgba9350d">Exercise #2</h4>
<div class="outline-text-4" id="text-orgba9350d">
<p>
Create two more files <span class="fname">file1.txt</span> and <span class="fname">file2.txt</span>.
</p>

<input type="button" onclick="toggle_solution('touch2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='touch2'>

<p>
Remember, the <span class="cmd">touch</span> command will create the file if it
does not already exist:
</p>

<pre class="example" id="org9aab3d4">
touch file1.txt
touch file2.txt
</pre>

<p>
If you'd like, you can do both files at the same time:
</p>

<pre class="example" id="orgfad16bc">
touch file1.txt file2.txt
</pre>

<p>
Now list the files to verify they've been created.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org04ea6b4" class="outline-3">
<h3 id="org04ea6b4">Practice Exercises for <span class="cmd">cat</span> <a id="org124dc0b"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org04ea6b4">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#orgafaae31">cat</a></td></tr></table>
</p>
</div>

<div id="outline-container-orga16cab0" class="outline-4">
<h4 id="orga16cab0">Preparation</h4>
<div class="outline-text-4" id="text-orga16cab0">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 001</a>.</li>
<li>Then, change <i>into</i> the directory with <span class="cmd">cd sp001</span>.</li>
</ol>
</div>
</div>

<div id="outline-container-org89e8d75" class="outline-4">
<h4 id="org89e8d75">Exercise #1</h4>
<div class="outline-text-4" id="text-org89e8d75">
<p>
View what's in a couple of files:
</p>

<ul class="org-ul">
<li>Display <span class="fname">sample2.c</span> to the screen.</li>
<li>Display <span class="fname">sample3.c</span> to the screen with line numbers.</li>
</ul>

<input type="button" onclick="toggle_solution('cat1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='cat1'>

<pre class="example" id="org32e6031">
cat sample2.c
cat -n sample3.c
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org8e44f83" class="outline-3">
<h3 id="org8e44f83">Practice Exercises for <span class="cmd">less</span> <a id="org2237e22"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org8e44f83">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org1cb514d">less</a></td></tr></table>
</p>
</div>

<div id="outline-container-orge42bdb3" class="outline-4">
<h4 id="orge42bdb3">Preparation</h4>
<div class="outline-text-4" id="text-orge42bdb3">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 001</a>.</li>
<li>Then, change <i>into</i> the directory with <span class="cmd">cd sp001</span>.</li>
</ol>
</div>
</div>

<div id="outline-container-org4727281" class="outline-4">
<h4 id="org4727281">Exercise #1</h4>
<div class="outline-text-4" id="text-org4727281">
<p>
How many times does "initscr" exist in <span class="fname">code.c</span>?
</p>

<input type="button" onclick="toggle_solution('less1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='less1'>

<p>
Answer: 2
</p>

<p>
At this point in the class, this is a manual effort.  However, if
we just <span class="cmd">cat</span> <span class="fname">code.c</span> to the screen, the code
may scroll off the screen.  So, we'll use <span class="cmd">less</span> to help.
</p>

<pre class="example" id="org4c57d36">
less code.c
</pre>

<p>
Once in <span class="cmd">less</span>, use the '/' key to do a search for
"initscr".  Then, use 'n' to count how many times "initscr"
exists.
</p>

<p>
Later in the course we'll learn much better ways to do this.
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-org35aba74" class="outline-4">
<h4 id="org35aba74">Exercise #2</h4>
<div class="outline-text-4" id="text-org35aba74">
<p>
Use <span class="cmd">less</span> to view to contents of <span class="fname">code.c</span>.
Once there, scroll up and down and notice what happens. Then, go
back to the top and search for the string "in", using 'n' to move
to the <i>next</i> match, several times.  What happens?
</p>

<p>
Now repeat the process with <span class="fname">sample.c</span>.
</p>

<input type="button" onclick="toggle_solution('less2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='less2'>

<p>
When you view <span class="fname">code.c</span>, because it fills more than 1
screenful you can scroll as you normally would expect.  Searching
for "in" also behaves as normal.
</p>

<p>
However, <span class="fname">sample.c</span> does not fill a screen.  So when you scroll,
nothing happens*.  When you search, you still get current matches
moved to the top of the screen as normal.
</p>

<p>
*On my own version of <span class="cmd">less</span>, initially viewing
<span class="fname">sample.c</span> put the code at the <i>bottom</i> of the screen.
After pushing cursor-up, or page-up, it bounced to the top of the
screen and THEN would not scroll at all.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org757f797" class="outline-3">
<h3 id="org757f797">Practice Exercises for <span class="cmd">man</span> <a id="orgb204a90"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org757f797">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org231e710">man</a></td></tr></table>
</p>
</div>

<div id="outline-container-orgfe2b19b" class="outline-4">
<h4 id="orgfe2b19b">Exercise #1</h4>
<div class="outline-text-4" id="text-orgfe2b19b">
<p>
How many sections of the Unix manual contain <span class="cmd">stat</span>?
</p>

<input type="button" onclick="toggle_solution('man1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='man1'>

<pre class="example" id="org72557e1">
$ man -f stat
stat (1)             - display file or file system status
stat (2)             - get file status
stat (3p)            - get file status
stat (3type)         - file status
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org776a0b0" class="outline-3">
<h3 id="org776a0b0">Practice Exercises for <span class="cmd">File Globbing</span> <a id="orgdbd4b3d"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org776a0b0">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org8a23fe5">File Globbing</a></td></tr></table>
</p>
</div>
<div id="outline-container-org491a851" class="outline-4">
<h4 id="org491a851">Preparation</h4>
<div class="outline-text-4" id="text-org491a851">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 001</a>.</li>
<li>Then, change <i>into</i> the directory with <span class="cmd">cd sp001</span>.</li>
</ol>
</div>
</div>

<div id="outline-container-org03e13a5" class="outline-4">
<h4 id="org03e13a5">Exercise #1</h4>
<div class="outline-text-4" id="text-org03e13a5">
<p>
List all files which contain an 'm'.
</p>

<input type="button" onclick="toggle_solution('globbing1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='globbing1'>

<p>
Since we said <i>contain</i>, there can be any number of characters
before 'm' or after.  The question also doesn't specify upper or
lower case, so we should account for both.
</p>

<pre class="example" id="orge01a9fc">
ls *[mM]*
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org0ef5381" class="outline-3">
<h3 id="org0ef5381">Practice Exercises for <span class="cmd">tmux</span> <a id="org7613b80"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org0ef5381">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#orgccb60c8">Tmux</a></td></tr></table>
</p>
</div>

<div id="outline-container-orga050771" class="outline-4">
<h4 id="orga050771">Exercise #1</h4>
<div class="outline-text-4" id="text-orga050771">
<p>
Create a <span class="cmd">tmux</span> session which looks like this:
</p>


<div id="orgc7377c1" class="figure">
<p><img src="support_files/practice_02_img1.png" alt="practice_02_img1.png" />
</p>
</div>

<input type="button" onclick="toggle_solution('tmux1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='tmux1'>

<p>
To create this session, first you must notice a few things:
</p>
<ul class="org-ul">
<li>The bottom 2 panes are in a single bottom pane.  In other
words, the screen was split in upper/lower halves, <i>and then</i>
the bottom half was split.</li>
<li>The name of the window was set.</li>
<li>The time will obviously be different for you than in this
picture.</li>
</ul>

<p>
So the steps are:
</p>

<ol class="org-ol">
<li>Launch <span class="cmd">tmux</span></li>
<li><span class="cmd">control-b </span> will prompt you for a new window name.
Delete "bash" and put the new name <i>CPP Unix</i>, then press &lt;ENTER&gt;.</li>
<li>Next, we split the screen in half to get a top and bottom
pane.  Do this with <span class="cmd">control-b "</span>.  This should have
your cursor in the bottom pane.</li>
<li>Next, split the bottom pane in half with <span class="cmd">control-b %</span>.  This should leave your cursor in the right-bottom pane.</li>
<li>To display the clock, issue <span class="cmd">control-b t</span>.</li>
<li>Now, let's move to the top pane.  Hit <span class="cmd">control-b o</span>
until the cursor is in the top pane.</li>
<li>Next, enter the <span class="cmd">echo "hello world"</span> command and press &lt;ENTER&gt;.</li>
<li>Finally, let's move down to the bottom-left pane by hitting
<span class="cmd">control-b o</span> again until the cursor is there.</li>
</ol>

<p>
</div>    
</p>
</div>
</div>
</div>

<div id="outline-container-org3003226" class="outline-3">
<h3 id="org3003226">Practice Exercises for <span class="cmd">mkdir</span> <a id="org7cc474b"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org3003226">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org01e3279">mkdir</a></td></tr></table>
</p>
</div>

<div id="outline-container-org231c028" class="outline-4">
<h4 id="org231c028">Exercise #1</h4>
<div class="outline-text-4" id="text-org231c028">
<p>
<i>From within your home directory</i>, create the following directory
structure: 
</p>

<pre class="example" id="org647ef6c">
practice04
├── dir1
│   ├── subdir1
│   ├── subdir2
│   └── subdir3
└── dir2
    ├── subdir1
    ├── subdir2
    └── subdir3
</pre>

<p>
Then use <span class="cmd">tree practice04</span> to verify.
</p>

<input type="button" onclick="toggle_solution('mkdir1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mkdir1'>

<p>
There are a multitude of ways to accomplish this.  Here is just
one:
</p>

<pre class="example" id="org52b2d25">
$ mkdir -p practice04/dir1/subdir1
$ # Now, since 'practice/dir1' has been created, we only need the 
$ #  final component made for the others, so notice we leave off "-p"
$ mkdir practice04/dir1/subdir2
$ mkdir practice04/dir1/subdir3

$ # Do the same for "dir2"
$ mkdir -p practice04/dir2/subdir1
$ mkdir practice04/dir2/subdir2
$ mkdir practice04/dir2/subdir3
</pre>

<p>
Now verify with <span class="cmd">tree</span>:
</p>

<pre class="example" id="org82aeeab">
$ tree practice04
practice04
├── dir1
│   ├── subdir1
│   ├── subdir2
│   └── subdir3
└── dir2
    ├── subdir1
    ├── subdir2
    └── subdir3

8 directories, 0 files
$
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org86475c5" class="outline-3">
<h3 id="org86475c5">Practice Exercises for <span class="cmd">Editing a File</span> <a id="orgeeb6a76"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org86475c5">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org74360ba">vi</a>, <a href="#org2bcf0b4">emacs</a>, <a href="#org210e628">nano</a></td></tr></table>
</p>
</div>
<div id="outline-container-org8757599" class="outline-4">
<h4 id="org8757599">Preparation</h4>
<div class="outline-text-4" id="text-org8757599">
<p>
These exercises should be done after the <a href="#org7cc474b">mkdir</a> exercise(s).
</p>
</div>
</div>

<div id="outline-container-org4747b0f" class="outline-4">
<h4 id="org4747b0f">Exercise #1</h4>
<div class="outline-text-4" id="text-org4747b0f">
<p>
Create a file in <span class="fname">practice04/dir1/subdir2</span> called
<span class="fname">myscript.bash</span> and have it contain:
</p>

<pre class="example" id="org456bd99">
echo "Hello $USER!"
echo ""
echo "The current date/time is $(date)."
echo "You are logged onto $HOSTNAME along with $(who | awk '{print $1};' | sort -u | wc -l) users."
echo ""
</pre>

<p>
Then run the script via <span class="cmd">bash myscript.bash</span>.
</p>

<input type="button" onclick="toggle_solution('mkfile1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mkfile1'>

<p>
Again, we'll assume you've just logged into the CPP system.
</p>

<p>
First, we need to create the file so let's navigate down into
<span class="fname">practice04/dir1/subdir2</span>.
</p>

<pre class="example" id="org05472af">
cd practice04/dir1/subdir2
</pre>

<p>
Next, we need to create the <span class="fname">myscript.bash</span> file.  Use
which ever editor you'd like:
</p>

<pre class="example" id="org41005f1">
emacs myscript.bash
</pre>

<p>
Then type in and save the script (the collection of commands in a
file is called a <i>script</i>).
</p>

<p>
Now we can run it:
</p>

<pre class="example" id="org0e3b082">
$ bash myscript.bash
Hello XXXXXXXX!

The current date/time is Wed Feb  1 14:53:47 PST 2023.
You are logged onto YYYYYYYY along with NN users.

$
</pre>

<p>
Note:
</p>
<ul class="org-ul">
<li>"XXXXXXXX" should be your BroncoName or your Deb12VM username</li>
<li>"YYYYYYYY" will be your VM hostname or one of the CPP servers
<i>login-01</i> or <i>login-02</i>.</li>
<li>NN will be how many other users are current logged on to that
system.</li>
</ul>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-org6901e18" class="outline-4">
<h4 id="org6901e18">Exercise #2</h4>
<div class="outline-text-4" id="text-org6901e18">
<p>
Navigate to <span class="fname">practice04/dir2/subdir1</span> and create the 
same script as in exercise #1 but use another editor.
</p>

<input type="button" onclick="toggle_solution('mkfile2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mkfile2'>

<p>
First, since we are in <span class="fname">practice04/dir1/subdir2</span>, we
can get to the new destination using a <i>absolute path</i>:
</p>

<pre class="example" id="org8709b37">
$ cd /user/BRONCONAME/practice04/dir2/subdir1 
</pre>

<p>
or via a <i>relative path</i>:
</p>

<pre class="example" id="org650e81b">
$ cd ../../dir2/subdir1    
</pre>

<p>
Notice how we "back up" from <span class="fname">subdir2</span> into
<span class="fname">dir1</span> via <span class="fname">..</span>.
</p>

<p>
Then the second <span class="fname">..</span> will put us into
<span class="fname">practice04</span>.
</p>

<p>
So from there, we just need to move down into
<span class="fname">dir2/subdir1</span>.
</p>

<p>
At this point, we just launch the editor (a different one from
exercise 1) and do the same things.
</p>

<p>
</div>           
</p>
</div>
</div>
</div>

<div id="outline-container-org99539c0" class="outline-3">
<h3 id="org99539c0">Practice Exercises for <span class="cmd">wc</span> <a id="orgfb6c2bb"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org99539c0">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org7ef11ba">wc</a></td></tr></table>   
</p>
</div>

<div id="outline-container-org209e4fa" class="outline-4">
<h4 id="org209e4fa">Preparation</h4>
<div class="outline-text-4" id="text-org209e4fa">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 002</a>.</li>
</ol>
</div>
</div>


<div id="outline-container-org04013c6" class="outline-4">
<h4 id="org04013c6">Exercise #1</h4>
<div class="outline-text-4" id="text-org04013c6">
<p>
How many lines are in the <span class="fname">words</span> file?
</p>

<input type="button" onclick="toggle_solution('wc1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='wc1'>

<p>
To get the lines, use the <span class="cmd">-l</span> switch.  
</p>

<pre class="example" id="orgef259e7">
$ wc -l ~/cs2600/words
104334 /home/instructor/cs2600/words
</pre>

<p>
</div>
</p>
</div>
</div>
<div id="outline-container-orgbfdb6b4" class="outline-4">
<h4 id="orgbfdb6b4">Exercise #2</h4>
<div class="outline-text-4" id="text-orgbfdb6b4">
<p>
How many characters are in a long listing of your home directory?
</p>

<input type="button" onclick="toggle_solution('wc2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='wc2'>

<p>
The numeric answer to this depends on your unique environment,
<i>but</i> the solution is the same.
</p>

<pre class="example" id="orgc1be510">
$ # First go to our home directory
$ cd
$ pwd
/home/instructor

$ # Next, get a long listing (at least -l is needed but I'll use -alF as usual)
$ ls -laF
{to long to include here}

$ # Finally, to get the character count, we need to provide the long listing
$ #   to the 'wc' command with the -c switch.  We can do this many ways.

$ # For example, we could save the output to file and then count the
$ #   characters in the file.
$ ls -alF &gt; long_listing.txt
$ wc -c long_listing.txt           # BTW, a long listing of "long_listing.txt" would also work.
3152 long_listing.txt
$ # And now we should delete the temporary file.
$ rm long_listing.txt

$ # A simpler approach would be to use the pipe '|'
$ ls -alF | wc -c
3152
$

$ # Notice how when using the pipe, there is no file name.  This will come
$ #   in very handy later!
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org5b3e68b" class="outline-3">
<h3 id="org5b3e68b">Practice Exercises for <span class="cmd">grep</span> <a id="orgaad43c2"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org5b3e68b">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org0c22049">grep</a>, <a href="#org836e740">grep -i</a>, <a href="#org51a4fa2">grep -v</a>, <a href="#org9e9593d">grep multiple switches</a>, <a href="#org499fad0">grep -c</a>, <a href="#org243c695">grep -A</a>, <a href="#orga33909e">grep -B</a>, <a href="#org926ce1d">grep patterns</a></td></tr></table>
</p>
</div>

<div id="outline-container-org94035db" class="outline-4">
<h4 id="org94035db">Preparation</h4>
<div class="outline-text-4" id="text-org94035db">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 002</a>.</li>
<li>Please implement <a href="#org11b62ee">Support Package 003</a>.</li>
<li>Please implement <a href="#org11b62ee">Support Package 004</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-orgc28d8c0" class="outline-4">
<h4 id="orgc28d8c0">Exercise #1</h4>
<div class="outline-text-4" id="text-orgc28d8c0">
<p>
Is there a city in the United States named <i>Elizabeth</i>?  How about <i>Samuel</i>?
</p>

<input type="button" onclick="toggle_solution('grep1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep1'>

<p>
For now, let's just focus on the simplest use of <span class="cmd">grep</span>
by searching for the names and focusing on the letters <i>with</i>
case-sensitivity.
</p>

<p>
For <i>Elizabeth</i>:
</p>
<pre class="example" id="org1055819">
$ grep Elizabeth ~/cs2600/worldcities.csv 
"Elizabeth","Elizabeth","40.6658","-74.1913","United States","US","USA","New Jersey","","135665","1840003613"
"Elizabethtown","Elizabethtown","37.7031","-85.8773","United States","US","USA","Kentucky","","77770","1840013218"
"Elizabeth City","Elizabeth City","36.2942","-76.2360","United States","US","USA","North Carolina","","18570","1840013315"
"Elizabethton","Elizabethton","36.3367","-82.2370","United States","US","USA","Tennessee","","14375","1840013314"
"Elizabethtown","Elizabethtown","40.1533","-76.5990","United States","US","USA","Pennsylvania","","11805","1840003716"
"Elizabethtown-Kitley","Elizabethtown-Kitley","44.7000","-75.8833","Canada","CA","CAN","Ontario","","9545","1124001450"
"Cape Elizabeth","Cape Elizabeth","43.5891","-70.2380","United States","US","USA","Maine","","9519","1840052639"
"Black River","Black River","18.0257","-77.8509","Jamaica","JM","JAM","Saint Elizabeth","admin","4261","1388022504"
$
</pre>

<p>
The city name is the first field and the country is in the 5th.
As you can see the first line of results show us <i><b>YES</b></i>, there is
a city named <i>Elizabeth</i> in the US.
</p>

<p>
How about <i>Samuel</i> (with an 'e'):
</p>
<pre class="example" id="orgdfcc96e">
$ grep Samuel ~/cs2600/worldcities.csv 
$
</pre>

<p>
So the answer is <i><b>no</b></i>.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org4c8b4b3" class="outline-4">
<h4 id="org4c8b4b3">Exercise #2</h4>
<div class="outline-text-4" id="text-org4c8b4b3">
<p>
Is there a city named <i>Lagos</i> in the United States?
</p>

<input type="button" onclick="toggle_solution('grep2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep2'>

<p>
Using the simple approach we get:
</p>
<pre class="example" id="orgb264ca6">
$ grep Lagos ~/cs2600/worldcities.csv 
"Lagos","Lagos","6.4550","3.3841","Nigeria","NG","NGA","Lagos","minor","16637000","1566593751"
"Mushin","Mushin","6.5333","3.3500","Nigeria","NG","NGA","Lagos","minor","935400","1566329100"
[...30 more lines...]
"Hualaihué","Hualaihue","-42.1000","-72.4167","Chile","CL","CHL","Los Lagos","","8720","1152075609"
"Chonchi","Chonchi","-42.6219","-73.7742","Chile","CL","CHL","Los Lagos","","5632","1152428145"
$
</pre>

<p>
That's a lot of output. Since we're focused on the <i>United States</i>,
let's feed (pipe) that output into another <span class="cmd">grep</span> for
<i>United States</i>:
</p>
<pre class="example" id="orgd785ed6">
$ grep Lagos ~/cs2600/worldcities.csv | grep 'United States'
$
</pre>

<p>
First, notice we needed quotes to include the space between
'United' and 'States'.
</p>

<p>
Second, the answer is obviously <i><b>no</b></i>.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org32e74ca" class="outline-4">
<h4 id="org32e74ca">Exercise #3</h4>
<div class="outline-text-4" id="text-org32e74ca">
<p>
How did we know there were 30 more lines of the output in the
previous exercise?
</p>

<input type="button" onclick="toggle_solution('grep3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep3'>

<p>
Since I displayed 4 lines, we simply subtract 4 from the total
number of lines of output. So the real question is how did we get
the number of lines of output.  That was simply the use of the
<span class="cmd">-c</span> switch:
</p>

<pre class="example" id="orge3021fe">
$ grep -c Lagos ~/cs2600/worldcities.csv
34
$
</pre>

<p>
So 34-4 was <i><b>30</b></i>.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org1ddbda7" class="outline-4">
<h4 id="org1ddbda7">Exercise #4</h4>
<div class="outline-text-4" id="text-org1ddbda7">
<p>
How many lines match <i>Lagos</i>, but this time ignore case?
</p>

<input type="button" onclick="toggle_solution('grep4');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep4'>

<p>
Simple, just use the <span class="cmd">-i</span> switch for case-INsensitivity.
BE CAREFUL!  The question asks for the number of lines, <i>not</i> the
actual results!
</p>
<pre class="example" id="org9384621">
$ grep -c -i lagos ~/cs2600/worldcities.csv 
36
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org4918082" class="outline-4">
<h4 id="org4918082">Exercise #5</h4>
<div class="outline-text-4" id="text-org4918082">
<p>
So we found 34 <i>Lagos</i> but 36 <i>Lagos</i> when ignoring case.  What
are the two lines which don't match <i>Lagos</i>?
</p>

<input type="button" onclick="toggle_solution('grep5');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep5'>

<p>
This is basically asking us to find <i>Lagos</i> but all lower-case.
So case-<i>sensitive</i> but lower-case:
</p>
<pre class="example" id="org8cfdad1">
$ grep lagos ~/cs2600/worldcities.csv 
"La Llagosta","La Llagosta","41.5156","2.1928","Spain","ES","ESP","Catalonia","","13169","1724195852"
"Llagostera","Llagostera","41.8292","2.8933","Spain","ES","ESP","Catalonia","","9208","1724471622"
$
</pre>

<p>
As you can see, we really <i>did not</i> find any cities names Lagos in
these results.  This is because we've been searching using simple
strings, not <i>patterns</i> (regular expressions).  We'll revisit this shortly.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-orge721b40" class="outline-4">
<h4 id="orge721b40">Exercise #6</h4>
<div class="outline-text-4" id="text-orge721b40">
<p>
Similar to the last exercise, we found 34 <i>Lagos</i> but 36 <i>Lagos</i> when ignoring case.  What
are the two lines which don't match <i>Lagos</i>?
</p>

<p>
However, this time, <i>use the results of the 36 matches</i> to find
the lines which are not <i>Lagos</i>.
</p>

<input type="button" onclick="toggle_solution('grep6');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep6'>

<p>
Ok, Prof G is being sneaky *******.  The solution to this is first
get the 36 results:
</p>
<pre class="example" id="org70c4457">
$ grep -i lagos ~/cs2600/worldcities.csv
"Lagos","Lagos","6.4550","3.3841","Nigeria","NG","NGA","Lagos","minor","16637000","1566593751"
"Mushin","Mushin","6.5333","3.3500","Nigeria","NG","NGA","Lagos","minor","935400","1566329100"
[...32 more lines...]
"Hualaihué","Hualaihue","-42.1000","-72.4167","Chile","CL","CHL","Los Lagos","","8720","1152075609"
"Chonchi","Chonchi","-42.6219","-73.7742","Chile","CL","CHL","Los Lagos","","5632","1152428145"
$
</pre>

<p>
And now pipe those into a search for <i>Lagos</i>, case-sensitive but
show the "anti-matches":
</p>
<pre class="example" id="org8325195">
$ grep -i lagos ~/cs2600/worldcities.csv | grep -v Lagos
"La Llagosta","La Llagosta","41.5156","2.1928","Spain","ES","ESP","Catalonia","","13169","1724195852"
"Llagostera","Llagostera","41.8292","2.8933","Spain","ES","ESP","Catalonia","","9208","1724471622"
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org34def63" class="outline-4">
<h4 id="org34def63">Exercise #7</h4>
<div class="outline-text-4" id="text-org34def63">
<p>
In the previous exercise, I called myself a *******.  What
possible words could that be?
</p>

<input type="button" onclick="toggle_solution('grep7');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep7'>

<p>
So here we start pulling in the concept of patterns, or <i>regular
expressions</i> (RE for short).  First, we're going to simply search the
<span class="fname">~/cs2600/words</span> file for words of length 7:
</p>

<p>
Our first try may be:
</p>
<pre class="example" id="orgefd64c5">
$ grep '.......' ~/cs2600/words | head -n2
Aachen's
Aaliyah
[...80075 more lines...]
émigrés
étude's
$
</pre>

<p>
But that is a TON of answers and if you look at them, some are
more than 7 characters. Why?
</p>

<p>
Because our RE will match 7 chars.  Words with 8 chars have 7
chars.  Words with 9 chars have 7 chars.  However, words of 6
chars or less will not match.  So while we've filtered out smaller
words, we now need to filter out longer ones.
</p>

<p>
We can do this by "anchoring", or matching the start <i>and</i> end of
the lines:
</p>

<pre class="example" id="org921ab4c">
$ grep '^.......$' ~/cs2600/words | head -n2
Aaliyah
Aaron's
[...15364 more lines...]
émigrés
étude's
$
</pre>

<p>
Ok&#x2026;better.  Can we hone down the results a bit more?  Probably.
</p>

<p>
Let's think about this a bit:
</p>
<ol class="org-ol">
<li>In the sentence '*******' was preceded by 'a'.  So
it's probably a noun, not a name like <i>Aaliya</i>.</li>
<li>Again, since the word is preceded by an 'a', it's probably not a
possessive (i.e contains and apostrophe, i.e. <i>etude's</i>)</li>
<li>Prof G doesn't seem to European, so accented characters are
probably not part of the word either (maybe, but we can make the
assumption for now).</li>
</ol>


<p>
So how do these things translate to a pattern?
</p>
<ol class="org-ol">
<li>All lower case</li>
<li>Exclude apostrophes, in fact&#x2026;</li>
<li>Probably safe to exclude anything besides 'a' through 'z'.</li>
</ol>

<p>
Time to build our filter:
</p>
<pre class="example" id="org058ba82">
$ grep  '^[a-z][a-z][a-z][a-z][a-z][a-z]$' ~/cs2600/words | head -n2
abacus
abased
[...7285 more lines...]
émigré
études
$
</pre>

<p>
Better, but why are the accented characters still getting
included??
</p>

<p>
The answer lies in character encoding (which we really don't talk
about in this class).  So let's feed our output to another grep
explicitly blocking 'é' and see what we get:
</p>

<pre class="example" id="org1dbbe76">
$ grep  '^[a-z][a-z][a-z][a-z][a-z][a-z]$' ~/cs2600/words | grep -v é 
abacus
abased
[...7267 more lines...]
zoomed
zygote
$
</pre>

<p>
Well, still a lot but as you can see we filtered out at least 1
accented char.
</p>

<p>
There are ways to do more, but we've not learned them in this
class.
</p>

<p>
Another way would be to explicitly list the chars we want (notice
I use <span class="cmd">-c</span>):
</p>
<pre class="example" id="orgec2c14b">
$ grep -c '^[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz]$' ~/cs2600/words
7267
$
</pre>

<p>
You see in the <i>character encoding</i> of the system (i.e. UTF-8),
accented chars are within the range of [a-z], but by listing them
explicitly I leave <i>out</i> the accented versions.
</p>

<p>
As for the solution to the question&#x2026;good luck figuring out which
of the 7267 I meant. 😂
</p>

<p>
</div>
</p>
</div>
</div>

<div id="outline-container-org5f8c7e2" class="outline-4">
<h4 id="org5f8c7e2">Exercise #8</h4>
<div class="outline-text-4" id="text-org5f8c7e2">
<p>
Find all the video titles in the <span class="fname">~/cs2600/videos.xml</span>.
</p>

<input type="button" onclick="toggle_solution('grep8');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep8'>

<p>
If you open the <span class="fname">~/cs2600/videos.xml</span> file in a text
editor you can browse the file to get an idea of the contents.
Everyone's will be different, so I can't really show it here, but
find some lines where the title of the videos are:
</p>

<p>
For example, I have:
</p>

<pre class="example" id="org6b895c1">
&lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
</pre>

<p>
So let's try filtering for <i>&lt;title&gt;</i>:
</p>
<pre class="example" id="orgdc3e665">
$ grep '&lt;title&gt;' ~/cs2600/videos.xml
 &lt;title&gt;Mark Rober&lt;/title&gt;
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
  &lt;title&gt;What happens if you don't use Airplane mode?&lt;/title&gt;
  &lt;title&gt;This Goalie Cheated With His Water Bottle&lt;/title&gt;
  [...I have more lines...}
$ 
</pre>

<p>
Ok, not bad, but notice the first one <i>is not</i> a video title!  Can
we find another way to get only video titles? (We technically
haven't covered <span class="cmd">head</span> or <span class="cmd">tail</span> at this point
in the lecture, so I'm going to avoid them for now.)
</p>

<p>
If you notice, <i>after</i> the channel information, there are other
lines which contain 'yt:video' associated with videos only:
</p>

<pre class="example" id="org0726404">
$ grep 'yt:video' ~/cs2600/videos.xml
  &lt;id&gt;yt:video:fxD5-fcLJ2k&lt;/id&gt;
  &lt;yt:videoId&gt;fxD5-fcLJ2k&lt;/yt:videoId&gt;
  &lt;id&gt;yt:video:DsZe6TCH3A4&lt;/id&gt;
  &lt;yt:videoId&gt;DsZe6TCH3A4&lt;/yt:videoId&gt;
  &lt;id&gt;yt:video:fr49XGgewao&lt;/id&gt;
  &lt;yt:videoId&gt;fr49XGgewao&lt;/yt:videoId&gt;
  [...I have more lines...]
$
</pre>

<p>
Now, looking at the output and finding those lines in the XML
file, we'll see where they came from.  For me:
</p>

<pre class="example" id="org18d9286">
&lt;entry&gt;
   &lt;id&gt;yt:video:fxD5-fcLJ2k&lt;/id&gt;
   &lt;yt:videoId&gt;fxD5-fcLJ2k&lt;/yt:videoId&gt;
   &lt;yt:channelId&gt;UCY1kMZp36IQSyNx_9h4mpCg&lt;/yt:channelId&gt;
   &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
   &lt;link rel="alternate" href="https://www.youtube.com/watch?v=fxD5-fcLJ2k"/&gt;
</pre>

<p>
With this information, we can tell we <i>should</i> be able to grep
specifically for 'yt:videoId' and grab the following 2 lines to
get the video titles:
</p>

<pre class="example" id="orgc41329f">
$ grep -A 2 'yt:videoId' ~/cs2600/videos.xml                           
  &lt;yt:videoId&gt;fxD5-fcLJ2k&lt;/yt:videoId&gt;
  &lt;yt:channelId&gt;UCY1kMZp36IQSyNx_9h4mpCg&lt;/yt:channelId&gt;
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;  
--                                                                    
  &lt;yt:videoId&gt;DsZe6TCH3A4&lt;/yt:videoId&gt;
  &lt;yt:channelId&gt;UCY1kMZp36IQSyNx_9h4mpCg&lt;/yt:channelId&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
-- 
[...I have more lines...]
</pre>

<p>
Great!  Now does this give us exactly what we're looking for..not
yet.  Let's see if we can drill down more.  Remember, we have
<i>pipes</i> in our toolbox!
</p>

<p>
So now, let's take the output and using pipes/greps, let's trim
off the 'yt:videoId' lines, 'yt:channelId' lines, and the '&#x2013;'
lines:
</p>

<pre class="example" id="org205fa05">
$ grep -A 2 'yt:videoId' ~/cs2600/videos.xml | grep -v 'yt:videoId' | grep -v 'yt:channelId' | grep -v '--'
Usage: grep [OPTION]... PATTERNS [FILE]...
Try 'grep --help' for more information.
$
</pre>

<p>
What??? This error is a result of the dash '-' having special
meaning to Regular Expressions.  So we'll need to <i>escape</i> them
out for it to work:
</p>
<pre class="example" id="org772a21e">
$ grep -A 2 'yt:videoId' ~/cs2600/videos.xml | grep -v 'yt:videoId' | grep -v 'yt:channelId' | grep -v '\-\-'
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
  &lt;title&gt;What happens if you don't use Airplane mode?&lt;/title&gt;
  &lt;title&gt;This Goalie Cheated With His Water Bottle&lt;/title&gt;
  [...I have more lines...]
$
</pre>

<p>
And done, right?
</p>

<p>
Well, could have done better?  Actually yes.  We could have just
filtered for &lt;title&gt;:
</p>

<pre class="example" id="org3d98330">
$ grep -A 2 'yt:videoId' ~/cs2600/videos.xml | grep title
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
  &lt;title&gt;What happens if you don't use Airplane mode?&lt;/title&gt;
  [...I have more lines...]
$
</pre>

<p>
So why did I take the "long way"?  Because as you get familiar
with these tool you'll learn there isn't a <i>right</i> or <i>wrong</i>
way.  And often, you'll find one solution and get an idea for
another.  Remember, v0.0 is not always going to be your best
work. 
</p>

<p>
Are there other ways to do this?  Absolutely, but it requires
material we've not covered, or at least, not covered <i>yet</i>.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org567ec15" class="outline-4">
<h4 id="org567ec15">Exercise #9</h4>
<div class="outline-text-4" id="text-org567ec15">
<p>
For this next exercies, we're going to pull in more tools we've
gone over.
</p>

<p>
Using the <span class="fname">worldcities.csv</span> file, show the country a
city resides in.  Ignore case-sensitivity in the city.
</p>

<input type="button" onclick="toggle_solution('grep9');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep9'>

<p>
If you look at that file, you see the city is in the first column
and country is in the 5th.  So we're going to <i>filter</i> on the
first and then extract the 5th.
</p>

<p>
Let's focus on filter the city first and use <i>Pomona</i> as an
example:
</p>

<pre class="example" id="orge9a37d0">
$ grep -i pomona ~/cs2600/worldcities.csv
"Pomona","Pomona","34.0585","-117.7626","United States","US","USA","California","","149831","1840020507"
"Pomona","Pomona","39.4688","-74.5502","United States","US","USA","New Jersey","","8878","1840005596"
$
</pre>

<p>
Seems good, right?  What about <i>Lagos</i>?
</p>
<pre class="example" id="orgbf159cf">
$ grep -i lagos ~/cs2600/worldcities.csv
"Lagos","Lagos","6.4550","3.3841","Nigeria","NG","NGA","Lagos","minor","16637000","1566593751"
"Mushin","Mushin","6.5333","3.3500","Nigeria","NG","NGA","Lagos","minor","935400","1566329100"
[...32 more lines...]
"Hualaihué","Hualaihue","-42.1000","-72.4167","Chile","CL","CHL","Los Lagos","","8720","1152075609"
"Chonchi","Chonchi","-42.6219","-73.7742","Chile","CL","CHL","Los Lagos","","5632","1152428145"
$
</pre>

<p>
Nope.  So we need to improve our filter to focus on that first
column!  Let's do that by matching the start of the line and the
quotes:
</p>

<pre class="example" id="org5fed477">
$ grep -i '^"lagos"' ~/cs2600/worldcities.csv
"Lagos","Lagos","6.4550","3.3841","Nigeria","NG","NGA","Lagos","minor","16637000","1566593751"
"Lagos","Lagos","37.1028","-8.6728","Portugal","PT","PRT","Faro","minor","31049","1620635530"
$
</pre>

<p>
Now we're assured we are getting the city and not a match
somewhere else in the line.
</p>

<p>
Next, we need to extract the country - column 5.  In class, we saw
just using commas as delimiters failed because there are commas
<i>inside</i> quotes as well.  While for <i>Pomona</i> and <i>Lagos</i> that's
not true, we need to ensure robustness.
</p>

<p>
So, as we did in class, we'll remove all commas and then <i>squish</i>
double quotes using <span class="cmd">tr</span>:
</p>
<pre class="example" id="org5fd7988">
$ grep -i '^"lagos"' ~/cs2600/worldcities.csv | tr -d ',' | tr -s '"'
"Lagos"Lagos"6.4550"3.3841"Nigeria"NG"NGA"Lagos"minor"16637000"1566593751"
"Lagos"Lagos"37.1028"-8.6728"Portugal"PT"PRT"Faro"minor"31049"1620635530"
$
</pre>

<p>
We can now use <span class="cmd">cut</span> to extract the country column with
is now field 6 because field 1 if before the first '"' and thus
empty:
</p>
<pre class="example" id="org24c807e">
$ grep -i '^"lagos"' ~/cs2600/worldcities.csv | tr -d ',' | tr -s '"' | cut -d'"' -f6
Nigeria
Portugal
$
</pre>

<p>
Let's test it with Pomona:
</p>

<pre class="example" id="org3bf3359">
$ grep -i '^"pomona"' ~/cs2600/worldcities.csv | tr -d ',' | tr -s '"' | cut -d'"' -f6
United States
United States
$
</pre>

<p>
We haven't learned (nor will we) how to remove duplicates from our
results, but just for fun simply add a pipe to <span class="cmd">sort -u</span>:
</p>

<pre class="example" id="orgb3b77aa">
$ grep -i '^"pomona"' ~/cs2600/worldcities.csv | tr -d ',' | tr -s '"' | cut -d'"' -f6 | sort -u
United States
$
</pre>

<p>
Let's try one more, <i>Turin</i>:
</p>

<pre class="example" id="org24db946">
$ grep -i '^"turin' ~/cs2600/worldcities.csv | tr -d ',' | tr -s '"' | cut -d'"' -f6 | sort -u
Italy
Russia
$
</pre>

<p>
Looks good and done!
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org3260d67" class="outline-4">
<h4 id="org3260d67">Exercise #10</h4>
<div class="outline-text-4" id="text-org3260d67">
<p>
BONUS: Create a script called <span class="fname">get_country.bash</span> in
<span class="fname">~/cs2600</span> which takes a city as a command line
parameter and outputs which countries the city resides in.
</p>

<input type="button" onclick="toggle_solution('grep10');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='grep10'>

<p>
Ok, so this really isn't a <span class="cmd">grep</span> question but it
illustrates how once you figure out these command lines, it's a
good idea to turn them into scripts if you're going to use them
over and over, rather than re-typing them or searching your
command history (cursor up'ing).
</p>

<p>
So open your favorite editor and let's create the script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

grep -i <span style="color: #ffa07a;">'^"turin'</span> ~/cs2600/worldcities.csv | tr -d <span style="color: #ffa07a;">','</span> | tr -s <span style="color: #ffa07a;">'"'</span> | cut -d<span style="color: #ffa07a;">'"'</span> -f6 | sort -u
</pre>
</div>

<p>
So far so good.  However, this script hard-coded <i>turin</i>.  So next
is to get a command line parameter and use it in our pattern.
</p>

<p>
First, remember how we get a command line parameter into our
script?  Positional Paramaters:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Takes a city as a parameter and find the countries it resides in</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">It's not really necessary to assign $1 to a variable.  I just do it</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">so the student can understand how the command line paramater comes</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">in as a positional parameter.</span>
<span style="color: #eedd82;">CITY</span>=$<span style="color: #eedd82;">1</span>  

grep -i <span style="color: #ffa07a;">'^"turin'</span> ~/cs2600/worldcities.csv | tr -d <span style="color: #ffa07a;">','</span> | tr -s <span style="color: #ffa07a;">'"'</span> | cut -d<span style="color: #ffa07a;">'"'</span> -f6 | sort -u

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End of Script</span>
<span style="color: #ff7f24;">######################################################################</span>
</pre>
</div>

<p>
Next, we need to get our variable into our pattern:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Takes a city as a parameter and find the countries it resides in</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">It's not really necessary to assign $1 to a variable.  I just do it</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">so the student can understand how the command line paramater comes</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">in as a positional parameter.</span>
<span style="color: #eedd82;">CITY</span>=$<span style="color: #eedd82;">1</span>  

grep -i <span style="color: #ffa07a;">'^"$CITY'</span> ~/cs2600/worldcities.csv | tr -d <span style="color: #ffa07a;">','</span> | tr -s <span style="color: #ffa07a;">'"'</span> | cut -d<span style="color: #ffa07a;">'"'</span> -f6 | sort -u

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End of Script</span>
<span style="color: #ff7f24;">######################################################################</span>
</pre>
</div>

<p>
But wait?  Will $CITY be replaced with the value? No,
because our variable is inside <i>single</i> quotes.  Ugh.  Now we have
to change our pattern to be surrounded by double quotes so the
variable will be <i>interpolated</i>.
</p>

<p>
But then what about the double quotes <span class="underline">inside our pattern</span>??
We're going to have to <i>escape</i> it:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Takes a city as a parameter and find the countries it resides in</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">It's not really necessary to assign $1 to a variable.  I just do it</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">so the student can understand how the command line paramater comes</span>
<span style="color: #ff7f24;">#   </span><span style="color: #ff7f24;">in as a positional parameter.</span>
<span style="color: #eedd82;">CITY</span>=$<span style="color: #eedd82;">1</span>  

grep -i <span style="color: #ffa07a;">"^\"$CITY"</span> ~/cs2600/worldcities.csv | tr -d <span style="color: #ffa07a;">','</span> | tr -s <span style="color: #ffa07a;">'"'</span> | cut -d<span style="color: #ffa07a;">'"'</span> -f6 | sort -u

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End of Script</span>
<span style="color: #ff7f24;">######################################################################</span>
</pre>
</div>

<p>
Now, let's set the 'x' bit and test it out:
</p>

<pre class="example" id="orgcfc2f7e">
$ chmod u+x ~/cs2600/get_country.bash
$ ~/cs2600/get_country.bash pomona
United States
$ ~/cs2600/get_country.bash turin
Italy
Russia
$ ~/cs2600/get_country.bash yonkers
United States
$ ~/cs2600/get_country.bash paris
Canada
France
United States
$
</pre>

<p>
Looks good.  BTW, is it really necessary to have so many comments?
IMO, YES!!!!!!!
</p>

<p>
You see, in real life, you may not come back to the code until
months or years later.  So not only are the comments good for
others who read your code, but they're good for you because let's
face it&#x2026;we're always getting new ideas on how to augment or
improve our code.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org8b0fbe7" class="outline-3">
<h3 id="org8b0fbe7">Practice Exercises for <span class="cmd">head/tail</span> <a id="org30c2850"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org8b0fbe7">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org26c8add">head</a>, <a href="#orgcd5dde5">tail</a>, <a href="#org78d8756">head/tail summary</a></td></tr></table>
</p>
</div>

<div id="outline-container-org04d89ea" class="outline-4">
<h4 id="org04d89ea">Preparation</h4>
<div class="outline-text-4" id="text-org04d89ea">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 000</a>.</li>
<li>Please implement <a href="#org11b62ee">Support Package 002</a>.</li>
<li>Please implement <a href="#org11b62ee">Support Package 003</a>.</li>
<li>Please implement <a href="#org11b62ee">Support Package 004</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-org7da8e8b" class="outline-4">
<h4 id="org7da8e8b">Exercise #1</h4>
<div class="outline-text-4" id="text-org7da8e8b">
<p>
What is the latest topic I've generated exercises for?
</p>

<input type="button" onclick="toggle_solution('headtail1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail1'>

<p>
The <span class="fname">pe_counts.txt</span> file contains information about the
practice exercises and how many exercises there are for a topic.
Based on how it's generated, the latest topic is always the last
line.  We can use <span class="cmd">tail</span> for that:
</p>

<pre class="example" id="org6573d98">
$ tail -n1 ~/cs2600/pe_counts.txt 
10,grep,1,2,3,4,5,6,7,8,9,10
$
</pre>

<p>
Can we get just the topic without the other data?  Yes!  Just
<span class="cmd">cut</span> out field #2:
</p>
<pre class="example" id="orgf9df90a">
$ tail -n1 ~/cs2600/pe_counts.txt | cut -d',' -f2
grep
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org3f038b6" class="outline-4">
<h4 id="org3f038b6">Exercise #2</h4>
<div class="outline-text-4" id="text-org3f038b6">
<p>
What are the column headings in the <span class="fname">worldcities.csv</span> file?
</p>

<input type="button" onclick="toggle_solution('headtail2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail2'>

<p>
The column headings are just the first line of the file:
</p>

<pre class="example" id="orga0d1702">
$ head -n1 ~/cs2600/worldcities.csv 
"city","city_ascii","lat","lng","country","iso2","iso3","admin_name","capital","population","id"
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org0275384" class="outline-4">
<h4 id="org0275384">Exercise #3</h4>
<div class="outline-text-4" id="text-org0275384">
<p>
Pick a number between 1,000 and 100,000.  What is the word in the
<span class="cmd">words</span> file on that line number?
</p>

<input type="button" onclick="toggle_solution('headtail3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail3'>

<p>
Let's have some fun!  I'm going to let Bash pick a random number
for me using the <span class="cmd">$RANDOM</span> environment variable.  Since
<span class="cmd">$RANDOM</span> is between 0..32767 but our lower range is
1000, we'll need to account for that:
</p>

<div class="org-src-container">
<pre class="src src-sh">$<span style="color: #eedd82;">RANDOM</span> + 1000
</pre>
</div>

<p>
But how do we get to the upper range of 100,000?  Let's just take
two <span class="cmd">$RANDOM</span> numbers and multiply them:
</p>
<pre class="example" id="org5bc90ad">
$ echo "$(( $RANDOM * $RANDOM ))"
777725630
$
</pre>

<p>
The quotes are not really needed, I just put them here for
readability.
</p>

<p>
Now we have a big number we can "trim" down to our range:
</p>
<ul class="org-ul">
<li>First mod by 90000 (because we'll be adding 1000)</li>
<li>Then add 1000</li>
</ul>

<pre class="example" id="org1627e78">
$ echo "$(( ( ( $RANDOM * $RANDOM ) % 90000 ) + 1000 ))"
80428
$
</pre>

<p>
Again, I went overboard with the parens to show how the math is
working.
</p>

<p>
Ok, now that I have a random number, 80428, let's find the 80428
word in the <span class="fname">words</span> file.
</p>

<p>
First, we could use <span class="cmd">cat</span>, <span class="cmd">grep</span>,
and <span class="cmd">cut</span>:
</p>

<pre class="example" id="org63828dd">
$ cat -n ~/cs2600/words | grep 80428
 80428  repressing
$
</pre>

<p>
but watch what happens when we try to <span class="cmd">cut</span>:
</p>

<pre class="example" id="orgece5427">
$ cat -n ~/cs2600/words | grep 80428 | cut -d ' ' -f1

$ cat -n ~/cs2600/words | grep 80428 | cut -d ' ' -f2
80428   repressing
$ 
</pre>

<p>
Notice field 1 is empty (due to the space at the front) and field
2 is the rest.  This is because the delimiter is actually a TAB
between the number and the word.  So let's account for that:
</p>

<pre class="example" id="org034aa0a">
$ cat -n ~/cs2600/words | grep 80428 | cut -f2
repressing
$
</pre>

<p>
Remember, the default delimiter for <span class="cmd">cut</span> is TAB!
</p>

<p>
BUT this is an exercise for <span class="cmd">head</span> and <span class="cmd">tail</span>,
so now let's solve it with just those.
</p>

<p>
First, let's just get the top 80428 lines of the words file:
</p>

<pre class="example" id="orgc08b1bd">
$ cat ~/cs2600/words | head -n80428
[...80424 lines...]
repress
repressed
represses
repressing
$
</pre>

<p>
Now, just grab the last line for that output:
</p>
<pre class="example" id="org7aa27e3">
$ cat ~/cs2600/words | head -n80428 | tail -n1
repressing
$
</pre>

<p>
Can we shorten it?  Yes!  <span class="cmd">head</span> is a command which can
take input from a file <i>or</i> from a pipe.  So rather than
<span class="cmd">cat</span>ing the file first, why not just give
<span class="fname">words</span> to <span class="cmd">head</span> directly&#x2026;we're not gaining
anything from <span class="cmd">cat</span> in this version:
</p>

<pre class="example" id="orgd152563">
$ head -n80428 ~/cs2600/words | tail -n1
repressing
$
</pre>

<p>
&#x2026;and done.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org674e2c7" class="outline-4">
<h4 id="org674e2c7">Exercise #4</h4>
<div class="outline-text-4" id="text-org674e2c7">
<p>
There was an exercise for <span class="cmd">grep</span> where we worked with the
<span class="fname">videos.xml</span> file and got the following output:
</p>

<pre class="example" id="orgf2286b5">
$ grep -A 2 'yt:videoId' ~/cs2600/videos.xml                           
  &lt;yt:videoId&gt;fxD5-fcLJ2k&lt;/yt:videoId&gt;
  &lt;yt:channelId&gt;UCY1kMZp36IQSyNx_9h4mpCg&lt;/yt:channelId&gt;
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;  
--                                                                    
  &lt;yt:videoId&gt;DsZe6TCH3A4&lt;/yt:videoId&gt;
  &lt;yt:channelId&gt;UCY1kMZp36IQSyNx_9h4mpCg&lt;/yt:channelId&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
-- 
[...I have more lines...]
</pre>

<p>
From there we filtered out several lines to get exactly what we
wanted.
</p>

<p>
Can we have obtained the titles in a simpler fashion using
<span class="cmd">head/tail</span>?  Yes, so find it!
</p>

<input type="button" onclick="toggle_solution('headtail4');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail4'>

<p>
The solution to this is to go back to the initial attempt of
simply searching for &lt;title&gt;:
</p>

<pre class="example" id="org3c27388">
$ grep '&lt;title&gt;' ~/cs2600/videos.xml 
 &lt;title&gt;Mark Rober&lt;/title&gt;
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
  &lt;title&gt;What happens if you don't use Airplane mode?&lt;/title&gt;
  [...I have more lines...]
$
</pre>

<p>
We just want to trim off the first line.  In other words, we
simply want to show all the lines of output <i>starting at line
#2</i>.  <span class="cmd">tail</span> can do that:
</p>

<pre class="example" id="org2b5c360">
$ grep '&lt;title&gt;' ~/cs2600/videos.xml | tail -n+2
  &lt;title&gt;Can You Turn On a TV With a Lighter?&lt;/title&gt;
  &lt;title&gt;Turtles or Snakes- Which Do Cars Swerve to Hit More?&lt;/title&gt;
  &lt;title&gt;What happens if you don't use Airplane mode?&lt;/title&gt;
  &lt;title&gt;This Goalie Cheated With His Water Bottle&lt;/title&gt;
  [...I have more lines...]
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org7e99413" class="outline-4">
<h4 id="org7e99413">Exercise #5</h4>
<div class="outline-text-4" id="text-org7e99413">
<p>
In my firewall rules, I can get a list of IPs with the following
command which provides the shown output:
</p>

<pre class="example" id="org0c718c5">

# ipset list BadIPs | head -n 20
Name: BadIPs
Type: hash:ip
Revision: 4
Header: family inet hashsize 8192 maxelem 65536
Size in memory: 357592
References: 1
Number of entries: 15974
Members:
47.106.201.134
144.217.170.27
87.236.176.142
178.208.66.4
[...15976 more lines...]
#
</pre>

<p>
In my work to develop more tools, I only want the IP addresses.
What would be the command to get them?
</p>

<input type="button" onclick="toggle_solution('headtail5');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail5'>

<p>
In this example, I want all the lines except for the top 8.  So we
can use <span class="cmd">tail</span> for this as well:
</p>

<pre class="example" id="orge89fe39">
# ipset list BadIPs | tail -n+9
47.106.201.134
144.217.170.27
87.236.176.142
178.208.66.4
198.199.114.240
[...15969 more lines...]
#
</pre>

<p>
Notice the <i>+9</i>, since we <b>want</b> to see line 9.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org9471ec4" class="outline-4">
<h4 id="org9471ec4">Exercise #6</h4>
<div class="outline-text-4" id="text-org9471ec4">
<p>
Suppose you issue the following command to get line counts for all
files in <span class="fname">~/cs2600</span>:
</p>

<pre class="example" id="org28bd210">
$ wc -l ~/cs2600/*
      8 /home/instructor/cs2600/get_country.bash
     13 /home/instructor/cs2600/pe_counts.txt
    403 /home/instructor/cs2600/videos.xml
 102774 /home/instructor/cs2600/words
  47869 /home/instructor/cs2600/worldcities.csv
 151067 total
$
</pre>

<p>
What command line would provide you just the info for the files
and not the total?
</p>

<input type="button" onclick="toggle_solution('headtail6');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='headtail6'>

<p>
To solve this we want all lines <i>except</i> the last one.
<span class="cmd">head</span> can be used to trim off lines at the bottom by
passing in a negative value for <span class="cmd">-n</span>:
</p>

<pre class="example" id="org0624720">
$ wc -l ~/cs2600/* | head -n -1
      8 /home/instructor/cs2600/get_country.bash
     13 /home/instructor/cs2600/pe_counts.txt
    403 /home/instructor/cs2600/videos.xml
 102774 /home/instructor/cs2600/words
  47869 /home/instructor/cs2600/worldcities.csv
$ 
</pre>

<p>
Solved.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-orgee7b774" class="outline-3">
<h3 id="orgee7b774">Challenge Exercise: <span class="cmd">Country City Count</span> <a id="org5f10c80"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-orgee7b774">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: 
<a href="#orge23531d">cut</a>,
<a href="#orge2dfdd2">for</a>,
<a href="#org0c22049">grep</a>,
<a href="#org26c8add">head</a>,
<a href="#org3a82431">if</a>,
<a href="#org6452459">read,</a>
<a href="#orgcd5dde5">tail</a>,
<a href="#org4d49987">touch</a>,
<a href="#org0aeb16c">tr</a>,
<a href="#org392eb75">while</a>
</td></tr></table>
</p>
</div>

<div id="outline-container-org5eace24" class="outline-4">
<h4 id="org5eace24">Preparation</h4>
<div class="outline-text-4" id="text-org5eace24">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 003</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-org79e0b70" class="outline-4">
<h4 id="org79e0b70">Exercise #1</h4>
<div class="outline-text-4" id="text-org79e0b70">
<p>
Using the <span class="fname">worldcities.csv</span> data, write a script to
display the country and number of cities provided for that
country.
</p>

<p>
Here is what the output should look like:
</p>

<pre class="example" id="org45d9bef">
Japan : 1337
Indonesia : 290
India : 7031
China : 1663
Philippines : 1584
Brazil : 2937
Korea South : 104
[...233 more lines...]
Pitcairn Islands : 1
South Georgia And South Sandwich Islands : 1
U.S. Virgin Islands : 1
</pre>

<input type="button" onclick="toggle_solution('ccc1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='ccc1'>

<p>
There are 3 solutions presented below:
</p>
<ol class="org-ol">
<li>Attempts to solve the challenge by removing the spaces in the
country names.</li>
<li>Maintains the spaces in the country names but requires more work.</li>
<li>Uses the <span class="cmd">while/read</span> solution to minimize work and
still maintain spaces.</li>
</ol>

<p>
Rather than populating the notes and script with tons of comments
to walk you through it, see the main Canvas page for a link to a
video which does.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Filename: ccc</span>
<span style="color: #ff7f24;">#</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Write a script to display the country and number of cities provided</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">for that country in the worldcities.csv file.</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #eedd82;">SRC</span>=~/cs2600/worldcities.csv
<span style="color: #eedd82;">TMPDIR</span>=~/.tmp
<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMPDIR</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir $<span style="color: #eedd82;">TMPDIR</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #eedd82;">CFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p $<span style="color: #eedd82;">TMPDIR</span> countries.XXXXX)
<span style="color: #00ffff;">if</span> [[ ! -w $<span style="color: #eedd82;">CFILE</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: Unable to write countries file: $CFILE.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Solution #1: Country names with no spaces.</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;"># Get countries</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">tail -n +2 $SRC | tr -d ',' | tr -s '"' | cut -d'"' -f6 | tr -d ' ' &gt; $CFILE</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;"># country name : count</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">for COUNTRY in $(</span><span style="color: #fa8072;">cat</span><span style="color: #ff7f24;"> $CFILE); do</span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">if [[ ! -f "$TMPDIR/$COUNTRY.count" ]]; then</span>
<span style="color: #ff7f24;">#       </span><span style="color: #ff7f24;">touch "$TMPDIR/$COUNTRY.count"</span>
<span style="color: #ff7f24;">#       </span><span style="color: #ff7f24;">echo -n "$COUNTRY : "</span>
<span style="color: #ff7f24;">#       </span><span style="color: #ff7f24;">grep -c $COUNTRY $CFILE</span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">fi</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">done</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rm $TMPDIR/*.count  $CFILE</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End Solution #1</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Solution #2 : Country names with spaces but extra work</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;"># Get countries</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">tail -n +2 $SRC | tr -d ',' | tr -s '"' | cut -d'"' -f6 &gt; $CFILE</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">MAXLINES=$(</span><span style="color: #fa8072;">cat</span><span style="color: #ff7f24;"> $CFILE | wc -l )    # wc -l $CFILE</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">COUNT=1</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">while [[ $COUNT -le $MAXLINES ]]; do</span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">COUNTRY=$(</span><span style="color: #fa8072;">head</span><span style="color: #ff7f24;"> -n$COUNT $CFILE | tail -n1)</span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">if [[ ! -f "$TMPDIR/$COUNTRY.count" ]]; then</span>
<span style="color: #ff7f24;">#        </span><span style="color: #ff7f24;">touch "$TMPDIR/$COUNTRY.count"</span>
<span style="color: #ff7f24;">#        </span><span style="color: #ff7f24;">echo -n "$COUNTRY : "</span>
<span style="color: #ff7f24;">#        </span><span style="color: #ff7f24;">grep -c "$COUNTRY" $CFILE</span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">fi                           </span>
<span style="color: #ff7f24;">#     </span><span style="color: #ff7f24;">COUNT=$(( $COUNT + 1 ))</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">done</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rm $TMPDIR/*.count $CFILE</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End Solution #2</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Solution #3: Country names with spaces without extra work</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Get countries</span>
tail -n +2 $<span style="color: #eedd82;">SRC</span> | tr -d <span style="color: #ffa07a;">','</span> | tr -s <span style="color: #ffa07a;">'"'</span> | cut -d<span style="color: #ffa07a;">'"'</span> -f6 &gt; $<span style="color: #eedd82;">CFILE</span>

cat $<span style="color: #eedd82;">CFILE</span> | <span style="color: #00ffff;">while </span><span style="color: #b0c4de;">read</span> COUNTRY; <span style="color: #00ffff;">do</span>
    <span style="color: #00ffff;">if</span> [[ ! -f <span style="color: #ffa07a;">"$TMPDIR/$COUNTRY.count"</span> ]]; <span style="color: #00ffff;">then</span>
        touch <span style="color: #ffa07a;">"$TMPDIR/$COUNTRY.count"</span>
        <span style="color: #b0c4de;">echo</span> -n <span style="color: #ffa07a;">"$COUNTRY : "</span>
        grep -c <span style="color: #ffa07a;">"$COUNTRY"</span> $<span style="color: #eedd82;">CFILE</span>
    <span style="color: #00ffff;">fi</span>                           
<span style="color: #00ffff;">done</span>

rm $<span style="color: #eedd82;">TMPDIR</span>/*.count $<span style="color: #eedd82;">CFILE</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End Solution #3</span>
<span style="color: #ff7f24;">######################################################################</span>

<span style="color: #ff7f24;">######################################################################</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">End of Script</span>
<span style="color: #ff7f24;">######################################################################</span>
</pre>
</div>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org63f2a85" class="outline-3">
<h3 id="org63f2a85">Practice Exercises for <span class="cmd">stat</span> <a id="org0d9a298"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org63f2a85">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org2f0f20c">stat</a></td></tr></table>
</p>
</div>

<div id="outline-container-orgdeb1cd2" class="outline-4">
<h4 id="orgdeb1cd2">Preparation</h4>
<div class="outline-text-4" id="text-orgdeb1cd2">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 002</a>.</li>
</ol>
</div>
</div>


<div id="outline-container-org0a62c4c" class="outline-4">
<h4 id="org0a62c4c">Exercise #1</h4>
<div class="outline-text-4" id="text-org0a62c4c">
<p>
What is the "IO Block" for the <span class="fname">words</span> file?
</p>

<input type="button" onclick="toggle_solution('stat1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='stat1'>

<pre class="example" id="orga91c413">
$ stat ~/cs2600/words
  File: /home/instructor/cs2600/words
  Size: 976241          Blocks: 1912       IO Block: 4096   regular file
Device: fe00h/65024d    Inode: 49161188    Links: 1
Access: (0600/-rw-------)  Uid: ( 1004/instructor)   Gid: ( 1004/instructor)
Access: 2024-10-24 13:04:55.766071233 -0700
Modify: 2024-10-24 13:04:55.790072525 -0700
Change: 2024-10-24 13:05:07.758716693 -0700
 Birth: 2024-10-24 13:04:55.766071233 -0700
$
</pre>

<p>
In my case, the answer would be <b>4096</b>.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org638d5e0" class="outline-4">
<h4 id="org638d5e0">Exercise #2</h4>
<div class="outline-text-4" id="text-org638d5e0">
<p>
If you were to use <span class="cmd">cut</span>, what is the field number for
the "Device" value?
</p>

<input type="button" onclick="toggle_solution('stat2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='stat2'>

<p>
Referencing the previous output:
</p>

<pre class="example" id="org7d67e53">
$ stat ~/cs2600/words
  File: /home/instructor/cs2600/words
  Size: 976241          Blocks: 1912       IO Block: 4096   regular file
Device: fe00h/65024d    Inode: 49161188    Links: 1
Access: (0600/-rw-------)  Uid: ( 1004/instructor)   Gid: ( 1004/instructor)
Access: 2024-10-24 13:04:55.766071233 -0700
Modify: 2024-10-24 13:04:55.790072525 -0700
Change: 2024-10-24 13:05:07.758716693 -0700
 Birth: 2024-10-24 13:04:55.766071233 -0700
$
</pre>

<p>
The Device value is <b>fe00</b> or <b>62024</b>, the 'h' simply
means <i>hexadecimal</i> and the 'd' means <i>decimal</i>&#x2026;the
numeric base.
</p>

<p>
Now, we can use the <i>terse</i> switch <span class="cmd">-t</span> and search
for one of those values:
</p>

<pre class="example" id="orga83ce42">
$ stat -t ~/cs2600/words
/home/instructor/cs2600/words 976241 1912 8180 1004 1004 fe00 49161188 1 0 0 1729800295 1729800295 1729800307 1729800295 4096
$
</pre>

<p>
From those, we can see the answer is field <b>7</b>.  Let's use
<span class="cmd">cut</span> to verify:
</p>

<pre class="example" id="orgbc3d055">
$ stat -t ~/cs2600/words | cut -d' ' -f7
fe00
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org69c0679" class="outline-4">
<h4 id="org69c0679">Exercise #3</h4>
<div class="outline-text-4" id="text-org69c0679">
<p>
Based on the previous exercise, is it fair to say field 7 will
always be the "Device" value?  Why or why not?
</p>

<input type="button" onclick="toggle_solution('stat3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='stat3'>

<p>
No, it's <b>not</b> fair to say field 7 will always be the "Device"
value because if a file name contains a space, the field numbers
will be shifted by how many spaces are in the file name:
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org0fc713d" class="outline-4">
<h4 id="org0fc713d">Exercise #4</h4>
<div class="outline-text-4" id="text-org0fc713d">
<p>
Use some more Bash to extract the <i>user</i> owner of the file from
the non-terse version of <span class="cmd">stat</span> output.
</p>

<input type="button" onclick="toggle_solution('stat4');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='stat4'>

<p>
So first, let's take a look at the normal output of
<span class="cmd">stat</span>:
</p>

<pre class="example" id="orgddcebde">
$ stat ~/cs2600/words
  File: /home/instructor/cs2600/words
  Size: 976241          Blocks: 1912       IO Block: 4096   regular file
Device: fe00h/65024d    Inode: 49161188    Links: 1
Access: (0600/-rw-------)  Uid: ( 1004/instructor)   Gid: ( 1004/instructor)
Access: 2024-10-24 13:04:55.766071233 -0700
Modify: 2024-10-24 13:04:55.790072525 -0700
Change: 2024-10-24 13:05:07.758716693 -0700
 Birth: 2024-10-24 13:04:55.766071233 -0700
$
</pre>

<p>
As you can see, the <i>user</i> owner is on the 4th line.  To get th
4th line, we have some options:
</p>

<ul class="org-ul">
<li>use <span class="cmd">head/tail</span> to obtain the 4th line.</li>
<li><span class="cmd">grep</span> for a unique string which exists <b>only</b> on the
4th line, or</li>
</ul>

<p>
Using <span class="cmd">head/tail</span>:
</p>

<pre class="example" id="org4e212f6">
$ stat ~/cs2600/words | head -n4 | tail -n1
Access: (0600/-rw-------)  Uid: ( 1004/instructor)   Gid: ( 1004/instructor)
$
</pre>

<p>
or using <span class="cmd">grep</span>:
</p>

<pre class="example" id="orgcf95906">
$ stat ~/cs2600/words | grep Uid
Access: (0600/-rw-------)  Uid: ( 1004/instructor)   Gid: ( 1004/instructor)
$
</pre>

<p>
As you can see <span class="cmd">grep</span> has less typing, but really which
one you use depends on your comfort zone.  To continue, I'll use
<span class="cmd">grep</span>.
</p>

<p>
Next, we need to <span class="cmd">cut</span> out 'instructor' but obviously the
owner could be any username.  Again, there are various approaches
so I think I'll do the following:
</p>

<ul class="org-ul">
<li>Change (<span class="cmd">tr</span>) ')' to '/'</li>
<li>Use <span class="cmd">cut</span> with '/' as the delimiter</li>
</ul>

<p>
First, let's just change ')' to '/' in order to determine which
field will have our username:
</p>

<pre class="example" id="org1185576">
$ stat ~/cs2600/words | grep Uid | tr ')' '/'
Access: (0600/-rw-------/  Uid: ( 1004/instructor/   Gid: ( 1004/instructor/
$
</pre>

<p>
From here, we can see the username is in field 4.  So now we can
finally get <span class="cmd">cut</span> added to our command pipeline:
</p>

<pre class="example" id="orgaca00bd">
$ stat ~/cs2600/words | grep Uid | tr ')' '/' | cut -d'/' -f4
instructor
$
</pre>

<p>
&#x2026;and done.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org232e7c7" class="outline-3">
<h3 id="org232e7c7">Practice Exercises for <span class="cmd">mktemp</span> <a id="org2e9187a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org232e7c7">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org9595d14">mktemp</a></td></tr></table>
</p>
</div>

<div id="outline-container-org96f8a0a" class="outline-4">
<h4 id="org96f8a0a">Preparation</h4>
<div class="outline-text-4" id="text-org96f8a0a">
<ol class="org-ol">
<li>Be sure you have a directory called <span class="cmd">~/cs2600/.tmp</span>.
If not, create it.</li>
</ol>
</div>
</div>

<div id="outline-container-org78bade8" class="outline-4">
<h4 id="org78bade8">Exercise #1</h4>
<div class="outline-text-4" id="text-org78bade8">
<p>
Consider the following script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

mktemp
</pre>
</div>

<p>
Where will the temporary file be created?  For other commands
which may be in the script, will we be able to redirect output to
the temporary file? 
</p>

<input type="button" onclick="toggle_solution('mktemp1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mktemp1'>

<p>
As shown, the temporary file will be created in the
<span class="fname">/tmp</span> directory.
</p>

<p>
<b>No</b>, we won't be able to redirect output as the temporary file
name was never saved.  <span class="cmd">mktemp</span> will output the file name
to the screen, but we never capture it.  So issuing something
like:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

mktemp
ls -alF &gt; ????
</pre>
</div>

<p>
is not possible.
</div>
</p>
</div>
</div>


<div id="outline-container-org50b7fcf" class="outline-4">
<h4 id="org50b7fcf">Exercise #2</h4>
<div class="outline-text-4" id="text-org50b7fcf">
<p>
Modify the script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

mktemp
</pre>
</div>

<p>
so the temporary file is created in the
<span class="fname">~/cs2600/.tmp</span> and assigned to a variable.  You may
assume this directory already exists. 
</p>

<input type="button" onclick="toggle_solution('mktemp2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mktemp2'>

<p>
<span class="cmd">mktemp</span> requires the <span class="cmd">-p</span> switch to change the
location of the temporary file:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

mktemp -p ~/cs2600/.tmp
</pre>
</div>

<p>
and then, we need to save the output of that to a variable using
<i>command substitution</i>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p ~/cs2600/.tmp)
</pre>
</div>

<p>
Now we have the variable <span class="cmd">$TFILE</span> holding the file name
so we can use it.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-orgf17af1d" class="outline-4">
<h4 id="orgf17af1d">Exercise #3</h4>
<div class="outline-text-4" id="text-orgf17af1d">
<p>
Modify the following script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p ~/cs2600/.tmp)
</pre>
</div>

<p>
so the temporary file name has the format
<span class="fname">YYYYMMDD-HHMM-XXXXX.log</span> where
</p>

<ul class="org-ul">
<li>YYYY is the 4 digit year</li>
<li>MM is the 0-padded, 2-digit month</li>
<li>DD is the 0-padded, 2-digit date</li>
<li>HH is the 0-padded, 2-digit hour (24hr format)</li>
<li>MM is the 0-padded, 2-digit minute</li>
<li>XXXXX is the random characters <span class="cmd">mktemp</span> should generate.</li>
</ul>

<input type="button" onclick="toggle_solution('mktemp3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='mktemp3'>

<p>
To create the time stamp, we'll need <span class="cmd">date</span>'s help.  So
after referencing the notes (or the <span class="cmd">man</span> page), we find:
</p>

<ul class="org-ul">
<li>'%Y' is the 4 digit year</li>
<li>'%m' is the 0-padded, 2-digit month</li>
<li>'%d' is the 0-padded, 2-digit date</li>
<li>'%H' is the 0-padded, 2-digit hour (24hr format)</li>
<li>'%M' is the 0-padded, 2-digit minute</li>
</ul>

<p>
So <span class="cmd">date +'%Y%m%d-%H%M'</span> will give us the first part of
the file name template.  We're now ready to modify our script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p ~/cs2600/.tmp $(<span style="color: #fa8072;">date</span> +<span style="color: #ffa07a;">'%Y%m%d-%H%M'</span>)-XXXXX.log)
</pre>
</div>

<p>
If we run that script and check <span class="fname">~/cs2600/.tmp</span>, we
should see something like:
</p>

<pre class="example" id="org42ea7ef">
$ ls ~/cs2600/.tmp
/home/instructor/cs2600/.tmp/20241024-1335-ZyW4h.log
$
</pre>

<p>
(You may see other temp files you've created as well and
<i>instructor</i> should be your username.)
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org9000539" class="outline-3">
<h3 id="org9000539">Practice Exercises for <span class="cmd">bashif</span> <a id="orgca9edf0"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org9000539">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: 
<a href="#org3a82431">Bash 'if'</a>,
<a href="#org045bc16">'if' Tests</a>
</td></tr></table>
</p>
</div>

<div id="outline-container-org3d7546c" class="outline-4">
<h4 id="org3d7546c">Preparation</h4>
<div class="outline-text-4" id="text-org3d7546c">
<ol class="org-ol">
<li>None</li>
</ol>
</div>
</div>

<div id="outline-container-org51aba21" class="outline-4">
<h4 id="org51aba21">Exercise #1</h4>
<div class="outline-text-4" id="text-org51aba21">
<p>
Write a script to see if you have a directory called
<span class="fname">~/cs2600/.tmp</span>.  Notify the user of the results.
</p>

<p>
Warning: You may only assume your home directory exists.
</p>

<input type="button" onclick="toggle_solution('bashif1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashif1'>

<p>
So take note of the warning&#x2026;we <b>can not</b> assume
<span class="cmd">cs2600</span> exists nor <span class="cmd">.tmp</span>.  So we'll need to
check for both and will obviously require the help of Bash's
<span class="cmd">if</span>.
</p>

<p>
The question, which conditional test do we use: <span class="cmd">-d</span> or
<span class="cmd">-d</span>?  Well, remember:
</p>

<ul class="org-ul">
<li><span class="cmd">-d</span>: Does the 'file' exist and is it a directory?</li>
<li><span class="cmd">-e</span>: Does the 'file' exist?</li>
</ul>

<p>
So <span class="cmd">-e</span> will check for existence, but does not guarantee
<i>file</i> is a directory&#x2026;it could be a file.  <span class="cmd">-d</span> does
both for us so we'll want to use that.
</p>

<p>
First, we need to check if <span class="cmd">~/cs2600</span> exists:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">if</span> [[ -d ~/cs2600 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600 directory exists"</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600 directory does not exist."</span>
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Then, if it does exist, we can go ahead and check for
<span class="cmd">.tmp</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">if</span> [[ -d ~/cs2600 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600 directory exists."</span>
    <span style="color: #00ffff;">if</span> [[ -d ~/cs2600/.tmp ]]; <span style="color: #00ffff;">then</span>
        <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600/.tmp directory exists."</span>
    <span style="color: #00ffff;">else</span>
        <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600/.tmp directory does not exist."</span>
    <span style="color: #00ffff;">fi</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600 directory does not exist."</span>
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Here is what some sample output may look like:
</p>

<pre class="example" id="orga89790d">
$ ./check.bash 
~/cs2600 directory exists.
~/cs2600/.tmp directory does not exist.
$
$ mkdir ~/cs2600/.tmp
$ ./check.bash
~/cs2600 directory exists.
~/cs2600/.tmp directory exists.
$
</pre>

<p>
Well, this works but thats a lot of output and nested
<span class="cmd">if</span>s can get cluttered.  When code gets like this, I
like to re-think the logic.  Also, let's focus on the point of the
script: to state if <span class="cmd">~/cs2600/.tmp</span> exist. The question
didn't say state which component of the path failed.
</p>

<p>
This simplifies matter a lot:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">if</span> [[ -d ~/cs2600/.tmp ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600/.tmp directory exists."</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"~/cs2600.tmp directory does not exist."</span>
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
In this version, all we know is <span class="cmd">~/cs2600/.tmp</span> does not
exist and we don't bother checking for each component. (I'll leave
that for another challenge. 😁)
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org9c32b00" class="outline-4">
<h4 id="org9c32b00">Exercise #2</h4>
<div class="outline-text-4" id="text-org9c32b00">
<p>
You're writing a script to setup a new Linux account.  To do so,
you want to copy a <i>startup file</i> called <span class="cmd">startup.bash</span>
from either user <i>user1</i> <b>or</b> <i>user2</i> (in their home directories),
and put it in the current user's home directory (using the same
name).  If no <span class="cmd">startup.bash</span> is found, "error out" -
meaning display an error stating as such.
</p>

<p>
Write that script.
</p>

<input type="button" onclick="toggle_solution('bashif2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashif2'>

<p>
So first, note we use <i>either</i> <i>user1</i> or <i>user2</i>'s
<span class="cmd">startup.bash</span>, not both.  So if <i>user1</i> has one, we'll
use that, else we use <i>user2</i>'s.
</p>

<p>
First, let's setup the script and some variables to make it
readable, and hopefully, less typing (just a personal preference):
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>


<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file</span>
cp $<span style="color: #eedd82;">SOURCE</span> ~/.

</pre>
</div>

<p>
The idea is we'll determine a viable <span class="cmd">$SOURCE</span>, if any,
and then copy the <span class="cmd">$SOURCE</span> to the destination&#x2026;the
current user's home directory.
</p>

<p>
Next, we need to check if <span class="cmd">$SRC1</span> is available to copy,
but what conditional test do we use: <span class="cmd">-f</span>, <span class="cmd">-d</span>,
another?
</p>

<p>
Well, in order to copy the file we need:
</p>

<ol class="org-ol">
<li>for it to be a file, and</li>
<li>it must be readable.</li>
</ol>

<p>
So looking at our options, <span class="cmd">-r</span> does both for us:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>
<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">OPTION1</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION1</span>
<span style="color: #00ffff;">fi</span>


<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file</span>
cp $<span style="color: #eedd82;">SOURCE</span> ~/.

</pre>
</div>

<p>
However, if <span class="cmd">$OPTION1</span> is not available, we need to check
for <span class="cmd">$OPTION2</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>
<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">OPTION1</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION1</span>
<span style="color: #00ffff;">elif</span> [[ -r $<span style="color: #eedd82;">OPTION2</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION2</span>
<span style="color: #00ffff;">fi</span>


<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file</span>
cp $<span style="color: #eedd82;">SOURCE</span> ~/.

</pre>
</div>

<p>
Of course, if <span class="cmd">$OPTION2</span> is also not available, we should
output an error:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>
<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">OPTION1</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION1</span>
<span style="color: #00ffff;">elif</span> [[ -r $<span style="color: #eedd82;">OPTION2</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION2</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: no viable source found."</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file</span>
cp $<span style="color: #eedd82;">SOURCE</span> ~/.

</pre>
</div>

<p>
But wait, if you notice, after an error execution will continue to
<span class="cmd">cp</span>, we can't have that.  A simple way is to prematurely
<span class="cmd">exit</span> the script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>
<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">OPTION1</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION1</span>
<span style="color: #00ffff;">elif</span> [[ -r $<span style="color: #eedd82;">OPTION2</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION2</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: no viable source found."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file</span>
cp $<span style="color: #eedd82;">SOURCE</span> ~/.

</pre>
</div>

<p>
Now, to be fair, <span class="cmd">exit</span> is not part of our curriculum.
So how can we accomplish not performing the <span class="cmd">cp</span> if there
was an error?  The answer is with a <i>flag</i>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">STARTUP_FILE</span>=startup.bash
<span style="color: #eedd82;">OPTION1</span>=~/user1/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">OPTION2</span>=~/user2/$<span style="color: #eedd82;">STARTUP_FILE</span>
<span style="color: #eedd82;">SOURCE</span>=<span style="color: #ffa07a;">""</span>
<span style="color: #eedd82;">ERROR</span>=0

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Add logic to find a legit source or display an error</span>
<span style="color: #00ffff;">if</span> [[ -r $<span style="color: #eedd82;">OPTION1</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION1</span>
<span style="color: #00ffff;">elif</span> [[ -r $<span style="color: #eedd82;">OPTION2</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #eedd82;">SOURCE</span>=$<span style="color: #eedd82;">OPTION2</span>
<span style="color: #00ffff;">else</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: no viable source found."</span>
    <span style="color: #eedd82;">ERROR</span>=1
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Copy the file if no errors</span>
<span style="color: #00ffff;">if</span> [[ $<span style="color: #eedd82;">ERROR</span> -eq 0 ]]; <span style="color: #00ffff;">then</span>
    cp $<span style="color: #eedd82;">SOURCE</span> ~/.
<span style="color: #00ffff;">fi</span>
</pre>
</div>

<p>
Now the <span class="cmd">cp</span> won't happen on an error, we'll just
naturally exit the script.
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org278bca0" class="outline-3">
<h3 id="org278bca0">Practice Exercises for <span class="cmd">bashfor</span> <a id="org3bd2459"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org278bca0">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#orge2dfdd2">Bash 'for'</a></td></tr></table>
</p>
</div>

<div id="outline-container-org21f390c" class="outline-4">
<h4 id="org21f390c">Preparation</h4>
<div class="outline-text-4" id="text-org21f390c">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 000</a>.</li>
<li></li>
</ol>
</div>
</div>

<div id="outline-container-orge830a1e" class="outline-4">
<h4 id="orge830a1e">Exercise #1</h4>
<div class="outline-text-4" id="text-orge830a1e">
<p>
Write a <span class="cmd">for</span> loop to create a file with 10 lines of the
format:
</p>

<pre class="example" id="orge2ce34b">
Line #X
</pre>

<p>
Where 'X' is the line number.
</p>

<input type="button" onclick="toggle_solution('bashfor1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashfor1'>

<p>
To use <span class="cmd">for</span>, we just iterate over the values of 1 to 10:
</p>

<pre class="example" id="org9b5d767">
$ for X in 1 2 3 4 5 6 7 8 10; do
</pre>

<p>
Then, we echo "Line #X" but use <span class="cmd">$X</span> since that's our
variable:
</p>

<pre class="example" id="org53f931c">
$ for X in 1 2 3 4 5 6 7 8 10; do
&gt; echo "Line #$X"
&gt; done
Line #1
Line #2
Line #3
Line #4
Line #5
Line #6
Line #7
Line #8
Line #10
$
</pre>

<p>
All that's left is to redirect the output to a file:
</p>

<pre class="example" id="org67a4f88">
$ for X in 1 2 3 4 5 6 7 8 10; do
&gt; echo "Line #$X"
&gt; done &gt; output.txt
$
$ cat output.txt 
Line #1
Line #2
Line #3
Line #4
Line #5
Line #6
Line #7
Line #8
Line #10
$
</pre>

<p>
Optionally, we could have redirected the <span class="cmd">echo</span> at every
iteration as well:
</p>

<pre class="example" id="org43bbfa4">
$ for X in 1 2 3 4 5 6 7 8 10; do
&gt; echo "Line #$X" &gt;&gt; output.txt
&gt; done
$
</pre>

<p>
However, notice we needed the <i>append</i> output so we wouldn't lose
already written data.
</p>

<p>
The difference is: sometimes it's better/easier to just grab all
the output from a loop in one shot, and sometimes it's better to
<i>selectively</i> grab output from commands <b>within</b> the loop.
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org697290b" class="outline-4">
<h4 id="org697290b">Exercise #2</h4>
<div class="outline-text-4" id="text-org697290b">
<p>
Using the <span class="cmd">pe_counts.txt</span> file, write a script (just so
it's easier to debug) which outputs each topic via the form:
</p>

<pre class="example" id="org122bf55">
Topic covered: 'TOPIC' has NN questions
</pre>

<p>
Where <i>TOPIC</i> is the topic (2nd field) from the
<span class="cmd">pe_counts.txt</span> file and NN is the number of questions
for that topic (first field) <i><b>for topics which do not contain spaces</b></i>.
</p>

<p>
For example, output should look similar to this:
</p>

<pre class="example" id="orge16859a">
$ ./topics.bash
Topic covered: 'XFCE' has 2 questions
Topic covered: 'ls' has 1 questions
Topic covered: 'touch' has 2 questions
Topic covered: 'cat' has 1 questions
Topic covered: 'less' has 2 questions
Topic covered: 'man' has 1 questions
...
$
</pre>

<input type="button" onclick="toggle_solution('bashfor2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashfor2'>

<p>
Ready for this? There's actually several little details to
handle.  First, let's just build the template and write the
<span class="cmd">for</span> loop to iterate over each line of the
<span class="cmd">pe_counts.txt</span> file.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">for</span> LINE<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">cat</span> ~/cs2600/pe_counts.txt); <span style="color: #00ffff;">do</span>
    <span style="color: #b0c4de;">echo</span> $<span style="color: #eedd82;">LINE</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
which generates:
</p>

<pre class="example" id="org26c5e9d">
$ ./topics.bash
2,XFCE,1,2
5,Basic
Commands,1,2,3,4,5
1,ls,1
2,touch,1,2
1,cat,1
...
$
</pre>

<p>
Notice <i>Basic Commands</i> messes up our <span class="cmd">for</span> loop?  This
is why I added the constraint "&#x2026;for topics which do not contain
spaces."
</p>

<p>
So how do we cat lines with no spaces?  <span class="cmd">grep -v</span>!
</p>

<pre class="example" id="org871d87f">
$ grep -v '\s' ~/cs2600/pe_counts.txt
2,XFCE,1,2
1,ls,1
2,touch,1,2
1,cat,1
2,less,1,2
1,man,1
1,tmux,1
1,mkdir,1
2,wc,1,2
10,grep,1,2,3,4,5,6,7,8,9,10
$
</pre>

<p>
Why <span class="cmd">\s</span> and not an actual space?  Because <i>tabs</i> would
mess up our <span class="cmd">for</span> loop as well.
</p>

<p>
Ok, so now our script becomes:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">for</span> LINE<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">grep</span> -v <span style="color: #ffa07a;">'\s'</span> ~/cs2600/pe_counts.txt); <span style="color: #00ffff;">do</span>
    <span style="color: #b0c4de;">echo</span> $<span style="color: #eedd82;">LINE</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
Which correctly generates:
</p>

<pre class="example" id="org4f1f81f">
$ ./topics.bash
2,XFCE,1,2
1,ls,1
2,touch,1,2
1,cat,1
2,less,1,2
1,man,1
1,tmux,1
1,mkdir,1
2,wc,1,2
10,grep,1,2,3,4,5,6,7,8,9,10
$
</pre>

<p>
We now have valid values to iterate over.  The next step is to
extract the TOPIC and the COUNT.  While we <i>could</i> do this with a
single line of script text, let's take the longer approach so it
makes more sense (i.e. is <b>readable</b>!!).
</p>

<p>
This longer approach is to assign the topic and then the count to
variables.  Then we'll use those variables for our nice looking
output format.
</p>

<p>
For example:
</p>

<pre class="example" id="orgbbb9c5c">
$ # Presume LINE is "2,XFCE,1,2"
$
$ echo $LINE | cut -d',' -f2       # this gets us our TOPIC
XFCE
$ echo $LINE | cut -d',' -f1       # this gets us our NN
2
$
</pre>

<p>
So let's add this to our script:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">for</span> LINE<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">grep</span> -v <span style="color: #ffa07a;">'\s'</span> ~/cs2600/pe_counts.txt); <span style="color: #00ffff;">do</span>
    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">You can do these in either order</span>
    <span style="color: #eedd82;">TOPIC</span>=$(<span style="color: #fa8072;">echo</span> $<span style="color: #eedd82;">LINE</span> | cut -d<span style="color: #ffa07a;">','</span> -f2)
    <span style="color: #eedd82;">NN</span>=$(<span style="color: #fa8072;">echo</span> $<span style="color: #eedd82;">LINE</span> | cut -d<span style="color: #ffa07a;">','</span> -f1)

    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"$TOPIC  $NN"</span>    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">output just to verify our code is working.</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
with output:
</p>

<pre class="example" id="org478b52b">
$ ./topics.bash
XFCE  2
ls  1
touch  2
cat  1
less  2
man  1
tmux  1
mkdir  1
wc  2
grep  10
$
</pre>

<p>
All that's left is to modify the <span class="cmd">echo</span> line to match to
look required:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #00ffff;">for</span> LINE<span style="color: #00ffff;"> in</span> $(<span style="color: #fa8072;">grep</span> -v <span style="color: #ffa07a;">'\s'</span> ~/cs2600/pe_counts.txt); <span style="color: #00ffff;">do</span>
    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">You can do these in either order</span>
    <span style="color: #eedd82;">TOPIC</span>=$(<span style="color: #fa8072;">echo</span> $<span style="color: #eedd82;">LINE</span> | cut -d<span style="color: #ffa07a;">','</span> -f2)
    <span style="color: #eedd82;">NN</span>=$(<span style="color: #fa8072;">echo</span> $<span style="color: #eedd82;">LINE</span> | cut -d<span style="color: #ffa07a;">','</span> -f1)

    <span style="color: #b0c4de;">echo</span> echo <span style="color: #ffa07a;">"Topic covered: '$TOPIC' has $NN questions"</span>
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
to get:
</p>

<pre class="example" id="org1056cdd">
$ ./topics.bash
Topic covered: 'XFCE' has 2 questions
Topic covered: 'ls' has 1 questions
Topic covered: 'touch' has 2 questions
Topic covered: 'cat' has 1 questions
Topic covered: 'less' has 2 questions
Topic covered: 'man' has 1 questions
Topic covered: 'tmux' has 1 questions
Topic covered: 'mkdir' has 1 questions
Topic covered: 'wc' has 2 questions
Topic covered: 'grep' has 10 questions
$
</pre>

<p>
Notice we used single quotes around <span class="cmd">$TOPIC</span> in our
<span class="cmd">echo</span> line and yet our variable was still interpolated.
This is because the outer double quotes were <i>in effect</i> so the
inner single quotes had no impact.
</p>


<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org8a35596" class="outline-3">
<h3 id="org8a35596">Practice Exercises for <span class="cmd">bashwhile</span> <a id="org7654b15"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org8a35596">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org392eb75">Bash 'while'</a></td></tr></table>
</p>
</div>

<div id="outline-container-org3de5c6b" class="outline-4">
<h4 id="org3de5c6b">Preparation</h4>
<div class="outline-text-4" id="text-org3de5c6b">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 000</a>.</li>
</ol>
</div>
</div>


<div id="outline-container-orgcd6a82a" class="outline-4">
<h4 id="orgcd6a82a">Exercise #1</h4>
<div class="outline-text-4" id="text-orgcd6a82a">
<p>
Write a script to move the <span class="fname">~/cs2600/pe_counts.txt</span>
file to a temporary file (use <span class="cmd">mktemp</span>) stored in
<span class="cmd">~/cs2600/.tmp</span> and notify you the move is complete.
Then have your script wait until
<span class="fname">~/cs2600/pe_counts.txt</span> is put back by you.  When
done, have your script notify you it's back.
</p>

<pre class="example" id="org18afd4d">
$ wait.bash
~/cs2600/pe_counts.txt has been moved to ~/cs2600/.tmp/{some randome file}
Waiting...
~/cs2600/pe_counts.txt has been restored.
$
</pre>

<input type="button" onclick="toggle_solution('bashwhile1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashwhile1'>

<p>
Ahhhh, so much fun to be had!  Alright, first&#x2026;setup a script and
while we're at it (since the exercises should have been done by
now), we'll make sure <span class="cmd">~/cs2600/.tmp</span> exists.  If not,
we'll create it.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">TMP</span>=~/cs2600/.tmp

<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMP</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir -p $<span style="color: #eedd82;">TMP</span> &amp;&amp; <span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">TMP</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">'cd' is to just make sure the</span>
<span style="color: #00ffff;">fi</span>                             <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">script does not move on until</span>
                               <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">'mkdir' completes.</span>
</pre>
</div>

<p>
Next, let's prep a <span class="cmd">$TFILE</span> for our temporary file:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">TMP</span>=~/cs2600/.tmp

<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMP</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir -p $<span style="color: #eedd82;">TMP</span> &amp;&amp; <span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">TMP</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">'cd' is to just make sure the</span>
<span style="color: #00ffff;">fi</span>                             <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">script does not move on until</span>
                               <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">'mkdir' completes.</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p $<span style="color: #eedd82;">TMP</span>)
</pre>
</div>

<p>
Since the question didn't state a format for the temp file, we'll
just concern ourselves with the location.
</p>

<p>
Next, we move <span class="fname">~/cs2600/pe_counts.txt</span>.  However, let's
be safe and make sure it's there first.  If not, we'll "error
out".  Don't forget to notify the user of the move.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">SRC</span>=~/cs2600/pe_counts.txt
<span style="color: #eedd82;">TMP</span>=~/cs2600/.tmp

<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMP</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir -p $<span style="color: #eedd82;">TMP</span> &amp;&amp; <span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">TMP</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">'cd' is to just make sure the</span>
<span style="color: #00ffff;">fi</span>                             <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">script does not move on until</span>
                               <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">'mkdir' completes.</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p $<span style="color: #eedd82;">TMP</span>)

<span style="color: #00ffff;">if</span> [[ ! -r $<span style="color: #eedd82;">SRC</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Error: '$SRC' does not exist.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Could also use a flag again if we wanted.</span>
<span style="color: #00ffff;">fi</span>
mv $<span style="color: #eedd82;">SRC</span> $<span style="color: #eedd82;">TFILE</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"$SRC has been moved to $TFILE"</span>
</pre>
</div>

<p>
Notice I chose to implement a variable for our file instead of
typing it over and over.
</p>

<p>
Now, we're ready to wait until the user somehow (i.e. via the
command line), puts the file back.  Remember <span class="cmd">while</span>
bodies can't be empty and again, don't forget about notifying the
user: 
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">SRC</span>=~/cs2600/pe_counts.txt
<span style="color: #eedd82;">TMP</span>=~/cs2600/.tmp

<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMP</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir -p $<span style="color: #eedd82;">TMP</span> &amp;&amp; <span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">TMP</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">'cd' is to just make sure the</span>
<span style="color: #00ffff;">fi</span>                             <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">script does not move on until</span>
                               <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">'mkdir' completes.</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p $<span style="color: #eedd82;">TMP</span>)

<span style="color: #00ffff;">if</span> [[ ! -r $<span style="color: #eedd82;">SRC</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Error: '$SRC' does not exist.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Could also use a flag again if we wanted.</span>
<span style="color: #00ffff;">fi</span>
mv $<span style="color: #eedd82;">SRC</span> $<span style="color: #eedd82;">TFILE</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"$SRC has been moved to $TFILE"</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we wait...</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Waiting..."</span>
<span style="color: #00ffff;">while</span> [[ ! -r $<span style="color: #eedd82;">SRC</span> ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #eedd82;">x</span>=0
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
You could have used <span class="cmd">sleep</span>, but technically we haven't
covered that yet. 😢
</p>

<p>
Finally, once the file is <i>manually</i> put back and our
<span class="cmd">while</span> loop exits, we can notify the user.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">SRC</span>=~/cs2600/pe_counts.txt
<span style="color: #eedd82;">TMP</span>=~/cs2600/.tmp

<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">TMP</span> ]]; <span style="color: #00ffff;">then</span>
    mkdir -p $<span style="color: #eedd82;">TMP</span> &amp;&amp; <span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">TMP</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">'cd' is to just make sure the</span>
<span style="color: #00ffff;">fi</span>                             <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">script does not move on until</span>
                               <span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">'mkdir' completes.</span>

<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> -p $<span style="color: #eedd82;">TMP</span>)

<span style="color: #00ffff;">if</span> [[ ! -r $<span style="color: #eedd82;">SRC</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Error: '$SRC' does not exist.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Could also use a flag again if we wanted.</span>
<span style="color: #00ffff;">fi</span>
mv $<span style="color: #eedd82;">SRC</span> $<span style="color: #eedd82;">TFILE</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"$SRC has been moved to $TFILE"</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we wait...</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Waiting..."</span>
<span style="color: #00ffff;">while</span> [[ ! -r $<span style="color: #eedd82;">SRC</span> ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #eedd82;">x</span>=0
<span style="color: #00ffff;">done</span>

<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"'$SRC' has been restored."</span>

</pre>
</div>

<p>
Now let's test it:
</p>

<pre class="example" id="org16f6f53">
$ ./wait.bash
/home/instructor/cs2600/pe_counts.txt has been moved to /home/instructor/cs2600/.tmp/tmp.HnoueAgJb4
Waiting...
</pre>

<p>
Then I go to the command line:
</p>
<pre class="example" id="orgfc0821a">
$ cd ~/cs2600/.tmp
$ mv tmp.HnoueAgJb4 ../pe_counts.txt
$
</pre>

<p>
And the rest of the scripts output finishes:
</p>

<pre class="example" id="orgad81890">
$ ./wait.bash
/home/instructor/cs2600/pe_counts.txt has been moved to /home/instructor/cs2600/.tmp/tmp.HnoueAgJb4
Waiting...
'/home/instructor/cs2600/pe_counts.txt' has been restored.
$
</pre>




<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org00be6a7" class="outline-4">
<h4 id="org00be6a7">Exercise #2</h4>
<div class="outline-text-4" id="text-org00be6a7">
<p>
How about an easy one?  Write a script to take an integer on the
command line as a paramter, and print that many terms of the
Fibonacci sequence.
</p>

<p>
In case you don't know, the Fibonacci sequence start with 0
and 1. Then, every term is the sum of the previous 2 terms:
</p>

<pre class="example" id="org3ed38c4">
0, 1, 1, 2, 3, 5, 7, 9, ...
</pre>

<p>
You may assume the user provides you an integer of 0 or greater.
And yes, you'll need to account for the special cases of 0, 1, or
2 terms.
</p>

<input type="button" onclick="toggle_solution('bashwhile2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='bashwhile2'>

<p>
<i>So with this solution, I'm going to try only providing the snip-its we need rather than the entire script at every point.  Let me know which you prefer.</i>
</p>

<p>
Once again, let's just setup our script and get the user's integer
into a variable:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">N</span>=$<span style="color: #eedd82;">1</span>
</pre>
</div>

<p>
Next, let's handle the special cases if <span class="cmd">$N</span> is 0, 1 or
2:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">if</span> [[ $<span style="color: #eedd82;">N</span> -eq 0 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Then why are you running this script?!?! &#128545;  Terminating"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 1 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 2 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0, 1"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">At this point, we have an integer we can loop with and mathematically compute.</span>
</pre>
</div>

<p>
Now we're ready to loop until we've hit <span class="cmd">$N</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">TERM_NUMBER</span>=3
<span style="color: #00ffff;">while</span> [[ $<span style="color: #eedd82;">TERM_NUMBER</span> -le $<span style="color: #eedd82;">N</span> ]]; <span style="color: #00ffff;">do</span>

<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
Finally, the math&#x2026;since we're not using arrays, we need to
remember the previous 2 terms as we move along.  
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">At this point, we have an integer we can loop with and mathematically compute.</span>
<span style="color: #ff7f24;">#  </span><span style="color: #ff7f24;">However, no terms have been output...we must make sure to include "0, 1"</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0, 1"</span>
<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=0
<span style="color: #eedd82;">PREVIOUS_TERM</span>=1
<span style="color: #eedd82;">TERM</span>=-1             <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Will be computed later.</span>
<span style="color: #eedd82;">TERM_NUMBER</span>=3
<span style="color: #00ffff;">while</span> [[ $<span style="color: #eedd82;">TERM_NUMBER</span> -le $<span style="color: #eedd82;">N</span> ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #eedd82;">TERM</span>=$(( $<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span> + $<span style="color: #eedd82;">PREVIOUS_TERM</span> ))

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Note, the output starts with the 3rd term and will include a ", "</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">", $TERM"</span>

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we prep for the next round</span>
    <span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=$<span style="color: #eedd82;">PREVIOUS_TERM</span>
    <span style="color: #eedd82;">PREVIOUS_TERM</span>=$<span style="color: #eedd82;">TERM</span>
    <span style="color: #eedd82;">TERM_NUMBER</span>=$(( $<span style="color: #eedd82;">TERM_NUMBER</span> + 1 ))
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
So far, the script looks like this:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">N</span>=$<span style="color: #eedd82;">1</span>
<span style="color: #00ffff;">if</span> [[ $<span style="color: #eedd82;">N</span> -eq 0 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Then why are you running this script?!?! &#128545;  Terminating"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 1 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 2 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0, 1"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0, 1"</span>
<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=0
<span style="color: #eedd82;">PREVIOUS_TERM</span>=1
<span style="color: #eedd82;">TERM</span>=-1             <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Will be computed later.</span>
<span style="color: #eedd82;">TERM_NUMBER</span>=3
<span style="color: #00ffff;">while</span> [[ $<span style="color: #eedd82;">TERM_NUMBER</span> -le $<span style="color: #eedd82;">N</span> ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #eedd82;">TERM</span>=$(( $<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span> + $<span style="color: #eedd82;">PREVIOUS_TERM</span> ))

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Note, the output starts with the 3rd term and will include a ", "</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">", $TERM"</span>

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we prep for the next round</span>
    <span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=$<span style="color: #eedd82;">PREVIOUS_TERM</span>
    <span style="color: #eedd82;">PREVIOUS_TERM</span>=$<span style="color: #eedd82;">TERM</span>
    <span style="color: #eedd82;">TERM_NUMBER</span>=$(( $<span style="color: #eedd82;">TERM_NUMBER</span> + 1 ))
<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
If we run it now, let's see what we get:
</p>

<pre class="example" id="orga643d20">
$ ./fib.bash 0
Then why are you running this script?!?! 😡  Terminating
$ ./fib.bash 1
0
$ ./fib.bash 2
0, 1
$ ./fib.bash 3
0, 1
, 1
$ ./fib.bash 5
0, 1
, 1
, 2
, 3
$
</pre>

<p>
Ok, not bad but do you see the bug?  When looping our
<span class="cmd">echo</span> is putting out a '\n' when we don't want it to.
Let's fix that:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">N</span>=$<span style="color: #eedd82;">1</span>
<span style="color: #00ffff;">if</span> [[ $<span style="color: #eedd82;">N</span> -eq 0 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"Then why are you running this script?!?! &#128545;  Terminating"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 1 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">elif</span> [[ $<span style="color: #eedd82;">N</span> -eq 2 ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"0, 1"</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>
<span style="color: #b0c4de;">echo</span> -n <span style="color: #ffa07a;">"0, 1"</span>     <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Be sure no \n is output</span>
<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=0
<span style="color: #eedd82;">PREVIOUS_TERM</span>=1
<span style="color: #eedd82;">TERM</span>=-1             <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Will be computed later.</span>
<span style="color: #eedd82;">TERM_NUMBER</span>=3
<span style="color: #00ffff;">while</span> [[ $<span style="color: #eedd82;">TERM_NUMBER</span> -le $<span style="color: #eedd82;">N</span> ]]; <span style="color: #00ffff;">do</span>
    <span style="color: #eedd82;">TERM</span>=$(( $<span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span> + $<span style="color: #eedd82;">PREVIOUS_TERM</span> ))

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Note, the output starts with the 3rd term and will include a ", "</span>
    <span style="color: #b0c4de;">echo</span> -n <span style="color: #ffa07a;">", $TERM"</span>   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">ensure no '\n'</span>

    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we prep for the next round</span>
    <span style="color: #eedd82;">SECOND_PREVIOUS_TERM</span>=$<span style="color: #eedd82;">PREVIOUS_TERM</span>
    <span style="color: #eedd82;">PREVIOUS_TERM</span>=$<span style="color: #eedd82;">TERM</span>
    <span style="color: #eedd82;">TERM_NUMBER</span>=$(( $<span style="color: #eedd82;">TERM_NUMBER</span> + 1 ))
<span style="color: #00ffff;">done</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Since our previous 'echo's didn't output \n, we should do that now:</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">""</span>

</pre>
</div>

<p>
We already saw arguments of 0, 1, and 2 work.  So let's just
re-run with 3 or more:
</p>

<pre class="example" id="orgffba6b7">
$ ./fib.bash 2
0, 1
$ ./fib.bash 3
0, 1, 1
$ ./fib.bash 5
0, 1, 1, 2, 3
$ ./fib.bash 9
0, 1, 1, 2, 3, 5, 8, 13, 21
$
</pre>

<p>
Looks good!  Let's go for broke and see what this baby can do!
</p>

<pre class="example" id="orgef598ef">
$ ./fib.bash 20
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181
$ ./fib.bash 40
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,
196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,
9227465, 14930352, 24157817, 39088169, 63245986 
$ ./fib.bash 200
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,
196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,
9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141,
267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073,
4807526976, 7778742049, 12586269025, 20365011074, 32951280099,
53316291173, 86267571272, 139583862445, 225851433717, 365435296162,
591286729879, 956722026041, 1548008755920, 2504730781961,
4052739537881, 6557470319842, 10610209857723, 17167680177565,
27777890035288, 44945570212853, 72723460248141, 117669030460994,
190392490709135, 308061521170129, 498454011879264, 806515533049393,
1304969544928657, 2111485077978050, 3416454622906707,
5527939700884757, 8944394323791464, 14472334024676221,
23416728348467685, 37889062373143906, 61305790721611591,
99194853094755497, 160500643816367088, 259695496911122585,
420196140727489673, 679891637638612258, 1100087778366101931,
1779979416004714189, 2880067194370816120, 4660046610375530309,
7540113804746346429, -6246583658587674878, 1293530146158671551,
-4953053512429003327, -3659523366270331776, -8612576878699335103,
6174643828739884737, -2437933049959450366, 3736710778780434371,
1298777728820984005, 5035488507601418376, 6334266236422402381,
-7076989329685730859, -742723093263328478, -7819712422949059337,
-8562435516212387815, 2064596134548104464, -6497839381664283351,
-4433243247116178887, 7515661444929089378, 3082418197812910491,
-7848664430967551747, -4766246233154641256, 5831833409587358613,
1065587176432717357, 6897420586020075970, 7963007762452793327,
-3586315725236682319, 4376692037216111008, 790376311979428689,
5167068349195539697, 5957444661174968386, -7322231063339043533,
-1364786402164075147, -8687017465503118680, 8394940206042357789,
-292077259460760891, 8102862946581596898, 7810785687120836007,
-2533095440007118711, 5277690247113717296, 2744594807106598585,
8022285054220315881, -7679864212382637150, 342420841837678731,
-7337443370544958419, -6995022528707279688, 4114278174457313509,
-2880744354249966179, 1233533820207347330, -1647210534042618849,
-413676713835271519, -2060887247877890368, -2474563961713161887,
-4535451209591052255, -7010015171304214142, 6901277692814285219,
-108737478489928923, 6792540214324356296, 6683802735834427373,
-4970401123550767947, 1713401612283659426, -3256999511267108521,
-1543597898983449095, -4800597410250557616, -6344195309234006711,
7301951354224987289, 957756044990980578, 8259707399215967867,
9217463444206948445, -969573230286635304, 8247890213920313141,
7278316983633677837, -2920536876155560638, 4357780107478117199,
1437243231322556561, 5795023338800673760, 7232266570123230321,
-5419454164785647535, 1812812405337582786, -3606641759448064749,
-1793829354110481963, -5400471113558546712, -7194300467669028675,
5851972492481976229, -1342327975187052446, 4509644517294923783,
3167316542107871337, 7676961059402795120, -7602466472198885159,
74494587203909961, -7527971884994975198, -7453477297791065237,
3465294890923511181, -3988182406867554056, -522887515944042875,
-4511069922811596931, -5033957438755639806, 8901716712142314879,
3867759273386675073, -5677268088180561664, -1809508814793886591,
-7486776902974448255, 9150458355941216770, 1663681452966768515,
-7632604264801566331, -5968922811834797816, 4845216997073187469 
$
</pre>

<p>
I manually wrapped the output so you could see it easier else on
this web view you would've had to scroll right A LOT!
</p>

<p>
However, do you notice anything?  Take a look at the
<span class="cmd">./fib.bash 200</span> output line starting with
'7540113804746346429'.  What do you notice?
</p>

<p>
The term turned from <i>positive</i> to <i>negative</i>! This is an example
of a <i>buffer overflow</i>.  Basically it means rather than generating
an error, the bits (0s and 1s) just wrapped.  For example consider
the sequence for 3 bits: 000, 001, 010,&#x2026;,110, 111.  111 + 1
wraps back to 000&#x2026;an overflow.  We may encounter this with C as
well at some point.
</p>


<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org652ecdc" class="outline-3">
<h3 id="org652ecdc">Practice Exercises for <span class="cmd">find</span> <a id="org3b430e8"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org652ecdc">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org9b8d188">find</a></td></tr></table>
</p>
</div>

<div id="outline-container-orgd4e6e1c" class="outline-4">
<h4 id="orgd4e6e1c">Preparation</h4>
<div class="outline-text-4" id="text-orgd4e6e1c">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 005</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-orgbc9da2f" class="outline-4">
<h4 id="orgbc9da2f">Exercise #1</h4>
<div class="outline-text-4" id="text-orgbc9da2f">
<p>
Find any <span class="fname">.c</span> files in the
<span class="fname">~/cs2600/wpunix-main</span> subtree.
</p>

<input type="button" onclick="toggle_solution('find1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='find1'>

<pre class="example" id="orgf859d14">
$ find ~/cs2600/wpunix-main -type f -iname '*.c'
/home/instructor/cs2600/wpunix-main/util/charset.c
/home/instructor/cs2600/wpunix-main/util/grsutil.c
/home/instructor/cs2600/wpunix-main/intercept/hook.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/x86_misc.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/x86_format.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/x86_imm.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/ia32_reg.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/ia32_operand.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/x86_disasm.c
/home/instructor/cs2600/wpunix-main/intercept/libdisasm/ia32_modrm.c
...
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org0f586c6" class="outline-4">
<h4 id="org0f586c6">Exercise #2</h4>
<div class="outline-text-4" id="text-org0f586c6">
<p>
In the last exercise
<span class="fname">/home/instructor/cs2600/wpunix-main</span> was very
repetitive.  This time go into that directory first and then find
any <span class="fname">.c</span> files. 
</p>

<input type="button" onclick="toggle_solution('find2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='find2'>

<p>
Same thing but we <span class="cmd">cd</span> first:
</p>

<pre class="example" id="orgc299f4c">
$ cd ~/cs2600/wpunix-main
$ find . -type f -iname '*.c'       # notice the '.' for location!
./util/charset.c
./util/grsutil.c
./intercept/hook.c
./intercept/libdisasm/x86_misc.c
./intercept/libdisasm/x86_format.c
./intercept/libdisasm/x86_imm.c
./intercept/libdisasm/ia32_reg.c
./intercept/libdisasm/ia32_operand.c
./intercept/libdisasm/x86_disasm.c
./intercept/libdisasm/ia32_modrm.c
...
$ 
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org9655c4a" class="outline-4">
<h4 id="org9655c4a">Exercise #3</h4>
<div class="outline-text-4" id="text-org9655c4a">
<p>
Search for image files inside the Wordperfect source tree.
However, do so by writing a script to search for any image files -
files ending in <span class="fname">.jpg</span>, <span class="fname">.png</span>, <span class="fname">.webp</span>, or
<span class="fname">.gif</span>.  Be sure to account for upper or lower-case.
</p>

<p>
Have the location to search within be a command line parameter
(passed in on the command line), so our work will simply be:
</p>

<pre class="example" id="org220cca1">
$ ./findimage.bash ~/cs2600/wpunix-main
</pre>

<input type="button" onclick="toggle_solution('find3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='find3'>

<p>
Woohoo, here we go!
</p>

<p>
First, setup the script and get the command line parameter into a
variable for readability:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">DIR</span>=$<span style="color: #eedd82;">1</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">For good measure, let's make sure it exists:</span>
<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">DIR</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: $DIR does not exist or is not a directory.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

</pre>
</div>

<p>
Next, let's loop through our image extention options:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #00ffff;">for</span> EXT<span style="color: #00ffff;"> in</span> jpg png webp gif; <span style="color: #00ffff;">do</span>

<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
In fact, let's make the list of extensions a variable so if we
want to add more, we simply modify our variable:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #eedd82;">EXTENSIONS</span>=<span style="color: #ffa07a;">"jpg png webp gif"</span>
<span style="color: #00ffff;">for</span> EXT<span style="color: #00ffff;"> in</span> $<span style="color: #eedd82;">EXTENSIONS</span>; <span style="color: #00ffff;">do</span>

<span style="color: #00ffff;">done</span>
</pre>
</div>

<p>
In the full script, we'll put <span class="cmd">$EXTENTIONS</span> at the top of
our script (typically where <i>configuration</i> data goes).
</p>

<p>
Now, for each extention, we search the targe directory tree for
files ending in those extensions:
</p>

<div class="org-src-container">
<pre class="src src-sh">
find $<span style="color: #eedd82;">DIR</span> -type f -iname <span style="color: #ffa07a;">\*</span>.$<span style="color: #eedd82;">EXT</span>
</pre>
</div>

<p>
Altogether:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">DIR</span>=$<span style="color: #eedd82;">1</span>
<span style="color: #eedd82;">EXTENSIONS</span>=<span style="color: #ffa07a;">"jpg png webp gif"</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">For good measure, let's make sure it exists:</span>
<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">DIR</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: $DIR does not exist or is not a directory.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #00ffff;">for</span> EXT<span style="color: #00ffff;"> in</span> $<span style="color: #eedd82;">EXTENSIONS</span>; <span style="color: #00ffff;">do</span>
    find $<span style="color: #eedd82;">DIR</span> -type f -iname <span style="color: #ffa07a;">\*</span>.$<span style="color: #eedd82;">EXT</span>
<span style="color: #00ffff;">done</span>

</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="org50d6aff">
$ ./findimage.bash ~/cs2600/wpunix-main/
/home/instructor/cs2600/wpunix-main/doc/wpscreenshot-sixels.png
/home/instructor/cs2600/wpunix-main/doc/wpscreenshot-layout.png
$
</pre>

<p>
As a bonus, can you do a long listing for those found images?
Hint: we can use the <span class="cmd">while read</span> stunt:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">DIR</span>=$<span style="color: #eedd82;">1</span>
<span style="color: #eedd82;">EXTENSIONS</span>=<span style="color: #ffa07a;">"jpg png webp gif"</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">For good measure, let's make sure it exists:</span>
<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">DIR</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: $DIR does not exist or is not a directory.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #00ffff;">for</span> EXT<span style="color: #00ffff;"> in</span> $<span style="color: #eedd82;">EXTENSIONS</span>; <span style="color: #00ffff;">do</span>
    find $<span style="color: #eedd82;">DIR</span> -type f -iname <span style="color: #ffa07a;">\*</span>.$<span style="color: #eedd82;">EXT</span> | <span style="color: #00ffff;">while </span><span style="color: #b0c4de;">read</span> FILE; <span style="color: #00ffff;">do</span>
        ls -alF $<span style="color: #eedd82;">FILE</span>
    <span style="color: #00ffff;">done</span>
<span style="color: #00ffff;">done</span>

</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="orge8e47c5">
$ ./findimage.bash ~/cs2600/wpunix-main/
-rw-rw---- 1 instructor instructor 25727 Aug 28 12:29 /home/instructor/cs2600/wpunix-main/doc/wpscreenshot-sixels.png
-rw-rw---- 1 instructor instructor 67951 Aug 28 12:29 /home/instructor/cs2600/wpunix-main/doc/wpscreenshot-layout.png
$
</pre>

<p>
One last tweak&#x2026;can you reduce the amount of path/filename info
in the long listing?  Hint: <span class="cmd">cd</span> then <span class="cmd">cd -</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #eedd82;">DIR</span>=$<span style="color: #eedd82;">1</span>
<span style="color: #eedd82;">EXTENSIONS</span>=<span style="color: #ffa07a;">"jpg png webp gif"</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">For good measure, let's make sure it exists:</span>
<span style="color: #00ffff;">if</span> [[ ! -d $<span style="color: #eedd82;">DIR</span> ]]; <span style="color: #00ffff;">then</span>
    <span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"ERROR: $DIR does not exist or is not a directory.  Terminating."</span>
    <span style="color: #00ffff;">exit</span>
<span style="color: #00ffff;">fi</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">CHANGE INTO $DIR first</span>
<span style="color: #b0c4de;">cd</span> $<span style="color: #eedd82;">DIR</span>
<span style="color: #00ffff;">for</span> EXT<span style="color: #00ffff;"> in</span> $<span style="color: #eedd82;">EXTENSIONS</span>; <span style="color: #00ffff;">do</span>
    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now just search 'here', '.'</span>
    find . -type f -iname <span style="color: #ffa07a;">\*</span>.$<span style="color: #eedd82;">EXT</span> | <span style="color: #00ffff;">while </span><span style="color: #b0c4de;">read</span> FILE; <span style="color: #00ffff;">do</span>
              ls -alF $<span style="color: #eedd82;">FILE</span>
    <span style="color: #00ffff;">done</span>
<span style="color: #00ffff;">done</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Then, RETURN BACK to where you were</span>
<span style="color: #b0c4de;">cd</span> -

</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="org324fe59">
$ ./findimage.bash ~/cs2600/wpunix-main/
-rw-rw---- 1 instructor instructor 25727 Aug 28 12:29 ./doc/wpscreenshot-sixels.png
-rw-rw---- 1 instructor instructor 67951 Aug 28 12:29 ./doc/wpscreenshot-layout.png
/home/instructor/workspace
$
</pre>

<p>
Caveat: Notice the <span class="cmd">cd -</span> outputs the directory where we
were?  Ick.  Can we get rid of that?  HINT: <span class="cmd">> /dev/null</span>.  I'll let you do that part.
</p>


<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-orgd6a8d86" class="outline-3">
<h3 id="orgd6a8d86">Practice Exercises for <span class="cmd">sleep</span> <a id="org1d71e4f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-orgd6a8d86">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: <a href="#org454ff88">sleep</a></td></tr></table>
</p>
</div>

<div id="outline-container-org7d391ed" class="outline-4">
<h4 id="org7d391ed">Preparation</h4>
<div class="outline-text-4" id="text-org7d391ed">
<ol class="org-ol">
<li>None.</li>
</ol>
</div>
</div>

<div id="outline-container-org468de34" class="outline-4">
<h4 id="org468de34">Exercise #1</h4>
<div class="outline-text-4" id="text-org468de34">
<p>
Come up with at least 4 ways to pause a script for 45 minutes.
</p>

<input type="button" onclick="toggle_solution('sleep1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='sleep1'>

<p>
Just use different variations of seconds, minutes, hours and days
(I wouldn't recommend typing these):
</p>

<pre class="example" id="orgef5f3a0">
$ sleep 2700   # Easier would have been $(( 45 * 60 ))
$ sleep 45m
$ sleep 0.75h
$ sleep $(( 45 / ( 60 * 60 * 24 ) ))d  # WRONG!!!  Bash can't do fractions!
$ sleep 0.000521d                      # Have to do math by hand
                                       #   or a little hacking with 'bc -l'
</pre>

<p>
</div>
</p>
</div>
</div>



<div id="outline-container-org14ace1a" class="outline-4">
<h4 id="org14ace1a">Exercise #2</h4>
<div class="outline-text-4" id="text-org14ace1a">
<p>
Write a script which takes 3 integer values as command line
parameters: hours, minutes, seconds.  You may assume all 3 values
are given and all 3 values are 0 or more.
</p>

<p>
Then, have your script wait that long before continuing.  For this
exercise, just <span class="cmd">echo</span> something when done.
</p>

<pre class="example" id="org9d33dc8">
$ pause 0 0 3
Waiting 3 seconds...done
$
$ pause 0 1 20
Waiting 80 seconds...done
$
</pre>

<input type="button" onclick="toggle_solution('sleep2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='sleep2'>

<p>
The solution to this is related to the previous question in that
we should determine the number of seconds in total and then just
call <span class="cmd">sleep</span> with that value.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/usr/bin/</span><span style="color: #00ffff;">bash</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">This time, I'm going to skip the variable assignment because we'll</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">only use them one time.</span>

<span style="color: #ff7f24;">#          </span><span style="color: #ff7f24;">3600s/hr           60s/m       1s/s</span>
<span style="color: #eedd82;">DELAY</span>=$(( ( $<span style="color: #eedd82;">1</span> * 60 * 60 ) + ( $<span style="color: #eedd82;">2</span> * 60 ) + $<span style="color: #eedd82;">3</span> ))
<span style="color: #b0c4de;">echo</span> -n <span style="color: #ffa07a;">"Waiting $DELAY seconds..."</span>
sleep $<span style="color: #eedd82;">DELAY</span>
<span style="color: #b0c4de;">echo</span> <span style="color: #ffa07a;">"done."</span>

</pre>
</div>

<p>
and the output:
</p>

<pre class="example" id="orgf90db9b">
$ ./delay.bash 0 0 3
Waiting 3 seconds...done.
$ ./delay.bash 0 1 20
Waiting 80 seconds...done.
$ ./delay.bash 0 0 15
Waiting 15 seconds...done
$ ./delay.bash 2 12 33
Waiting 7953 seconds...done.
$
</pre>

<p>
(Ok, to be fair, I didn't actually wait 2+ hours to test that last
one. 😇)
</p>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-org5d8e3d9" class="outline-3">
<h3 id="org5d8e3d9">Practice Exercises for <span class="cmd">procs</span> <a id="orgc7a9425"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-org5d8e3d9">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: 
<a href="#orgc7a7da1">Processes</a>,
<a href="#org8c4ea74">Viewing Processes</a>,
<a href="#org7687db3">Killing Processes</a>
</td></tr></table>
</p>
</div>

<div id="outline-container-orga2cf25a" class="outline-4">
<h4 id="orga2cf25a">Preparation</h4>
<div class="outline-text-4" id="text-orga2cf25a">
<ol class="org-ol">
<li>Be sure you run <span class="cmd">tmux</span>.</li>
<li>Then, launch four sleep commands and give each a different amount of</li>
</ol>
<p>
time, in days.  Be sure to include the '&amp;' after the command so
they go to background:
</p>
<pre class="example" id="org377a652">
$ sleep 2d &amp;
$ sleep 3d &amp;
$ sleep 4d &amp;
$ sleep 5d &amp;
</pre>
<ol class="org-ol">
<li>Then open/create a new <span class="cmd">tmux</span> window.</li>
</ol>
</div>
</div>

<div id="outline-container-org0f3948e" class="outline-4">
<h4 id="org0f3948e">Exercise #1</h4>
<div class="outline-text-4" id="text-org0f3948e">
<p>
Find the PID for <span class="cmd">sleep 2d</span>
</p>


<input type="button" onclick="toggle_solution('procs1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='procs1'>

<p>
Since we are not in the window where the <span class="cmd">sleep</span> commands
were launched, just using <span class="cmd">ps</span> won't work.  Just
<span class="cmd">ps</span> only show our processes which are linked to our
curren window.  We need to use <span class="cmd">-x</span>:
</p>

<pre class="example" id="orgd77898c">
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18923 pts/2    S      0:00 sleep 2d
  18924 pts/2    S      0:00 sleep 3d
  18925 pts/2    S      0:00 sleep 4d
  18926 pts/2    S      0:00 sleep 5d
  18976 pts/4    S      0:00 -bash
  19051 pts/4    R+     0:00 ps x
$ 
</pre>

<p>
From there we see <span class="cmd">sleep 2d</span>'s PID is 18923 (in my case).
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org4853ce6" class="outline-4">
<h4 id="org4853ce6">Exercise #2</h4>
<div class="outline-text-4" id="text-org4853ce6">
<p>
Terminate <span class="cmd">sleep 5d</span>.
</p>

<input type="button" onclick="toggle_solution('procs2');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='procs2'>

<p>
For me, the PID for <span class="cmd">sleep 5d</span> is 18926.  So I just pass
that to <span class="cmd">kill</span>:
</p>

<pre class="example" id="org9af5882">
$ kill 18926
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18923 pts/2    S      0:00 sleep 2d
  18924 pts/2    S      0:00 sleep 3d
  18925 pts/2    S      0:00 sleep 4d
  18976 pts/4    S      0:00 -bash
  19090 pts/4    R+     0:00 ps x
$
</pre>

<p>
No more <span class="cmd">sleep 5d</span>
</p>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org9cbaeb4" class="outline-4">
<h4 id="org9cbaeb4">Exercise #3</h4>
<div class="outline-text-4" id="text-org9cbaeb4">
<p>
Using a single <span class="cmd">kill</span> command, murder the other
<span class="cmd">sleep</span> processes.
</p>

<input type="button" onclick="toggle_solution('procs3');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='procs3'>

<p>
To "murder" the process, we pass <span class="cmd">kill</span> the
<span class="cmd">-KILL</span> signal.  To do this in a single <span class="cmd">kill</span>
command, we simpy put all the PIDs on the same command line.
</p>

<p>
So for me:
</p>
<pre class="example" id="org16df00e">
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18923 pts/2    S      0:00 sleep 2d
  18924 pts/2    S      0:00 sleep 3d
  18925 pts/2    S      0:00 sleep 4d
  18976 pts/4    S      0:00 -bash
  19114 pts/4    R+     0:00 ps x
$ kill -KILL 18923 18924 18925
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18976 pts/4    S      0:00 -bash
  19122 pts/4    R+     0:00 ps x
$
</pre>

<p>
</div>
</p>
</div>
</div>


<div id="outline-container-org70e5412" class="outline-4">
<h4 id="org70e5412">Exercise #4</h4>
<div class="outline-text-4" id="text-org70e5412">
<p>
Go back to the first <span class="cmd">tmux</span> window where you launched the
sleep commands, and do it again:
</p>

<pre class="example" id="orgfe6b117">
$ sleep 2d &amp;
$ sleep 3d &amp;
$ sleep 4d &amp;
$ sleep 5d &amp;
</pre>

<p>
Kill all the <span class="cmd">sleep</span> processes in a single command
pipeline without using your eyes to record the PIDs (i.e. as if
you're running a script).
</p>

<input type="button" onclick="toggle_solution('procs4');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='procs4'>

<p>
So once you have the <span class="cmd">sleep</span>s running again, you should
see something like this:
</p>

<pre class="example" id="org69365b7">
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18976 pts/4    S      0:00 -bash
  19148 pts/2    S      0:00 sleep 2d
  19149 pts/2    S      0:00 sleep 3d
  19150 pts/2    S      0:00 sleep 4d
  19151 pts/2    S      0:00 sleep 5d
  19156 pts/4    R+     0:00 ps x
$
</pre>

<p>
But the goal of this exercise is to <span class="cmd">kill</span> all the
<span class="cmd">sleep</span> processes in one command line without actually
knowing the PIDs.  So first, let's workout a command line which
gets us our <span class="cmd">sleep</span> command PIDs.
</p>

<p>
First, let's just get our <span class="cmd">sleep</span> lines of <span class="cmd">ps x</span>:
</p>

<pre class="example" id="org8be1162">
$ ps x | grep '\ssleep [0-9]d$'
  19148 pts/2    S      0:00 sleep 2d
  19149 pts/2    S      0:00 sleep 3d
  19150 pts/2    S      0:00 sleep 4d
  19151 pts/2    S      0:00 sleep 5d
$
</pre>

<p>
Why such a complex RE for <span class="cmd">grep</span>?  In order to make sure
we get <i>exactly</i> the lines we want and not other lines which may
contain the word "sleep".  The more accurate you can make your RE,
the safer you'll be to not accidentally <span class="cmd">kill</span> something
you didn't mean to.
</p>

<p>
Next, let's extract the PIDs.  We've not learned <span class="cmd">awk</span>
yet, so <span class="cmd">cut</span> will have to do.  Let's experiement a bit
to see if the output contains spaces and/or tabs:
</p>

<pre class="example" id="org20c1adc">
$ ps x | grep '\ssleep [0-9]d$' | tr -s ' '
 19148 pts/2 S 0:00 sleep 2d
 19149 pts/2 S 0:00 sleep 3d
 19150 pts/2 S 0:00 sleep 4d
 19151 pts/2 S 0:00 sleep 5d
$ ps x | grep '\ssleep [0-9]d$' | tr -s ' ' | cut -d' ' -f2
19148
19149
19150
19151
$
</pre>

<p>
Ok, well that wasn't too bad.  Finally, can we just pipe those
into <span class="cmd">kill</span>?
</p>

<pre class="example" id="org9d72e17">
$ ps x | grep '\ssleep [0-9]d$' | tr -s ' ' | cut -d' ' -f2 | kill
kill: usage: kill [-s sigspec | -n signum | -sigspec] pid | jobspec ... or kill -l [sigspec]
$
</pre>

<p>
Nope.  Ok then, we'll have to have our command pipeline output be
the output of a command substitution to end up as arguments for
<span class="cmd">kill</span>:
</p>

<pre class="example" id="org5738552">
$ kill $(ps x | grep '\ssleep [0-9]d$' | tr -s ' ' | cut -d' ' -f2)
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18976 pts/4    S      0:00 -bash
  19262 pts/4    R+     0:00 ps x
$
</pre>

<p>
Done.
</p>

<p>
BONUS: There is a command called <span class="cmd">xargs</span> which solves the
problem we faced above by taking output and providing the output
as command line args for us:
</p>

<pre class="example" id="org8a061b3">
$ ps x                                  # sleep commands running
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18976 pts/4    S      0:00 -bash
  19301 pts/2    S      0:00 sleep 2d
  19302 pts/2    S      0:00 sleep 3d
  19303 pts/2    S      0:00 sleep 4d
  19304 pts/2    S      0:00 sleep 5d
  19317 pts/4    R+     0:00 ps x
$
$ # Get the PIDs
$ ps x | grep '\ssleep [0-9]d$' | tr -s ' ' | cut -d' ' -f2
19301
19302
19303
19304
$
$ # Now pipe that into 'xargs' and tell 'xargs' to execute 'kill' on each
$ ps x | grep '\ssleep [0-9]d$' | tr -s ' ' | cut -d' ' -f2 | xargs kill
$ ps x
    PID TTY      STAT   TIME COMMAND
  15754 pts/2    S+     0:00 -bash
  18976 pts/4    S      0:00 -bash
  19337 pts/4    R+     0:00 ps x
$
</pre>

<p>
</div>
</p>
</div>
</div>
</div>

<div id="outline-container-orga87dd06" class="outline-3">
<h3 id="orga87dd06">Challenge Exercise: <span class="cmd">World City Report</span> <a id="orgec1714a"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="PracticeExercises">PracticeExercises</span></span></h3>
<div class="outline-text-3" id="text-orga87dd06">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Lecture Slides: 
</p>

<p>
</td></tr></table>
</p>
</div>

<div id="outline-container-org6cfa136" class="outline-4">
<h4 id="org6cfa136">Preparation</h4>
<div class="outline-text-4" id="text-org6cfa136">
<ol class="org-ol">
<li>Please implement <a href="#org11b62ee">Support Package 003</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-org7e9daa9" class="outline-4">
<h4 id="org7e9daa9">Exercise #1</h4>
<div class="outline-text-4" id="text-org7e9daa9">
<p>
Using the <span class="fname">worldcities.csv</span> data, write a program to
generate a report of countries, cities, and their Lat/Lon coords.
Use input redirection to get the data into the program.  (Hint:
Pipes work too.)
</p>

<p>
Left justify the cities/countries and right justify the coords.
Sort the report by country, then by city (ignore case).  Field
widths should be the maximum length of each column and columns
should be separated by 2 spaces.
</p>

<p>
Here is what the output should look like:
</p>

<pre class="example" id="org1269c0c">
Antigua and Barbuda  Saint John’s    17.1167   -61.8500
...
</pre>

<input type="button" onclick="toggle_solution('ccc1');" value="Show/Hide Solution"><br><br>
<div  style="display: none; border: solid blue 2px; border-radius: 4px; background-color: #eeffee;" id='ccc1'>

<p>
Left for class demo, if time, and then for student to complete.
</p>

<p>
Tips:
</p>
<ul class="org-ul">
<li>Before you start coding, consider how you'll store the data.
Your data structure can mean the difference between horrendous
code or smooth code.</li>
<li><p>
Test your code with only a subset of the
<span class="fname">worldcities.csv</span> file:
</p>
<pre class="example" id="orga75127f">
$ head worldcities.csv | ./myprogram
</pre>
<p>
Once you're program works, then change <span class="cmd">head</span> to
<span class="cmd">cat</span>.
</p></li>
<li>Don't try to make efficient code at this point.  Create more
functions to break the project into several smaller tasks.</li>
<li>Once things are working, <i>then</i> try breaking it up into .h/.c
files which serve specific purposes, if needed.</li>
</ul>

<p>
</div>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd5b63ea" class="outline-2">
<h2 id="orgd5b63ea">Excluded Material</h2>
<div class="outline-text-2" id="text-orgd5b63ea">
</div>
<div id="outline-container-orgca9bdc7" class="outline-3">
<h3 id="orgca9bdc7">Startup Files&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgca9bdc7">
<p>
When you log in to your system, or launch another bash terminal,
there are certain files which <i>automatically</i> get processed
(executed).  These are called "Startup Files".
</p>
</div>
<div id="outline-container-org3bc6a77" class="outline-4">
<h4 id="org3bc6a77"><span class="fname">~/.profile</span></h4>
<div class="outline-text-4" id="text-org3bc6a77">
<p>
The <span class="cmd">~/.profile</span> startup file is where you can place
commands and other items to be executed or set (environment
variables) when you first log in to your system.
<span class="fname">~/.profile</span> is only read and processed AT FIRST LOGIN.
</p>
</div>
</div>

<div id="outline-container-org3809c04" class="outline-4">
<h4 id="org3809c04"><span class="fname">~/.bashrc</span></h4>
<div class="outline-text-4" id="text-org3809c04">
<p>
The <span class="cmd">~/.bashrc</span> startup file is similar to
<span class="fname">~/.profile</span> but will be processed/executed <b>every time
you start a bash shell</b>.
</p>
</div>
</div>

<div id="outline-container-org50cb22b" class="outline-4">
<h4 id="org50cb22b"><span class="fname">~/.bash_aliases</span></h4>
<div class="outline-text-4" id="text-org50cb22b">
<p>
Ironically, the <span class="fname">~/.bash_aliases</span> file is not read on
login.  Instead, you should read it via <span class="fname">~/.profile</span> or
<span class="fname">~/.bashrc</span>.
</p>

<p>
For example, inside the <span class="fname">~/.bashrc</span>:
</p>
<pre class="example" id="orgf0dce52">
if [[ -r ~/.bash_aliases ]]; then
  . ~/.bash_aliases
fi
</pre>

<p>
We haven't talked about 'if', '[[', or '.', but you get the idea. 
</p>
</div>
</div>

<div id="outline-container-orge8ab403" class="outline-4">
<h4 id="orge8ab403">Example</h4>
<div class="outline-text-4" id="text-orge8ab403">
<p>
Let's add a couple of commands to these startup files:
</p>

<pre class="example" id="org5baee19">
$ emacs ~/.profile
{ add to the end of the file: "echo 'Hello .profile'" }
$ emacs ~/.bashrc
{ add to the end of the file: "echo 'Hello .bashrc'" }
$
</pre>

<p>
Now, log out and log back in to see the result:
</p>

<pre class="example" id="orgb4f71b9">
login: bdorf
Password:
Hello .profile
Hello .bashrc
bdorf@host: ~ $ 
</pre>

<p>
Now start another bash shell:
</p>

<pre class="example" id="org1f95d3a">
bdorf@host: ~ $ bash
Hello .bashrc
bdorf@host: ~ $ 
</pre>

<p>
You may see the output lines in reverse order.  This is because
often the <span class="fname">~/.bashrc</span> file may call the
<span class="fname">~/.profile</span> file, or vice versa.  
</p>

<p>
Often the order of the files being read can be altered by the Unix
distribution. 
</p>
</div>
</div>
</div>
<div id="outline-container-org337740b" class="outline-3">
<h3 id="org337740b">Aliases&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org337740b">
<p>
Aliases are used to take commonly used but lengthy commands and
assign them to an abbreviation.  Once done, we can place them in
our startup files so they are available all the time.
</p>
</div>

<div id="outline-container-org2c6fc04" class="outline-4">
<h4 id="org2c6fc04">Syntax</h4>
<div class="outline-text-4" id="text-org2c6fc04">
<p>
The syntax of creating an alias is:
</p>

<p>
alias <i>aliasname</i>=<i>command_possibly_quoted</i>
</p>

<p>
If <i>command</i> contains spaces, surround it with quotes.  Remember
double and single quotes will behave differently depending on what
you assign.
</p>

<p>
For example, perhaps we commonly change directories to our web
site.  We can create an alias for this:
</p>

<pre class="example" id="orgd498958">
bdorf@host: ~ $ alias goweb='cd /www/user/bdorf'  
bdorf@host: ~ $ goweb
bdorf@host: /www/user/bdorf $
</pre>

<p>
Or&#x2026;
</p>

<pre class="example" id="org6a9f5b9">
bdorf@host: /www/user/bdorf $ alias gohome="cd /home/$USER"
bdorf@host: /www/user/bdorf $ gohome
bdorf@host: ~ $
</pre>

<p>
NOTE: Variables are interpreted at the time of assignment, <span class="underline">not</span> execution.
</p>
</div>
</div>

<div id="outline-container-org3980b87" class="outline-4">
<h4 id="org3980b87">Parameters</h4>
<div class="outline-text-4" id="text-org3980b87">
<p>
Aliases do not support parameters.  However, you can place items
after them:
</p>

<pre class="example" id="orge6f6ea2">
$ alias efile='emacs -nw'
$ efile index.html
{emacs launches w/o gui (-nw) automatically loading 'index.html'}

</pre>

<p>
This is more useful for complex commands.  For example, a command
I use to reduce a PDF file size is:
</p>

<pre class="example" id="org23d616b">
$ gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -sOutputFile=output.pdf input.pdf
</pre>

<p>
I can alias most of it:
</p>

<pre class="example" id="org6e9becc">
$ alias shrink='gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -sOutputFile=output.pdf'  #no input.pdf
</pre>

<p>
Then, I can just type:
</p>

<pre class="example" id="orgfdb9e05">
$ shrink myfile.pdf
</pre>

<p>
And my alias will result in a file called <span class="fname">output.pdf</span>
of smaller size!
</p>
</div>
</div>

<div id="outline-container-org2deb0fd" class="outline-4">
<h4 id="org2deb0fd">Persistence</h4>
<div class="outline-text-4" id="text-org2deb0fd">
<p>
For aliases to be persistent across logins and reboots, place
their assigments into your startup files, i.e. <span class="fname">.bashrc</span>.
</p>
</div>
</div>
</div>
<div id="outline-container-org5198c73" class="outline-3">
<h3 id="org5198c73">Bash Prompt&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org5198c73">
<p>
Earlier we talked about <span class="cmd">PS1</span>.  Now, let's
customize our prompt even more.
</p>

<p>
We said <span class="cmd">PS1</span> can hold characters or character codes.  In
the previous section we only saw characters.  
</p>

<p>
The character codes Bash can interpret within <span class="cmd">PS1</span> are
several.  Here are the more common ones:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Code</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">\h</td>
<td class="org-left">Insert the system's hostname</td>
</tr>

<tr>
<td class="org-left">\u</td>
<td class="org-left">Insert the current username</td>
</tr>

<tr>
<td class="org-left">\w</td>
<td class="org-left">Insert the current working directory</td>
</tr>

<tr>
<td class="org-left">\$</td>
<td class="org-left">Insert the proper prompt: $ for normal users, # for root</td>
</tr>

<tr>
<td class="org-left">\n</td>
<td class="org-left">Insert a newline</td>
</tr>

<tr>
<td class="org-left">\l</td>
<td class="org-left">Insert the current TTY the user is utilizing</td>
</tr>
</tbody>
</table>

<p>
See <span class="cmd">man bash</span> withing the <i>PROMPTING</i> section for more.
</p>
</div>

<div id="outline-container-orgc051d0e" class="outline-4">
<h4 id="orgc051d0e">Example</h4>
<div class="outline-text-4" id="text-orgc051d0e">
<p>
Create a prompt which includes the current username, hostname, 
working directory, prompt and TTY.  Keep it all on the same line:
</p>

<pre class="example" id="orgc9610d9">
$ export PS1='\u@\h(\l):\w\$ '
bdorf@linuxbox(3):/tmp$ 
</pre>

<ul class="org-ul">
<li>Username is <b>bdorf</b></li>
<li>Hostname is <b>linuxbox</b></li>
<li>TTY is <b>3</b></li>
<li>Working directory is <b>/tmp</b></li>
<li>Prompt is <b>$</b></li>
</ul>
</div>
</div>

<div id="outline-container-org8d09dd3" class="outline-4">
<h4 id="org8d09dd3">Persistent Prompt</h4>
<div class="outline-text-4" id="text-org8d09dd3">
<p>
To keep your custom prompt persistent across logins and reboots,
include the line in the startup files, namely the
<span class="fname">.profile</span> or <span class="fname">.bashrc</span> file. 
</p>

<p>
NOTE: Sometimes the admin of the Unix system, or the maintainers
of the Unix distribution, configure the prompt in their own
desired location.  You may have to trace down where that is if
your prompt does not get set appropriately in all shell instances
(i.e. console logins, GUI logins, tmux, subshells, etc.)
</p>
</div>
</div>
</div>
<div id="outline-container-orgcd7a693" class="outline-3">
<h3 id="orgcd7a693"><span class="cmd">wget</span> - Web Get&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgcd7a693">
<p>
<span class="cmd">wget</span> is a tool for obtaining web resources from the
command line.
</p>

<p>
For example:
</p>
<pre class="example" id="org0803acb">
$ wget http://www.cpp.edu
--2018-09-24 17:34:50--  http://www.cpp.edu/
Resolving www.cpp.edu (www.cpp.edu)... 134.71.177.148, 2620:df:8000:fffd::148
Connecting to www.cpp.edu (www.cpp.edu)|134.71.177.148|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘index.html’

index.html                                   [ &lt;=&gt;                                                                               ]  34.66K  --.-KB/s   in 0.03s  

2018-09-24 17:34:51 (1.21 MB/s) - ‘index.html’ saved [35487]

$
</pre>

<p>
Notice the output is saved in <span class="fname">index.html</span>
</p>
</div>
</div>
<div id="outline-container-orgc4ed69e" class="outline-3">
<h3 id="orgc4ed69e">Secure Web Resources&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgc4ed69e">
<p>
Sometimes a resource is over an http*/S/* connection.  If the
security checks out, you won't have any issues:
</p>

<pre class="example" id="orgf63686a">
$ wget https://www.cpp.edu
--2018-09-24 17:38:57--  https://www.cpp.edu/
Resolving www.cpp.edu (www.cpp.edu)... 134.71.177.148, 2620:df:8000:fffd::148
Connecting to www.cpp.edu (www.cpp.edu)|134.71.177.148|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘index.html’

index.html                                   [ &lt;=&gt;                                                                               ]  34.66K  --.-KB/s   in 0.02s  

2018-09-24 17:38:58 (1.79 MB/s) - ‘index.html’ saved [35487]

$
</pre>

<p>
Other times, you may have an issue but you can override it (ignore the error) by using the
<span class="cmd">--no-check-certificate</span> switch:
</p>

<pre class="example" id="org97bf065">
$ wget --no-check-certificate https://www.cpp.edu/
--2024-09-15 16:45:41--  https://www.cpp.edu/
Resolving www.cpp.edu (www.cpp.edu)... 35.161.35.204, 34.216.213.39, 2600:1f18:24d1:a303:8e43:eff3:b099:fd4f, ...
Connecting to www.cpp.edu (www.cpp.edu)|35.161.35.204|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: ‘index.html’

index.html                       [ &lt;=&gt;                                          ]  47.00K  --.-KB/s    in 0.08s   

2024-09-15 16:45:42 (578 KB/s) - ‘index.html’ saved [48125]

$
</pre>
</div>
</div>
<div id="outline-container-org028e31d" class="outline-3">
<h3 id="org028e31d">Not Just HTML&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org028e31d">
<p>
You can obtain any file from the web you can with a browser using
<span class="cmd">wget</span>:
</p>

<pre class="example" id="orgd10e3bc">
$ wget -O file.c https://profg.codeberg.page/CS260001_Fall2024/support_files/sample.c
--2024-09-15 16:47:02--  https://profg.codeberg.page/CS260001_Fall2024/support_files/sample.c
Resolving profg.codeberg.page (profg.codeberg.page)... 217.197.91.145, 2001:67c:1401:20f0::1
Connecting to profg.codeberg.page (profg.codeberg.page)|217.197.91.145|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 65 [text/x-csrc]
Saving to: ‘file.c’

file.c                       100%[=============================================&gt;]      65  --.-KB/s    in 0s      

2024-09-15 16:47:02 (84.0 MB/s) - ‘file.c’ saved [65/65]

$ cat file.c 
#include &lt;stdio.h&gt;

void main() {
  printf( "Hello World\n" );
}
$ 
</pre>
</div>
</div>
<div id="outline-container-orgea536b3" class="outline-3">
<h3 id="orgea536b3">Specify Output File - <span class="cmd">-O</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgea536b3">
<p>
Using the <span class="cmd">-O</span> switch, you can specify the file name the
resource is saved to:
</p>

<pre class="example" id="orgc2a2fa5">
$ wget -O file.c https://profg.codeberg.page/CS260001_Fall2024/support_files/sample.c
--2024-09-15 16:32:10--  https://profg.codeberg.page/CS260001_Fall2024/support_files/sample.c
Resolving profg.codeberg.page (profg.codeberg.page)... 217.197.91.145, 2001:67c:1401:20f0::1
Connecting to profg.codeberg.page (profg.codeberg.page)|217.197.91.145|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 65 [text/x-csrc]
Saving to: ‘file.c’

file.c                       100%[=============================================&gt;]      65  --.-KB/s    in 0s      

2024-09-15 16:32:10 (87.6 MB/s) - ‘file.c’ saved [65/65]

$ cat file.c 
#include &lt;stdio.h&gt;

void main() {
  printf( "Hello World\n" );
}
$ 
</pre>
</div>
</div>
<div id="outline-container-org7b77f53" class="outline-3">
<h3 id="org7b77f53">Reverse Lines - <span class="cmd">rev</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org7b77f53">
<p>
<span class="cmd">rev</span> is a funny command.  It will completely reverse
whatever you give it.  Usually we use it as part of a pipeline of
commands.
</p>

<pre class="example" id="org812c9a6">
$ echo "Hello" | rev
olleH
$
</pre>

<p>
If you have multiple lines, it will reverse each line, but not the
lines themselves:
</p>

<pre class="example" id="orgfdda2ff">
$ cat file.txt
Line #1
Line #2
Line #3
Line #4
Line #5
$

$ rev file.txt
1# eniL
2# eniL
3# eniL
4# eniL
5# eniL
$

$ cat file.txt | rev
1# eniL
2# eniL
3# eniL
4# eniL
5# eniL
$
</pre>
</div>

<div id="outline-container-org8bdea4e" class="outline-4">
<h4 id="org8bdea4e">Flashback</h4>
<div class="outline-text-4" id="text-org8bdea4e">
<p>
Remember the example long ago to display a file from bottom to top:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ cat file1.txt
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">1</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">2</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">3</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">4</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">5</span>
$

$ tac file1.txt
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">5</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">4</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">3</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">2</span>
Line <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">1</span>
$
</pre>
</div>

<p>
We now have our way to reverse the entire file:
</p>

<div class="org-src-container">
<pre class="src src-perl">$ cat file1.txt
Line <span style="color: #ff7f24;">#1</span>
Line <span style="color: #ff7f24;">#2</span>
Line <span style="color: #ff7f24;">#3</span>
Line <span style="color: #ff7f24;">#4</span>
Line <span style="color: #ff7f24;">#5</span>
$

$ tac file1.txt | rev
5<span style="color: #ff7f24;"># eniL</span>
4<span style="color: #ff7f24;"># eniL</span>
3<span style="color: #ff7f24;"># eniL</span>
2<span style="color: #ff7f24;"># eniL</span>
1<span style="color: #ff7f24;"># eniL</span>
$
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc06dbec" class="outline-3">
<h3 id="orgc06dbec"><span class="cmd">make</span> Command<a id="org8cd5063"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgc06dbec">
<p>
As your programs get larger, we break them up into smaller,
manageable pieces (files).  So what happens when you have several
<span class="fname">.c</span> files but only need to modify 1.  Currently, we'd
put all our <span class="fname">.c</span> files in the <span class="cmd">cc</span> command and
<i>everything</i> would be recompiled.
</p>

<p>
Imagine a large project made up of hundreds of files.  Huge
projects could take hours of compile time if everything always had to be
recompiled.  Even small projects, being re-compiled
change after change after change add to the total development time.
</p>

<p>
<span class="cmd">make</span> is a command which allows us to specify a
<i>dependency structure</i> in a simple text file describing which files
depend on which other files.
</p>

<p>
Then, when we tell <span class="cmd">make</span> to build (compile) something, it will go
and see which dependencies need to be re-compiled and which do
not&#x2026;basically, only doing the work required to build a new
version of the project.
</p>
</div>
<div id="outline-container-org13a3980" class="outline-4">
<h4 id="org13a3980">Basic Usage</h4>
<div class="outline-text-4" id="text-org13a3980">
<p>
The general usage of <span class="cmd">make</span> is:
</p>

<pre class="example" id="org12427b4">
$ make target
</pre>

<p>
where <i>target</i> is a specific place in the dependency
structure file to start. 
</p>

<p>
For this class, we're not going to use any additional switches for
the <span class="cmd">make</span> command.  We will, however, use various
targets depending on what we want done.
</p>
</div>
</div>

<div id="outline-container-org35f2a1b" class="outline-4">
<h4 id="org35f2a1b">Default Dependency Structure File</h4>
<div class="outline-text-4" id="text-org35f2a1b">
<p>
The file which describes the dependency structure is called a
<span class="fname">Makefile</span>.  I put a capital 'M' on it because all versions of
<span class="cmd">make</span> (that I know of) accept it as the <i>default</i> file
name for a "Makefile".
</p>

<p>
If you really want a differently named file, you can do by
providing <span class="cmd">make</span> the addtional <span class="cmd">-f</span> switch to
specify the desired file: 
</p>

<pre class="example" id="orgd28e388">
$ make -f MyMakefile mytarget
</pre>

<p>
Some versions of <span class="cmd">make</span> also accept other names as their
default.  Check the manual page for your installation to see what
options you have.
</p>
</div>
</div>

<div id="outline-container-org2deef4f" class="outline-4">
<h4 id="org2deef4f">Simple Example</h4>
<div class="outline-text-4" id="text-org2deef4f">
<p>
Let's create a simple <span class="fname">Makefile</span> to demonstrate how to
use <span class="cmd">make</span>:
</p>

<pre class="example" id="org49b7dfd">
$ echo -e "target1:\n\techo Building Target 1\ntarget2:\n\techo Building Target 2\n" &gt; Makefile
$ cat Makefile
target1:
 {tab}  echo Building Target 1
target2:
 {tab}  echo Building Target 2

$
</pre>

<p>
In the next slide, we'll discuss the Makefiles which depend
heavily on TABs, which is why we needed the <span class="cmd">-e</span>
switch for <span class="cmd">echo</span> - to include tabs (\t) and newlines (\n). 
</p>

<p>
Now let's see what happens when we issue 3 different versions of
the <span class="cmd">make</span> command:
</p>

<pre class="example" id="org73e06cc">
$ cat Makefile   # Review what's in the file
target1:
 {tab}  echo Building Target 1
target2:
 {tab}  echo Building Target 2
$
$ make target1              # Specify target1
echo Building Target 1
Building Target 1
$
$ make target2              # Specify target2
echo Building Target 2
Building Target 2
$
$ make                      # Don't specify a target, and the first one is used.
echo Building Target 1
Building Target 1
$
</pre>

<p>
Notice the actions for the particular target were:
</p>
<ul class="org-ul">
<li>The command was displayed on the screen, and</li>
<li>Command was executed</li>
</ul>

<p>
Also notice, when <b>no target was specified</b>, the first target in
the file, aka. the <i>default target</i>, was performed.
</p>
</div>
</div>
</div>
<div id="outline-container-org51c64ec" class="outline-3">
<h3 id="org51c64ec">Makefiles<a id="orgea96a5f"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org51c64ec">
<p>
Makefiles (yes one word) are the text files containing the
dependency structure for a project.  Additionally, it can contain
instructions for extra tasks we may want, like, deleting temporary
files, making commits to a version control system, etc.
</p>
</div>

<div id="outline-container-orga86c71d" class="outline-4">
<h4 id="orga86c71d">File Name</h4>
<div class="outline-text-4" id="text-orga86c71d">
<p>
The default file name for the Makefile is <span class="fname">Makefile</span>
with a capital 'M'.  While the GNU version of <span class="cmd">make</span>
supports other names, <span class="fname">Makefile</span> has been around for
decades.  This is the name we'll use in this class.
</p>
</div>
</div>

<div id="outline-container-orgeec9b2c" class="outline-4">
<h4 id="orgeec9b2c">TAB Heavy</h4>
<div class="outline-text-4" id="text-orgeec9b2c">
<p>
Makefiles heavily depend on the TAB character for blocks of
instructions.  Unlike some languages, <span class="cmd">make</span> is not
forgiving if you choose spaces instead, not even the same number
of spaces each time.  TABs are <i>required</i>!
</p>
</div>
</div>

<div id="outline-container-orgd6fe32c" class="outline-4">
<h4 id="orgd6fe32c">Targets</h4>
<div class="outline-text-4" id="text-orgd6fe32c">
<p>
Makefiles are basically descriptions of what's required to build a
<i>target</i>.  Targets are simple identifiers (letters, numbers,
underscore) followed by a colon, at the start of a line:
</p>

<pre class="example" id="org6c20099">
some_target:
</pre>

<p>
A Makefile can have as many targets as you'd like.
</p>
</div>
</div>

<div id="outline-container-org5376ecf" class="outline-4">
<h4 id="org5376ecf">Commands to Build a Target</h4>
<div class="outline-text-4" id="text-org5376ecf">
<p>
The commands to build, or <i>satisfy</i>, a target go on the lines after
the target and must be indented with tabs:
</p>

<pre class="example" id="org1ab48bf">
some_target:
 {tab}  echo "Hello World"
</pre>

<p>
There is a TAB before <span class="cmd">echo</span> (just 1).
</p>
</div>
</div>

<div id="outline-container-org1d362b3" class="outline-4">
<h4 id="org1d362b3">Comments</h4>
<div class="outline-text-4" id="text-org1d362b3">
<p>
Comments in Makefiles are the same as in Bash&#x2026;hash marks:
</p>

<pre class="example" id="org0e42cdb">
some_target:
# comment
	echo "Hello world"
</pre>
</div>
</div>

<div id="outline-container-orga0432a4" class="outline-4">
<h4 id="orga0432a4">Variables</h4>
<div class="outline-text-4" id="text-orga0432a4">
<p>
Makefiles support variables similar to Bash.  By convention, the
variables are all caps and simple identifier rules apply.  This
makes it easy to change, for example, a compiler's switches as
needed.
</p>

<p>
To <i>use</i> a variable, enclose it within <span class="fname">$()</span>:
</p>

<pre class="example" id="org0f91633">
CC=cc
BNAME=sample

some_target:
	$(CC) $(BNAME).c -o $(BNAME)
</pre>

<pre class="example" id="org68b0a29">
$ make
cc prompt.c sample.c -o sample
$
</pre>
</div>
</div>

<div id="outline-container-orgb098869" class="outline-4">
<h4 id="orgb098869">Silence the Command Echoing</h4>
<div class="outline-text-4" id="text-orgb098869">
<p>
Notice the command(s) to satisfy a target is echoed to the screen.
To silence a command from being echoed during processing, precede
the line with an '@' symbol:
</p>
<pre class="example" id="orgb39de6b">
CC=cc
BNAME=sample

some_target:
	@echo "Compiling $(BNAME)..."
	@$(CC) prompt.c $(BNAME).c -o $(BNAME)

</pre>

<p>
and the output:
</p>

<pre class="example" id="org8432d09">
$ make
Compiling sample...
$
</pre>
</div>
</div>

<div id="outline-container-org3f477a5" class="outline-4">
<h4 id="org3f477a5">Dependent Targets</h4>
<div class="outline-text-4" id="text-org3f477a5">
<p>
Often, building a target depends on another target.  To specify
this, list dependency targets after the ':' on the target line,
space separated:
</p>

<pre class="example" id="org5ad0f2b">
CC=cc
BNAME=sample

some_target: clean
	$(CC) prompt.c $(BNAME).c -o $(BNAME)

clean:
	rm *.tmp 2&gt; /dev/null
</pre>

<p>
This says, "To satisfy <i>some_target</i>, <span class="cmd">make</span> must first
satisfy <i>clean</i>."
</p>

<p>
Now when we build "some_target" (or don't provide a target as
"some_target" is the default), first "clean" will be built.
</p>

<p>
Notice above we removed all '@'s to allow echoing.  Now&#x2026;
</p>

<pre class="example" id="orgb9531ae">
$ make clean
rm *.tmp 2&gt; /dev/null
$ make
rm *.tmp 2&gt; /dev/null
cc prompt.c sample.c -o sample
$
</pre>

<p>
Notice we can make "clean" directly, or, it is done when we build
the default since "some_target" is dependent on
"clean".
</p>
</div>
</div>
</div>
<div id="outline-container-orge5fe1ee" class="outline-3">
<h3 id="orge5fe1ee">Practical Example of a Makefile&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orge5fe1ee">
<p>
While the point of this slide is to illustrate a typical Makefile, I
created a project the way I normally do so you can additionally
see how a project may be setup complete with a README, GPL license,
Makefile, etc.
</p>

<p>
To best study this example and try things out, you'll need the
project which goes along with it.
</p>

<p>
To obtain the project file, use <span class="cmd">wget</span> and then 
<span class="cmd">tar xfz</span>:
</p>

<pre class="example" id="org9a262e5">
 wget https://profg.codeberg.page/CS260001_Fall2024/support_files/rot-cipher.tar.gz
--2024-09-15 16:42:05--  https://profg.codeberg.page/CS260001_Fall2024/support_files/rot-cipher.tar.gz
Resolving profg.codeberg.page (profg.codeberg.page)... 217.197.91.145, 2001:67c:1401:20f0::1
Connecting to profg.codeberg.page (profg.codeberg.page)|217.197.91.145|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 14928 (15K) [application/gzip]
Saving to: ‘rot-cipher.tar.gz’

rot-cipher.tar.gz            100%[=============================================&gt;]  14.58K  89.1KB/s    in 0.2s    

2024-09-15 16:42:06 (89.1 KB/s) - ‘rot-cipher.tar.gz’ saved [14928/14928]

$
$ ######## Now extract it  #########
$
$ tar xfz rot-cipher.tar.gz 
$ ls -alF
total 80
drwx------  3 instructor instructor  4096 Nov 10 14:34 ./
drwxrwxrwt 23 root     root     16384 Nov 10 14:34 ../
drwx------  5 instructor instructor  4096 Nov 10 14:29 rot-cipher/
-rw-------  1 instructor instructor 55877 Nov 10 14:31 rot-cipher.tar.gz
$
</pre>

<p>
Everything, including the <span class="fname">Makefile</span> can be found under
the <span class="fname">rot-cipher</span> directory.
</p>

<p>
For this lecture, here is the project's <span class="fname">Makefile</span>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Set some variables</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Kinda went overboard, but good for demonstration purposes</span>
<span style="color: #eedd82;">CC</span>=cc                
<span style="color: #eedd82;">PRG</span>=rot-cipher
<span style="color: #eedd82;">ESRC</span>=src/encrypt
<span style="color: #eedd82;">DSRC</span>=src/decrypt
<span style="color: #eedd82;">CSRC</span>=src/common
<span style="color: #eedd82;">OBJS</span>=obj/encrypt.o obj/decrypt.o obj/common.o

default: clean encrypt decrypt $(<span style="color: #fa8072;">PRG</span>).c         <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice dependencies on other targets AND file(s)</span>
        @$(<span style="color: #fa8072;">CC</span>) $(<span style="color: #fa8072;">PRG</span>).c $(<span style="color: #fa8072;">OBJS</span>) -o $(<span style="color: #fa8072;">PRG</span>)

encrypt: $(<span style="color: #fa8072;">ESRC</span>)/encrypt.h $(<span style="color: #fa8072;">ESRC</span>)/encrypt.c common
        @cd $(<span style="color: #fa8072;">ESRC</span>); $(<span style="color: #fa8072;">CC</span>) -c encrypt.c -o ../../obj/encrypt.o

decrypt: $(<span style="color: #fa8072;">DSRC</span>)/decrypt.h $(<span style="color: #fa8072;">DSRC</span>)/decrypt.c common
        @cd $(<span style="color: #fa8072;">DSRC</span>); $(<span style="color: #fa8072;">CC</span>) -c decrypt.c -o ../../obj/decrypt.o

common: $(<span style="color: #fa8072;">CSRC</span>)/common.h $(<span style="color: #fa8072;">CSRC</span>)/common.c
        @cd $(<span style="color: #fa8072;">CSRC</span>); $(<span style="color: #fa8072;">CC</span>) -c common.c -o ../../obj/common.o

clean:
        @rm rot-cipher 2&gt; /dev/null

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Delete .o files as well</span>
realclean: clean                     <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Notice it still depens on 'clean'</span>
        @rm $(<span style="color: #fa8072;">OBJS</span>) 2&gt; /dev/null
</pre>
</div>
</div>
</div>
<div id="outline-container-org9b6725f" class="outline-3">
<h3 id="org9b6725f">Base Name - <span class="cmd">basename</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org9b6725f">
<p>
Often, we'll have a full path/file name specification but we'll
only want the file name.  To "trim" off the path information, we
use the <span class="cmd">basename</span> command.
</p>

<p>
<span class="cmd">basename</span> takes a <span class="fname">path/to/file</span> description and will
return only the file name.
</p>

<pre class="example" id="org4488ad5">
$ ls /tmp/tmp/file.txt 
/tmp/tmp/file.txt
$
$ basename /tmp/tmp/file.txt 
file.txt
$
</pre>

<p>
We can even use variables:
</p>
<pre class="example" id="orgc35186e">
$ FILE=/tmp/tmp/file.txt
$ basename $FILE
file.txt
$
</pre>

<p>
<span class="cmd">-s</span> : To remove the suffix from the file name, you can
use <span class="cmd">-s</span> followed by the suffix to remove:
</p>

<pre class="example" id="orgf073397">
$ basename /tmp/subdir1/file.txt
file.txt
$ basename -s txt /tmp/subdir1/file.txt
file.
$ basename -s .txt /tmp/subdir1/file.txt
file
$
</pre>

<p>
Notice unless you include the period in your suffix, it is left on
the base filename.
</p>

<p>
NOTE: <span class="cmd">basename</span> <b>requires</b> the path/file specification as
a parameter, it can not take it as input from a pipe:
</p>

<pre class="example" id="orgd2a58b8">
$ echo "/tmp/tmp/file.txt" | basename
basename: missing operand
Try 'basename --help' for more information.
$
</pre>

<p>
So you'll need to account for this in your scripts
</p>
</div>
</div>
<div id="outline-container-org9ed907e" class="outline-3">
<h3 id="org9ed907e">Dir Name - <span class="cmd">dirname</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org9ed907e">
<p>
Just like <span class="cmd">basename</span>, there is a complimentary command
called <span class="cmd">dirname</span> which returns everything <i>except</i> the
last component of the full path:
</p>

<pre class="example" id="orga4446d8">
$ pwd
/tmp/tmp/another_dir
$ basename $(pwd)
another_dir
$ dirname $(pwd)
/tmp/tmp
$
</pre>

<p>
NOTE: <span class="cmd">dirname</span> returns all but the last component
<i>regardless</i> if the last component is a file or another directory
name!
</p>

<pre class="example" id="orgfa9f971">
$ ls -alF
total 8
drwx------ 2 bdorf bdorf 4096 Mar 17 16:35 ./
drwx------ 3 bdorf bdorf 4096 Mar 17 16:34 ../
-rw------- 1 bdorf bdorf    0 Mar 17 16:35 somefile.txt
$ pwd
/tmp/tmp/another_dir
$ basename $(pwd)
another_dir
$ dirname $(pwd)
/tmp/tmp
$ dirname /tmp/tmp/another_dir/somefile.txt 
/tmp/tmp/another_dir
$
</pre>

<p>
There are no switches to know for this class for
<span class="cmd">dirname</span>.
</p>
</div>
</div>
<div id="outline-container-org683dc6a" class="outline-3">
<h3 id="org683dc6a"><span class="cmd">basename</span>/<span class="cmd">dirname</span>: No STDIN&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org683dc6a">
<p>
<span class="cmd">basename</span>/<span class="cmd">dirname</span> have one small limitation -
neither can use STDIN as a source of information.
</p>

<p>
For example, consider the following:
</p>

<pre class="example" id="org3c91a46">
$ echo /path/to/file | basename
basename: missing operand
Try 'basename --help' for more information.
$

$ echo /path/to/file | dirname
dirname: missing operand
Try 'dirname --help' for more information.
$
</pre>

<p>
Neither command was programmed to look for data from STDIN.  Only a
command line parameter can be used for
<span class="cmd">basename</span>/<span class="cmd">dirname</span> to work:
</p>

<pre class="example" id="org4f651e2">
$ basename /path/to/file
file
$

$ dirname /path/to/file
/path/to
$
</pre>
</div>
</div>
<div id="outline-container-org23d297a" class="outline-3">
<h3 id="org23d297a">File Statistics - <span class="cmd">stat</span><a id="org2f0f20c"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org23d297a">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org0d9a298">stat</a></td></tr></table>
</p>

<p>
We often want to get information about a file in our scripts.  We
can parse <span class="cmd">ls</span> output but there is even more information
available which <span class="cmd">ls</span> doesn't provide.
</p>

<p>
<span class="cmd">stat</span> returns information about an individual file:
</p>
<pre class="example" id="orge0c7e98">
$ stat script.bash 
  File: ‘script.bash’
  Size: 29              Blocks: 8          IO Block: 4096   regular file
  Device: fe02h/65026d    Inode: 4980827     Links: 1
  Access: (0600/-rw-------)  Uid: ( 1000/dorf)   Gid: ( 1000/dorf)
  Access: 2018-09-27 16:14:23.064566752 -0700
  Modify: 2018-09-27 16:14:27.156566678 -0700
  Change: 2018-09-27 16:22:13.124558334 -0700
  Birth: -
$
</pre>

<p>
As you can see, it includes the file's name, size in bytes, user
and group ownership, etc.
</p>
</div>

<div id="outline-container-org4de6c2e" class="outline-4">
<h4 id="org4de6c2e">Terse - <span class="cmd">-t</span></h4>
<div class="outline-text-4" id="text-org4de6c2e">
<p>
<span class="cmd">stat</span> can also provide its information in a <i>terse</i>, one liner:
</p>
<pre class="example" id="org72e28bb">
$ stat -t script.bash 
script.bash 29 8 8180 1000 1000 fe02 4980827 1 0 0 1538090063 1538090067 1538090533 0 4096
$
</pre>

<p>
The valuable columns are:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">Col #</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">1</td>
<td class="org-left">File name (script.bash)</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-left">Size in bytes (29)</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-left">Permissions (not yet discussed)</td>
</tr>

<tr>
<td class="org-right">5</td>
<td class="org-left">UID (not yet discussed)</td>
</tr>

<tr>
<td class="org-right">6</td>
<td class="org-left">GID (not yet discussed)</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-org073e36e" class="outline-5">
<h5 id="org073e36e">Permissions</h5>
<div class="outline-text-5" id="text-org073e36e">
<p>
The permissions of <i>terse</i> mode are a bit confusing.  What's
important for this class are <b>the last 3 digits</b> of the HEX number.
</p>

<p>
In the example above, the last 3 HEX digits are 180.  In binary,
180 is <i>1 1000 0000</i>. 
</p>

<p>
Now break that binary number up into 3 bits each: <i>110 000 000</i>
</p>

<p>
And you have the bits of the permissions: 600 or "rw--&#x2013;&#x2014;".
</p>
</div>
</div>
</div>

<div id="outline-container-org8edf71c" class="outline-4">
<h4 id="org8edf71c"><span class="cmd">--format</span></h4>
<div class="outline-text-4" id="text-org8edf71c">
<p>
The <span class="cmd">--format</span> switch allows us to specify a specific
collection of items we want displayed:
</p>

<pre class="example" id="orgeb831ed">
%a     access rights in octal
%A     access rights in human readable form
%F     file type
%g     group ID of owner
%G     group name of owner
%n     file name
%s     total size, in bytes
%u     user ID of owner
%U     user name of owner
%w     time of file birth, human-readable; - if unknown
%W     time of file birth, seconds since Epoch; 0 if unknown
%x     time of last access, human-readable
%X     time of last access, seconds since Epoch
%y     time of last data modification, human-readable
%Y     time of last data modification, seconds since Epoch
%z     time of last status change, human-readable
%Z     time of last status change, seconds since Epoch
</pre>

<p>
For example, show only the file name, type, and size but in a
nicely worded form:
</p>

<pre class="example" id="orgf9f023e">
$ stat --format="%n (%F)     Size: %s bytes" script.bash 
script.bash (regular file)     Size: 29 bytes
$ 
</pre>

<p>
See how the <span class="cmd">--format</span> switch was given an equal sign and
a double-quoted string containing not only the format symbols, but
also normal text we wanted to include.  This same method is used
by the <span class="cmd">date</span> command.
</p>
</div>
<div id="outline-container-org3bd1ecd" class="outline-5">
<h5 id="org3bd1ecd">Why an '=' sign???</h5>
<div class="outline-text-5" id="text-org3bd1ecd">
<p>
In Unix, the <i>convention</i> is, there are two kinds of switches:
single character switches preceded with a single dash (-i), and
multi-character switches preceded with two dashes (--format).  
</p>

<p>
Often, Unix commands will use single-dash, single-char switches for the most
common options.  The commands may also provide double-dash,
multi-char options.  The double-dash, multi-char options usually
require an equal sign '=' for the values being passed (if
needed).
</p>

<p>
For example, the <span class="cmd">stat</span> command can use the -t switch
to provide information in a simple manner, but you need the
"&#x2013;format=" switch to view it in a custom manner.
</p>

<p>
WARNING: Not every command behaves along this convention.  That's
why <span class="cmd">man</span> pages exist.  Case in point, <span class="cmd">java</span>
can show its version number via <span class="cmd">java -version</span>&#x2026;single
dash, multi-character&#x2026;bad Java!
</p>

<p>
The point: How a program behaves is 100% dependent on the
programmer's decisions and the supporting libraries they use (if any).
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-orgb7c403c" class="outline-3">
<h3 id="orgb7c403c">Alternative Process Tree Viewer: <span class="cmd">pstree</span>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgb7c403c">
<p>
If installed, <span class="cmd">pstree</span> can also be used to view the
process hierarchy:
</p>

<pre class="example" id="orgec3d4d1">
$ pstree
  systemd-+-ModemManager-+-{gdbus}
        |              `-{gmain}
        |-NetworkManager-+-dhclient
        |                |-{NetworkManager}
        |                |-{gdbus}
        |                `-{gmain}
        |-acpid
        |-agetty
        |-2*[at-spi-bus-laun-+-dbus-daemon]
        |                    |-{dconf worker}]
        |                    |-{gdbus}]
        |                    `-{gmain}]
 ...
 $
</pre>
</div>

<div id="outline-container-org258a0fb" class="outline-4">
<h4 id="org258a0fb">Limit View</h4>
<div class="outline-text-4" id="text-org258a0fb">
<p>
Usually, you only want to see the tree of a certain process.  To
do so, pass <span class="cmd">pstree</span> the PID to start with:
</p>

<pre class="example" id="org3c76fb3">
$ pstree 7102
bash───su───bash───su───bash───sleep
$ 
</pre>
</div>
</div>
</div>
<div id="outline-container-org5762b2f" class="outline-3">
<h3 id="org5762b2f"><span class="cmd">mktemp</span><a id="org9595d14"></a>&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-org5762b2f">
<p>
<table width="95%"><tr><td style="border: solid black 2px; padding: 3px; background: #ffffff;">Practice Exercises: <a href="#org2e9187a">mktemp</a></td></tr></table>
</p>

<p>
We often need to create and use temporary
files.  On Unix, we can use the <span class="cmd">mktemp</span> command to do
just that.  With this command, a new - intended to be temporary -
file is created, <i>usually</i> in your current working directory
("current directory).
</p>

<pre class="example" id="orgd17a951">
mktemp [-p DIRECTORY] [--suffix=EXT] TEMPLATE 
</pre>

<p>
Where <i>TEMPLATE</i> is what you want the filename to look like,
containing at least 3 consecutive capital 'X's.
</p>

<p>
For example&#x2026;
</p>
<div class="org-src-container">
<pre class="src src-sh">mktemp XXXXX.dat
</pre>
</div>

<p>
&#x2026;will create a temporary file with random letters replacing each 'X'
in 'XXXXX', followed by the extension  <span class="fname">.dat</span>. 
</p>

<p>
Optionally, you can use the <span class="cmd">--suffix</span> to specify the
suffix:
</p>

<div class="org-src-container">
<pre class="src src-sh">mktemp --suffix=.dat XXXXX
</pre>
</div>

<p>
Another example: Create a temporary file starting with the
current year (2021), 5 random letters and a <span class="fname">.tmp</span>
extension: 
</p>

<div class="org-src-container">
<pre class="src src-sh">$ mktemp 2021XXXXX.tmp
20218ka4y.tmp
$ ls *.tmp
20218ka4y.tmp
$
</pre>
</div>

<p>
Notice how the name of the temporary file is displayed?  This is
useful when you need to know the name of the file created in your
scripts.  
</p>

<p>
We often need to remember the name of the temporary file created,
so using command substitution:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">!/bin/</span><span style="color: #00ffff;">bash</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Script to output directory listing to a temporary file</span>

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Create and get a temporary file</span>
<span style="color: #eedd82;">TFILE</span>=$(<span style="color: #fa8072;">mktemp</span> 2021-XXXXX.tmp)

<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Now we can output to it:</span>
ls -laF &gt; $<span style="color: #eedd82;">TFILE</span>
</pre>
</div>
</div>
<div id="outline-container-org53213e3" class="outline-4">
<h4 id="org53213e3">Where is the File Created</h4>
<div class="outline-text-4" id="text-org53213e3">
<p>
According to the <i>man</i> page, files should be created, by default,
in <span class="fname">/tmp</span>.  However, there is a caveat&#x2026; <b>a template
must not be used</b>.  In our previous examples, we provided a
template (the name with XXXXX in in it).
</p>

<p>
It turns out, if you don't specify a template:
</p>

<pre class="example" id="org3815174">
TFILE=$(mktemp)
</pre>

<p>
The temp file will be located in <span class="fname">/tmp</span>.  But give a
template as above, and the file will be created <i>in the current
directory</i>. 
</p>

<p>
If you want to use <span class="fname">/tmp</span> AND a template, you need to
specify <span class="fname">/tmp</span> with the <span class="cmd">-p</span> switch!
</p>

<pre class="example" id="orgf23952b">
$ mktemp -p /tmp myfile.XXXX
/tmp/myfile.l11C

# or in script

TFILE=$(mktemp -p /tmp myfile.XXXX)
# $TFILE now contains "/tmp/myfile.l11C" ('l11C' would be other random chars)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb370365" class="outline-3">
<h3 id="orgb370365">'ncat' Simple Tool to Transfer Data over Network&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgb370365">
<ul class="org-ul">
<li>Version of Netcat ('nc')
<ul class="org-ul">
<li>Tries to implement best features of all version</li>
</ul></li>
<li>Provided by the makers of 'nmap'</li>
<li>Can be a client or a server</li>
<li>We'll focus on IPv4 (i.e. the IP addresses you're familiar with)</li>
</ul>
</div>
<div id="outline-container-org299f343" class="outline-4">
<h4 id="org299f343">Server</h4>
<div class="outline-text-4" id="text-org299f343">
<p>
Issue:
</p>

<pre class="example" id="org28d2224">
$ ncat -4 -l -p 12345
</pre>

<p>
Meaning:
</p>
<ul class="org-ul">
<li>-4 means stick to IPv4</li>
<li>-l means "listen" for connections</li>
<li>-p means user port 12345</li>
</ul>

<p>
Note #1: port must not be used by any other application.  So if
you're trying this on CPP while I am, use a different port number.
</p>

<p>
Note #2: We don't have 'root' access on CPP so port number must be
greater than 1023.
</p>
</div>
</div>

<div id="outline-container-org3b1f5ec" class="outline-4">
<h4 id="org3b1f5ec">Client</h4>
<div class="outline-text-4" id="text-org3b1f5ec">
<p>
Issue:
</p>

<pre class="example" id="orge1a31c8">
$ ncat localhost 12345
</pre>

<p>
Meaning:
</p>
<ul class="org-ul">
<li>'localhost' is the name of the machine to "call".</li>
<li>12345 is the destination port to "call into".</li>
</ul>
</div>
</div>
<div id="outline-container-orgeef0771" class="outline-4">
<h4 id="orgeef0771">Demo on VM</h4>
</div>
<div id="outline-container-org3b8b90e" class="outline-4">
<h4 id="org3b8b90e">Demo on CPP???</h4>
<div class="outline-text-4" id="text-org3b8b90e">
</div>
</div>
</div>
<div id="outline-container-orgd165ef4" class="outline-3">
<h3 id="orgd165ef4">Wireshark Demo&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgd165ef4">
<ul class="org-ul">
<li>Wireshark: GUI tool to see traffic
<ul class="org-ul">
<li>tcpdump: CLI tool to see traffic</li>
</ul></li>
</ul>

<p>
CPP won't let us have fun!  Must be local&#x2026;
</p>

<ul class="org-ul">
<li>Capture simple 'ncat' server/client communication</li>
<li>Capture HTTP traffic (will probably see some DNS too)</li>
</ul>
</div>
</div>
<div id="outline-container-orgf3d57ae" class="outline-3">
<h3 id="orgf3d57ae">Reading a Line from a Stream&#xa0;&#xa0;&#xa0;<span class="tag"><span class="Excluded">Excluded</span></span></h3>
<div class="outline-text-3" id="text-orgf3d57ae">
<p>
When we read data from a stream, we read a number of bytes, not up
to a certain character.  This means if we want a certain type, or a
line, we need to deal with that ourselves.
</p>

<p>
Some possible methods are:
</p>
<ul class="org-ul">
<li>Read the buffer, parse it, and then extract what we want, or</li>
<li>Read 1 byte at a time until we reach a delimiter.</li>
</ul>

<p>
For example, let's take a look at a <i>readline</i> function which gets
a line of data from a file:
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Function to read a line from a file.</span>
<span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">- User provides a file descriptor and a maximum line length.</span>
<span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">- Function will return a char pointer (i.e. character array)</span>
<span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">- Don't know what the user wants, so we'll include the</span>
<span style="color: #ff7f24;">//      </span><span style="color: #ff7f24;">'\n' and \0 at the end of the string - not part of</span>
<span style="color: #ff7f24;">//      </span><span style="color: #ff7f24;">the maximum line length.</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">3 Possible outcomes to deal with:</span>
<span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">- \n is hit before max_length</span>
<span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">- Error read a char</span>
<span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">- max_length is hit before a \n is found.</span>

<span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">readline</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">max_length</span> ) {
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">index</span>       = 0;
  <span style="color: #98fb98;">char</span>  <span style="color: #eedd82;">buffer</span>[ 1 ] = { 0 };
  <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">string</span>      = malloc( max_length + 2 );
  <span style="color: #98fb98;">int</span>   <span style="color: #eedd82;">bytes_read</span>  = 0;

  <span style="color: #00ffff;">while</span> ( index &lt;= max_length ) {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">The following condition assumes there will not be an error because an</span>
    <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">error of -1 will result in -1 being seen as true.</span>
    bytes_read = read( fd, buffer, 1 );
    <span style="color: #00ffff;">if</span> ( bytes_read &gt; 0 ) {  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Read 1 byte</span>
      string[ index ] = buffer[0];  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Add byte to string</span>
      <span style="color: #00ffff;">if</span> ( buffer[0] == <span style="color: #ffa07a;">'\n'</span> ) {    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Did we hit the \n?</span>
        string[ index+1 ] = 0;      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Yes, add the null and return</span>
        <span style="color: #00ffff;">return</span> string;
      }
    } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> ( bytes_read == 0 ) { <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">No more data to read</span>
      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tack on NULL and return</span>
      string[ index ] = 0;    
      <span style="color: #00ffff;">return</span> string;      
    } <span style="color: #00ffff;">else</span> {                         <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Error reading a byte</span>
      <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">NULL</span>;                   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Just return NULL.</span>
    }
    index++;                        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">After a good read, bump index</span>
  }                                 <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">and go get another...</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If we're at this point, we've hit 'max_length'.  So...</span>
  string[ max_length ] = <span style="color: #ffa07a;">'\n'</span>;
  string[ max_length + 1 ]     = 0;       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tack on the \n and \0</span>
  <span style="color: #00ffff;">return</span> string;                          <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">and return.</span>
}
</pre>
</div>

<p>
As you can see, depending on your data, you could create additional
functions to read a non-whitespace string, a number, a date, SSN,
etc. all by just reading 1 byte at a time and monitoring for a
pattern.
</p>
</div>

<div id="outline-container-orgcada910" class="outline-4">
<h4 id="orgcada910">Alternative</h4>
<div class="outline-text-4" id="text-orgcada910">
<p>
The other possibility is to read a buffer and
then parse out what you need via manipulating arrays.
</p>

<p>
For example, here is the same function which reads a huge buffer
worth of data and then searches for the what to return.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This version suffers a bug if a line of text is larger than the</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">buffer size!</span>

<span style="color: #98fb98;">char</span>* <span style="color: #87cefa;">get_string</span>( <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">fd</span> ) {
  <span style="color: #98fb98;">char</span>*        <span style="color: #eedd82;">string</span> = <span style="color: #7fffd4;">NULL</span>;     <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">String to return; init to null ptr</span>
  <span style="color: #98fb98;">int</span>     <span style="color: #eedd82;">buffer_size</span> = 1048576;  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Buffer size of 1MB</span>
  <span style="color: #98fb98;">char</span>*        <span style="color: #eedd82;">buffer</span> = <span style="color: #7fffd4;">NULL</span>;    
  <span style="color: #98fb98;">int</span>               <span style="color: #eedd82;">i</span> = 0;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Indexes i and j</span>
  <span style="color: #98fb98;">int</span>               <span style="color: #eedd82;">j</span> = 0;
  <span style="color: #98fb98;">int</span>           <span style="color: #eedd82;">limit</span> = 0;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Number of bytes we'll copy.</span>
  <span style="color: #98fb98;">int</span>      <span style="color: #eedd82;">bytes_read</span> = 0;        <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Track bytes read into buffer.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Get RAM for buffer</span>
  buffer = malloc( buffer_size );

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Read data into buffer</span>
  bytes_read = read( fd, buffer, buffer_size );

  <span style="color: #00ffff;">if</span> ( bytes_read &lt; 0 )      <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Error with 'read'</span>
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">NULL</span>;

  <span style="color: #00ffff;">if</span> ( bytes_read == 0 ) {   <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Empty string</span>
    string = malloc( 1 );
    string[0] = 0;
    <span style="color: #00ffff;">return</span> string;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Buffer has good data, so search for the '\n'</span>
  <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">Additional parens are for readability.</span>
  <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">Same for {}</span>
  <span style="color: #00ffff;">while</span> ( ( i &lt; bytes_read )       <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Ensure i stays within valid data</span>
          &amp;&amp;
          ( buffer[ i ] != <span style="color: #ffa07a;">'\n'</span> ) ) { <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">And is not '\n'</span>
    i++;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">At this point, either buffer[ i ] is '\n' or we reached the</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">end of the data.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If i == bytes_read, we'll copy 'bytes_read' chars but need to add</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">a null, so malloc( i + 1 )</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If buffer[ i ] = '\n', we'll copy 'i+1' chars but need to add a</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">null, so malloc( i + 2 )</span>

  <span style="color: #00ffff;">if</span> ( i == bytes_read ) {
    string = malloc( i + 1 );
    limit = i - 1;
  } <span style="color: #00ffff;">else</span> {
    string = malloc( i + 2 );
    limit = i;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now copy the buffer into string.</span>
  <span style="color: #00ffff;">for</span> ( j = 0; j &lt;= limit; j++ )
    string[ j ] = buffer[ j ];
  string[ j ] = 0;               <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tack on null char</span>

  <span style="color: #00ffff;">return</span> string;                 <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Return copied string.</span>
}
</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<hr noshade style='height: 3px; width:100%;'><p>Author: David A. Gershman, CISSP<br>Published: 2025-08-24 Sun 18:54<br>Made with <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.4)</p>
</div>
</body>
</html>
